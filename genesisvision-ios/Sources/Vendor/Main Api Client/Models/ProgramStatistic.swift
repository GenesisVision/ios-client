//
// ProgramStatistic.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ProgramStatistic: Codable {

    public enum StartCurrency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }
    public enum InvestedCurrency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }
    public var balanceBase: AmountWithCurrency?
    public var balanceGVT: AmountWithCurrency?
    public var balanceSecondary: AmountWithCurrency?
    public var currentValue: Double?
    public var profitPercent: Double?
    public var profitValue: Double?
    public var drawdownPercent: Double?
    public var investorsCount: Int?
    public var hasNotifications: Bool?
    public var startDate: Date?
    public var startBalance: Double?
    public var startCurrency: StartCurrency?
    public var investedAmount: Double?
    public var investedCurrency: InvestedCurrency?
    public var tradesCount: Int?
    public var tradesSuccessCount: Int?
    public var profitFactorPercent: Double?
    public var sharpeRatioPercent: Double?


    
    public init(balanceBase: AmountWithCurrency?, balanceGVT: AmountWithCurrency?, balanceSecondary: AmountWithCurrency?, currentValue: Double?, profitPercent: Double?, profitValue: Double?, drawdownPercent: Double?, investorsCount: Int?, hasNotifications: Bool?, startDate: Date?, startBalance: Double?, startCurrency: StartCurrency?, investedAmount: Double?, investedCurrency: InvestedCurrency?, tradesCount: Int?, tradesSuccessCount: Int?, profitFactorPercent: Double?, sharpeRatioPercent: Double?) {
        self.balanceBase = balanceBase
        self.balanceGVT = balanceGVT
        self.balanceSecondary = balanceSecondary
        self.currentValue = currentValue
        self.profitPercent = profitPercent
        self.profitValue = profitValue
        self.drawdownPercent = drawdownPercent
        self.investorsCount = investorsCount
        self.hasNotifications = hasNotifications
        self.startDate = startDate
        self.startBalance = startBalance
        self.startCurrency = startCurrency
        self.investedAmount = investedAmount
        self.investedCurrency = investedCurrency
        self.tradesCount = tradesCount
        self.tradesSuccessCount = tradesSuccessCount
        self.profitFactorPercent = profitFactorPercent
        self.sharpeRatioPercent = sharpeRatioPercent
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(balanceBase, forKey: "balanceBase")
        try container.encodeIfPresent(balanceGVT, forKey: "balanceGVT")
        try container.encodeIfPresent(balanceSecondary, forKey: "balanceSecondary")
        try container.encodeIfPresent(currentValue, forKey: "currentValue")
        try container.encodeIfPresent(profitPercent, forKey: "profitPercent")
        try container.encodeIfPresent(profitValue, forKey: "profitValue")
        try container.encodeIfPresent(drawdownPercent, forKey: "drawdownPercent")
        try container.encodeIfPresent(investorsCount, forKey: "investorsCount")
        try container.encodeIfPresent(hasNotifications, forKey: "hasNotifications")
        try container.encodeIfPresent(startDate, forKey: "startDate")
        try container.encodeIfPresent(startBalance, forKey: "startBalance")
        try container.encodeIfPresent(startCurrency, forKey: "startCurrency")
        try container.encodeIfPresent(investedAmount, forKey: "investedAmount")
        try container.encodeIfPresent(investedCurrency, forKey: "investedCurrency")
        try container.encodeIfPresent(tradesCount, forKey: "tradesCount")
        try container.encodeIfPresent(tradesSuccessCount, forKey: "tradesSuccessCount")
        try container.encodeIfPresent(profitFactorPercent, forKey: "profitFactorPercent")
        try container.encodeIfPresent(sharpeRatioPercent, forKey: "sharpeRatioPercent")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        balanceBase = try container.decodeIfPresent(AmountWithCurrency.self, forKey: "balanceBase")
        balanceGVT = try container.decodeIfPresent(AmountWithCurrency.self, forKey: "balanceGVT")
        balanceSecondary = try container.decodeIfPresent(AmountWithCurrency.self, forKey: "balanceSecondary")
        currentValue = try container.decodeIfPresent(Double.self, forKey: "currentValue")
        profitPercent = try container.decodeIfPresent(Double.self, forKey: "profitPercent")
        profitValue = try container.decodeIfPresent(Double.self, forKey: "profitValue")
        drawdownPercent = try container.decodeIfPresent(Double.self, forKey: "drawdownPercent")
        investorsCount = try container.decodeIfPresent(Int.self, forKey: "investorsCount")
        hasNotifications = try container.decodeIfPresent(Bool.self, forKey: "hasNotifications")
        startDate = try container.decodeIfPresent(Date.self, forKey: "startDate")
        startBalance = try container.decodeIfPresent(Double.self, forKey: "startBalance")
        startCurrency = try container.decodeIfPresent(StartCurrency.self, forKey: "startCurrency")
        investedAmount = try container.decodeIfPresent(Double.self, forKey: "investedAmount")
        investedCurrency = try container.decodeIfPresent(InvestedCurrency.self, forKey: "investedCurrency")
        tradesCount = try container.decodeIfPresent(Int.self, forKey: "tradesCount")
        tradesSuccessCount = try container.decodeIfPresent(Int.self, forKey: "tradesSuccessCount")
        profitFactorPercent = try container.decodeIfPresent(Double.self, forKey: "profitFactorPercent")
        sharpeRatioPercent = try container.decodeIfPresent(Double.self, forKey: "sharpeRatioPercent")
    }
}

