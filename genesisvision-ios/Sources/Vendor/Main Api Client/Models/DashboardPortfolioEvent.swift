//
// DashboardPortfolioEvent.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class DashboardPortfolioEvent: Codable {

    public enum FeeSuccessManagerCurrency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }
    public enum FeeSuccessPlatformCurrency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }
    public enum Currency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }
    public enum ModelType: String, Codable { 
        case all = "All"
        case invest = "Invest"
        case withdraw = "Withdraw"
        case profit = "Profit"
        case loss = "Loss"
        case reinvest = "Reinvest"
        case canceled = "Canceled"
        case ended = "Ended"
        case withdrawByStopOut = "WithdrawByStopOut"
    }
    public enum AssetType: String, Codable { 
        case program = "Program"
        case fund = "Fund"
    }
    public var assetId: UUID?
    public var date: Date?
    public var title: String?
    public var url: String?
    public var value: Double?
    public var valueTotal: Double?
    public var feeSuccessManager: Double?
    public var feeSuccessManagerCurrency: FeeSuccessManagerCurrency?
    public var feeSuccessPlatform: Double?
    public var feeSuccessPlatformCurrency: FeeSuccessPlatformCurrency?
    public var profitPercent: Double?
    public var currency: Currency?
    public var type: ModelType?
    public var logo: String?
    public var color: String?
    public var description: String?
    public var assetType: AssetType?


    
    public init(assetId: UUID?, date: Date?, title: String?, url: String?, value: Double?, valueTotal: Double?, feeSuccessManager: Double?, feeSuccessManagerCurrency: FeeSuccessManagerCurrency?, feeSuccessPlatform: Double?, feeSuccessPlatformCurrency: FeeSuccessPlatformCurrency?, profitPercent: Double?, currency: Currency?, type: ModelType?, logo: String?, color: String?, description: String?, assetType: AssetType?) {
        self.assetId = assetId
        self.date = date
        self.title = title
        self.url = url
        self.value = value
        self.valueTotal = valueTotal
        self.feeSuccessManager = feeSuccessManager
        self.feeSuccessManagerCurrency = feeSuccessManagerCurrency
        self.feeSuccessPlatform = feeSuccessPlatform
        self.feeSuccessPlatformCurrency = feeSuccessPlatformCurrency
        self.profitPercent = profitPercent
        self.currency = currency
        self.type = type
        self.logo = logo
        self.color = color
        self.description = description
        self.assetType = assetType
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(assetId, forKey: "assetId")
        try container.encodeIfPresent(date, forKey: "date")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(value, forKey: "value")
        try container.encodeIfPresent(valueTotal, forKey: "valueTotal")
        try container.encodeIfPresent(feeSuccessManager, forKey: "feeSuccessManager")
        try container.encodeIfPresent(feeSuccessManagerCurrency, forKey: "feeSuccessManagerCurrency")
        try container.encodeIfPresent(feeSuccessPlatform, forKey: "feeSuccessPlatform")
        try container.encodeIfPresent(feeSuccessPlatformCurrency, forKey: "feeSuccessPlatformCurrency")
        try container.encodeIfPresent(profitPercent, forKey: "profitPercent")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(color, forKey: "color")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(assetType, forKey: "assetType")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        assetId = try container.decodeIfPresent(UUID.self, forKey: "assetId")
        date = try container.decodeIfPresent(Date.self, forKey: "date")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        url = try container.decodeIfPresent(String.self, forKey: "url")
        value = try container.decodeIfPresent(Double.self, forKey: "value")
        valueTotal = try container.decodeIfPresent(Double.self, forKey: "valueTotal")
        feeSuccessManager = try container.decodeIfPresent(Double.self, forKey: "feeSuccessManager")
        feeSuccessManagerCurrency = try container.decodeIfPresent(FeeSuccessManagerCurrency.self, forKey: "feeSuccessManagerCurrency")
        feeSuccessPlatform = try container.decodeIfPresent(Double.self, forKey: "feeSuccessPlatform")
        feeSuccessPlatformCurrency = try container.decodeIfPresent(FeeSuccessPlatformCurrency.self, forKey: "feeSuccessPlatformCurrency")
        profitPercent = try container.decodeIfPresent(Double.self, forKey: "profitPercent")
        currency = try container.decodeIfPresent(Currency.self, forKey: "currency")
        type = try container.decodeIfPresent(ModelType.self, forKey: "type")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        color = try container.decodeIfPresent(String.self, forKey: "color")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        assetType = try container.decodeIfPresent(AssetType.self, forKey: "assetType")
    }
}

