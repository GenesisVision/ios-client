//
// SignalFee.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SignalFee: Codable {

    public enum ModelType: String, Codable { 
        case undefined = "Undefined"
        case gvProgramEntry = "GvProgramEntry"
        case gvProgramSuccess = "GvProgramSuccess"
        case gvFundEntry = "GvFundEntry"
        case gvGmGvtHolderFee = "GvGmGvtHolderFee"
        case managerProgramEntry = "ManagerProgramEntry"
        case managerProgramSuccess = "ManagerProgramSuccess"
        case managerFundEntry = "ManagerFundEntry"
        case managerFundExit = "ManagerFundExit"
        case gvWithdrawal = "GvWithdrawal"
        case managerSignalMasterSuccessFee = "ManagerSignalMasterSuccessFee"
        case managerSignalMasterVolumeFee = "ManagerSignalMasterVolumeFee"
        case gvSignalSuccessFee = "GvSignalSuccessFee"
    }
    public enum Currency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }
    public var title: String?
    public var type: ModelType?
    public var value: Double?
    public var currency: Currency?


    
    public init(title: String?, type: ModelType?, value: Double?, currency: Currency?) {
        self.title = title
        self.type = type
        self.value = value
        self.currency = currency
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(value, forKey: "value")
        try container.encodeIfPresent(currency, forKey: "currency")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        title = try container.decodeIfPresent(String.self, forKey: "title")
        type = try container.decodeIfPresent(ModelType.self, forKey: "type")
        value = try container.decodeIfPresent(Double.self, forKey: "value")
        currency = try container.decodeIfPresent(Currency.self, forKey: "currency")
    }
}

