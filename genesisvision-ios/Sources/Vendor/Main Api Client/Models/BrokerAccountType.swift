//
// BrokerAccountType.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class BrokerAccountType: Codable {

    public var id: UUID?
    public var name: String?
    public var description: String?
    public var type: BrokerTradeServerType?
    public var leverages: [Int]?
    public var currencies: [String]?
    public var minimumDepositsAmount: [String:Double]?
    public var isKycRequired: Bool?
    public var isSignalsAvailable: Bool?
    public var isDepositRequired: Bool?


    
    public init(id: UUID?, name: String?, description: String?, type: BrokerTradeServerType?, leverages: [Int]?, currencies: [String]?, minimumDepositsAmount: [String:Double]?, isKycRequired: Bool?, isSignalsAvailable: Bool?, isDepositRequired: Bool?) {
        self.id = id
        self.name = name
        self.description = description
        self.type = type
        self.leverages = leverages
        self.currencies = currencies
        self.minimumDepositsAmount = minimumDepositsAmount
        self.isKycRequired = isKycRequired
        self.isSignalsAvailable = isSignalsAvailable
        self.isDepositRequired = isDepositRequired
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(leverages, forKey: "leverages")
        try container.encodeIfPresent(currencies, forKey: "currencies")
        try container.encodeIfPresent(minimumDepositsAmount, forKey: "minimumDepositsAmount")
        try container.encodeIfPresent(isKycRequired, forKey: "isKycRequired")
        try container.encodeIfPresent(isSignalsAvailable, forKey: "isSignalsAvailable")
        try container.encodeIfPresent(isDepositRequired, forKey: "isDepositRequired")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        type = try container.decodeIfPresent(BrokerTradeServerType.self, forKey: "type")
        leverages = try container.decodeIfPresent([Int].self, forKey: "leverages")
        currencies = try container.decodeIfPresent([String].self, forKey: "currencies")
        minimumDepositsAmount = try container.decodeIfPresent([String:Double].self, forKey: "minimumDepositsAmount")
        isKycRequired = try container.decodeIfPresent(Bool.self, forKey: "isKycRequired")
        isSignalsAvailable = try container.decodeIfPresent(Bool.self, forKey: "isSignalsAvailable")
        isDepositRequired = try container.decodeIfPresent(Bool.self, forKey: "isDepositRequired")
    }
}

