//
// CopyTradingAccountInfo.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CopyTradingAccountInfo: Codable {

    public enum Currency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }
    public var id: UUID?
    public var currency: Currency?
    public var logo: String?
    public var title: String?
    public var balance: Double?
    public var equity: Double?
    public var freeMargin: Double?
    public var marginLevel: Double?
    public var available: Double?


    
    public init(id: UUID?, currency: Currency?, logo: String?, title: String?, balance: Double?, equity: Double?, freeMargin: Double?, marginLevel: Double?, available: Double?) {
        self.id = id
        self.currency = currency
        self.logo = logo
        self.title = title
        self.balance = balance
        self.equity = equity
        self.freeMargin = freeMargin
        self.marginLevel = marginLevel
        self.available = available
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(balance, forKey: "balance")
        try container.encodeIfPresent(equity, forKey: "equity")
        try container.encodeIfPresent(freeMargin, forKey: "freeMargin")
        try container.encodeIfPresent(marginLevel, forKey: "marginLevel")
        try container.encodeIfPresent(available, forKey: "available")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        currency = try container.decodeIfPresent(Currency.self, forKey: "currency")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        balance = try container.decodeIfPresent(Double.self, forKey: "balance")
        equity = try container.decodeIfPresent(Double.self, forKey: "equity")
        freeMargin = try container.decodeIfPresent(Double.self, forKey: "freeMargin")
        marginLevel = try container.decodeIfPresent(Double.self, forKey: "marginLevel")
        available = try container.decodeIfPresent(Double.self, forKey: "available")
    }
}

