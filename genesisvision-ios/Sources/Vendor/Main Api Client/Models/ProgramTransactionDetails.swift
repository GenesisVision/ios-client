//
// ProgramTransactionDetails.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ProgramTransactionDetails: Codable {

    public enum ProgramType: String, Codable { 
        case program = "Program"
        case fund = "Fund"
    }
    public enum SuccessFeeCurrency: String, Codable { 
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }
    public var id: UUID?
    public var managerName: String?
    public var programType: ProgramType?
    public var successFeeCurrency: SuccessFeeCurrency?
    public var logo: String?
    public var title: String?
    public var entryFee: Double?
    public var entryFeePercent: Double?
    public var successFee: Double?
    public var successFeePercent: Double?
    public var level: Int?
    public var exitFee: Double?
    public var exitFeePercent: Double?
    public var color: String?


    
    public init(id: UUID?, managerName: String?, programType: ProgramType?, successFeeCurrency: SuccessFeeCurrency?, logo: String?, title: String?, entryFee: Double?, entryFeePercent: Double?, successFee: Double?, successFeePercent: Double?, level: Int?, exitFee: Double?, exitFeePercent: Double?, color: String?) {
        self.id = id
        self.managerName = managerName
        self.programType = programType
        self.successFeeCurrency = successFeeCurrency
        self.logo = logo
        self.title = title
        self.entryFee = entryFee
        self.entryFeePercent = entryFeePercent
        self.successFee = successFee
        self.successFeePercent = successFeePercent
        self.level = level
        self.exitFee = exitFee
        self.exitFeePercent = exitFeePercent
        self.color = color
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(managerName, forKey: "managerName")
        try container.encodeIfPresent(programType, forKey: "programType")
        try container.encodeIfPresent(successFeeCurrency, forKey: "successFeeCurrency")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(entryFee, forKey: "entryFee")
        try container.encodeIfPresent(entryFeePercent, forKey: "entryFeePercent")
        try container.encodeIfPresent(successFee, forKey: "successFee")
        try container.encodeIfPresent(successFeePercent, forKey: "successFeePercent")
        try container.encodeIfPresent(level, forKey: "level")
        try container.encodeIfPresent(exitFee, forKey: "exitFee")
        try container.encodeIfPresent(exitFeePercent, forKey: "exitFeePercent")
        try container.encodeIfPresent(color, forKey: "color")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        managerName = try container.decodeIfPresent(String.self, forKey: "managerName")
        programType = try container.decodeIfPresent(ProgramType.self, forKey: "programType")
        successFeeCurrency = try container.decodeIfPresent(SuccessFeeCurrency.self, forKey: "successFeeCurrency")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        entryFee = try container.decodeIfPresent(Double.self, forKey: "entryFee")
        entryFeePercent = try container.decodeIfPresent(Double.self, forKey: "entryFeePercent")
        successFee = try container.decodeIfPresent(Double.self, forKey: "successFee")
        successFeePercent = try container.decodeIfPresent(Double.self, forKey: "successFeePercent")
        level = try container.decodeIfPresent(Int.self, forKey: "level")
        exitFee = try container.decodeIfPresent(Double.self, forKey: "exitFee")
        exitFeePercent = try container.decodeIfPresent(Double.self, forKey: "exitFeePercent")
        color = try container.decodeIfPresent(String.self, forKey: "color")
    }
}

