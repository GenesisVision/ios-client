//
// ProgramPeriodViewModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ProgramPeriodViewModel: Codable {

    public enum Status: String, Codable { 
        case planned = "Planned"
        case inProccess = "InProccess"
        case closed = "Closed"
    }
    public var dateFrom: Date?
    public var dateTo: Date?
    public var status: Status?
    public var number: Int?
    public var profit: Double?
    public var balance: Double?
    public var investors: Int?
    public var managerStatistic: FinancialStatistic?


    
    public init(dateFrom: Date?, dateTo: Date?, status: Status?, number: Int?, profit: Double?, balance: Double?, investors: Int?, managerStatistic: FinancialStatistic?) {
        self.dateFrom = dateFrom
        self.dateTo = dateTo
        self.status = status
        self.number = number
        self.profit = profit
        self.balance = balance
        self.investors = investors
        self.managerStatistic = managerStatistic
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(dateFrom, forKey: "dateFrom")
        try container.encodeIfPresent(dateTo, forKey: "dateTo")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(number, forKey: "number")
        try container.encodeIfPresent(profit, forKey: "profit")
        try container.encodeIfPresent(balance, forKey: "balance")
        try container.encodeIfPresent(investors, forKey: "investors")
        try container.encodeIfPresent(managerStatistic, forKey: "managerStatistic")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        dateFrom = try container.decodeIfPresent(Date.self, forKey: "dateFrom")
        dateTo = try container.decodeIfPresent(Date.self, forKey: "dateTo")
        status = try container.decodeIfPresent(Status.self, forKey: "status")
        number = try container.decodeIfPresent(Int.self, forKey: "number")
        profit = try container.decodeIfPresent(Double.self, forKey: "profit")
        balance = try container.decodeIfPresent(Double.self, forKey: "balance")
        investors = try container.decodeIfPresent(Int.self, forKey: "investors")
        managerStatistic = try container.decodeIfPresent(FinancialStatistic.self, forKey: "managerStatistic")
    }
}

