//
// PersonalFundDetails.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class PersonalFundDetails: Codable {

    public enum PendingInOutCurrency: String, Codable { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }
    public var isFavorite: Bool?
    public var isInvested: Bool?
    public var canInvest: Bool?
    public var canWithdraw: Bool?
    public var ownerActions: FundOwnerActions?
    public var hasNotifications: Bool?
    public var value: Double?
    public var status: AssetInvestmentStatus?
    public var pendingInput: Double?
    public var pendingOutput: Double?
    public var pendingInOutCurrency: PendingInOutCurrency?
    public var withdrawPercent: Double?
    public var availableReallocationPercents: Int?
    public var nextReallocationPercents: Date?
    public var exitFeePersonal: Double?


    
    public init(isFavorite: Bool?, isInvested: Bool?, canInvest: Bool?, canWithdraw: Bool?, ownerActions: FundOwnerActions?, hasNotifications: Bool?, value: Double?, status: AssetInvestmentStatus?, pendingInput: Double?, pendingOutput: Double?, pendingInOutCurrency: PendingInOutCurrency?, withdrawPercent: Double?, availableReallocationPercents: Int?, nextReallocationPercents: Date?, exitFeePersonal: Double?) {
        self.isFavorite = isFavorite
        self.isInvested = isInvested
        self.canInvest = canInvest
        self.canWithdraw = canWithdraw
        self.ownerActions = ownerActions
        self.hasNotifications = hasNotifications
        self.value = value
        self.status = status
        self.pendingInput = pendingInput
        self.pendingOutput = pendingOutput
        self.pendingInOutCurrency = pendingInOutCurrency
        self.withdrawPercent = withdrawPercent
        self.availableReallocationPercents = availableReallocationPercents
        self.nextReallocationPercents = nextReallocationPercents
        self.exitFeePersonal = exitFeePersonal
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(isFavorite, forKey: "isFavorite")
        try container.encodeIfPresent(isInvested, forKey: "isInvested")
        try container.encodeIfPresent(canInvest, forKey: "canInvest")
        try container.encodeIfPresent(canWithdraw, forKey: "canWithdraw")
        try container.encodeIfPresent(ownerActions, forKey: "ownerActions")
        try container.encodeIfPresent(hasNotifications, forKey: "hasNotifications")
        try container.encodeIfPresent(value, forKey: "value")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(pendingInput, forKey: "pendingInput")
        try container.encodeIfPresent(pendingOutput, forKey: "pendingOutput")
        try container.encodeIfPresent(pendingInOutCurrency, forKey: "pendingInOutCurrency")
        try container.encodeIfPresent(withdrawPercent, forKey: "withdrawPercent")
        try container.encodeIfPresent(availableReallocationPercents, forKey: "availableReallocationPercents")
        try container.encodeIfPresent(nextReallocationPercents, forKey: "nextReallocationPercents")
        try container.encodeIfPresent(exitFeePersonal, forKey: "exitFeePersonal")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        isFavorite = try container.decodeIfPresent(Bool.self, forKey: "isFavorite")
        isInvested = try container.decodeIfPresent(Bool.self, forKey: "isInvested")
        canInvest = try container.decodeIfPresent(Bool.self, forKey: "canInvest")
        canWithdraw = try container.decodeIfPresent(Bool.self, forKey: "canWithdraw")
        ownerActions = try container.decodeIfPresent(FundOwnerActions.self, forKey: "ownerActions")
        hasNotifications = try container.decodeIfPresent(Bool.self, forKey: "hasNotifications")
        value = try container.decodeIfPresent(Double.self, forKey: "value")
        status = try container.decodeIfPresent(AssetInvestmentStatus.self, forKey: "status")
        pendingInput = try container.decodeIfPresent(Double.self, forKey: "pendingInput")
        pendingOutput = try container.decodeIfPresent(Double.self, forKey: "pendingOutput")
        pendingInOutCurrency = try container.decodeIfPresent(PendingInOutCurrency.self, forKey: "pendingInOutCurrency")
        withdrawPercent = try container.decodeIfPresent(Double.self, forKey: "withdrawPercent")
        availableReallocationPercents = try container.decodeIfPresent(Int.self, forKey: "availableReallocationPercents")
        nextReallocationPercents = try container.decodeIfPresent(Date.self, forKey: "nextReallocationPercents")
        exitFeePersonal = try container.decodeIfPresent(Double.self, forKey: "exitFeePersonal")
    }
}

