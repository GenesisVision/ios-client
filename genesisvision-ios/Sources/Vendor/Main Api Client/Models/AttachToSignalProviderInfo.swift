//
// AttachToSignalProviderInfo.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class AttachToSignalProviderInfo: Codable {

    public enum MinDepositCurrency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }
    public var hasSignalAccount: Bool?
    public var hasActiveSubscription: Bool?
    public var volumeFee: Double?
    public var minDeposit: Double?
    public var minDepositCurrency: MinDepositCurrency?


    
    public init(hasSignalAccount: Bool?, hasActiveSubscription: Bool?, volumeFee: Double?, minDeposit: Double?, minDepositCurrency: MinDepositCurrency?) {
        self.hasSignalAccount = hasSignalAccount
        self.hasActiveSubscription = hasActiveSubscription
        self.volumeFee = volumeFee
        self.minDeposit = minDeposit
        self.minDepositCurrency = minDepositCurrency
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(hasSignalAccount, forKey: "hasSignalAccount")
        try container.encodeIfPresent(hasActiveSubscription, forKey: "hasActiveSubscription")
        try container.encodeIfPresent(volumeFee, forKey: "volumeFee")
        try container.encodeIfPresent(minDeposit, forKey: "minDeposit")
        try container.encodeIfPresent(minDepositCurrency, forKey: "minDepositCurrency")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        hasSignalAccount = try container.decodeIfPresent(Bool.self, forKey: "hasSignalAccount")
        hasActiveSubscription = try container.decodeIfPresent(Bool.self, forKey: "hasActiveSubscription")
        volumeFee = try container.decodeIfPresent(Double.self, forKey: "volumeFee")
        minDeposit = try container.decodeIfPresent(Double.self, forKey: "minDeposit")
        minDepositCurrency = try container.decodeIfPresent(MinDepositCurrency.self, forKey: "minDepositCurrency")
    }
}

