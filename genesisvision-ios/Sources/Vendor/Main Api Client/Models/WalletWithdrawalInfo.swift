//
// WalletWithdrawalInfo.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class WalletWithdrawalInfo: Codable {

    public enum Currency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }
    public var currency: Currency?
    public var description: String?
    public var logo: String?
    public var commission: Double?
    public var rateToGvt: Double?
    public var availableToWithdrawal: Double?


    
    public init(currency: Currency?, description: String?, logo: String?, commission: Double?, rateToGvt: Double?, availableToWithdrawal: Double?) {
        self.currency = currency
        self.description = description
        self.logo = logo
        self.commission = commission
        self.rateToGvt = rateToGvt
        self.availableToWithdrawal = availableToWithdrawal
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(commission, forKey: "commission")
        try container.encodeIfPresent(rateToGvt, forKey: "rateToGvt")
        try container.encodeIfPresent(availableToWithdrawal, forKey: "availableToWithdrawal")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        currency = try container.decodeIfPresent(Currency.self, forKey: "currency")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        commission = try container.decodeIfPresent(Double.self, forKey: "commission")
        rateToGvt = try container.decodeIfPresent(Double.self, forKey: "rateToGvt")
        availableToWithdrawal = try container.decodeIfPresent(Double.self, forKey: "availableToWithdrawal")
    }
}

