//
// PrivateTradingAccountFull.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class PrivateTradingAccountFull: Codable {

    public var id: UUID?
    public var publicInfo: PrivateTradingAccountFullPublicDetails?
    public var tradingAccountInfo: PrivateTradingAccountFullTradingAccountDetails?
    public var brokerDetails: BrokerDetails?
    public var ownerActions: PrivateTradingAccountOwnerActions?


    
    public init(id: UUID?, publicInfo: PrivateTradingAccountFullPublicDetails?, tradingAccountInfo: PrivateTradingAccountFullTradingAccountDetails?, brokerDetails: BrokerDetails?, ownerActions: PrivateTradingAccountOwnerActions?) {
        self.id = id
        self.publicInfo = publicInfo
        self.tradingAccountInfo = tradingAccountInfo
        self.brokerDetails = brokerDetails
        self.ownerActions = ownerActions
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(publicInfo, forKey: "publicInfo")
        try container.encodeIfPresent(tradingAccountInfo, forKey: "tradingAccountInfo")
        try container.encodeIfPresent(brokerDetails, forKey: "brokerDetails")
        try container.encodeIfPresent(ownerActions, forKey: "ownerActions")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        publicInfo = try container.decodeIfPresent(PrivateTradingAccountFullPublicDetails.self, forKey: "publicInfo")
        tradingAccountInfo = try container.decodeIfPresent(PrivateTradingAccountFullTradingAccountDetails.self, forKey: "tradingAccountInfo")
        brokerDetails = try container.decodeIfPresent(BrokerDetails.self, forKey: "brokerDetails")
        ownerActions = try container.decodeIfPresent(PrivateTradingAccountOwnerActions.self, forKey: "ownerActions")
    }
}

