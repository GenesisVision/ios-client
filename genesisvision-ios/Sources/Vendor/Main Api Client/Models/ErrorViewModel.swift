//
// ErrorViewModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ErrorViewModel: Codable {

    public enum Code: String, Codable { 
        case internalServerError = "InternalServerError"
        case validationError = "ValidationError"
        case requiresTwoFactor = "RequiresTwoFactor"
        case wrongCaptcha = "WrongCaptcha"
    }
    public var errors: [ErrorMessage]?
    public var code: Code?


    
    public init(errors: [ErrorMessage]?, code: Code?) {
        self.errors = errors
        self.code = code
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(errors, forKey: "errors")
        try container.encodeIfPresent(code, forKey: "code")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        errors = try container.decodeIfPresent([ErrorMessage].self, forKey: "errors")
        code = try container.decodeIfPresent(Code.self, forKey: "code")
    }
}

