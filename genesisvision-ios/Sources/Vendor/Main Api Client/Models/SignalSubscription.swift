//
// SignalSubscription.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SignalSubscription: Codable {

    public enum Mode: String, Codable { 
        case byBalance = "ByBalance"
        case percent = "Percent"
        case fixed = "Fixed"
    }
    public enum FixedCurrency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }
    public var hasSignalAccount: Bool?
    public var hasActiveSubscription: Bool?
    public var mode: Mode?
    public var percent: Double?
    public var openTolerancePercent: Double?
    public var fixedVolume: Double?
    public var fixedCurrency: FixedCurrency?


    
    public init(hasSignalAccount: Bool?, hasActiveSubscription: Bool?, mode: Mode?, percent: Double?, openTolerancePercent: Double?, fixedVolume: Double?, fixedCurrency: FixedCurrency?) {
        self.hasSignalAccount = hasSignalAccount
        self.hasActiveSubscription = hasActiveSubscription
        self.mode = mode
        self.percent = percent
        self.openTolerancePercent = openTolerancePercent
        self.fixedVolume = fixedVolume
        self.fixedCurrency = fixedCurrency
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(hasSignalAccount, forKey: "hasSignalAccount")
        try container.encodeIfPresent(hasActiveSubscription, forKey: "hasActiveSubscription")
        try container.encodeIfPresent(mode, forKey: "mode")
        try container.encodeIfPresent(percent, forKey: "percent")
        try container.encodeIfPresent(openTolerancePercent, forKey: "openTolerancePercent")
        try container.encodeIfPresent(fixedVolume, forKey: "fixedVolume")
        try container.encodeIfPresent(fixedCurrency, forKey: "fixedCurrency")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        hasSignalAccount = try container.decodeIfPresent(Bool.self, forKey: "hasSignalAccount")
        hasActiveSubscription = try container.decodeIfPresent(Bool.self, forKey: "hasActiveSubscription")
        mode = try container.decodeIfPresent(Mode.self, forKey: "mode")
        percent = try container.decodeIfPresent(Double.self, forKey: "percent")
        openTolerancePercent = try container.decodeIfPresent(Double.self, forKey: "openTolerancePercent")
        fixedVolume = try container.decodeIfPresent(Double.self, forKey: "fixedVolume")
        fixedCurrency = try container.decodeIfPresent(FixedCurrency.self, forKey: "fixedCurrency")
    }
}

