//
// ProgramFilters.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ProgramFilters: Codable {

    public var programTags: [ProgramTag]?
    public var actionType: [String]?
    public var customNotificationType: [String]?
    public var managerNotificationType: AssetEvent?
    public var investorNotificationType: AssetEvent?


    
    public init(programTags: [ProgramTag]?, actionType: [String]?, customNotificationType: [String]?, managerNotificationType: AssetEvent?, investorNotificationType: AssetEvent?) {
        self.programTags = programTags
        self.actionType = actionType
        self.customNotificationType = customNotificationType
        self.managerNotificationType = managerNotificationType
        self.investorNotificationType = investorNotificationType
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(programTags, forKey: "programTags")
        try container.encodeIfPresent(actionType, forKey: "actionType")
        try container.encodeIfPresent(customNotificationType, forKey: "customNotificationType")
        try container.encodeIfPresent(managerNotificationType, forKey: "managerNotificationType")
        try container.encodeIfPresent(investorNotificationType, forKey: "investorNotificationType")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        programTags = try container.decodeIfPresent([ProgramTag].self, forKey: "programTags")
        actionType = try container.decodeIfPresent([String].self, forKey: "actionType")
        customNotificationType = try container.decodeIfPresent([String].self, forKey: "customNotificationType")
        managerNotificationType = try container.decodeIfPresent(AssetEvent.self, forKey: "managerNotificationType")
        investorNotificationType = try container.decodeIfPresent(AssetEvent.self, forKey: "investorNotificationType")
    }
}

