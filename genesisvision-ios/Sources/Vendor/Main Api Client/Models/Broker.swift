//
// Broker.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Broker: Codable {

    public var name: String?
    public var description: String?
    public var logo: String?
    public var terms: String?
    public var assets: String?
    public var fee: Double?
    public var leverageMin: Int?
    public var leverageMax: Int?
    public var isKycRequired: Bool?
    public var accountTypes: [BrokerAccountType]?
    public var tags: [Tag]?


    
    public init(name: String?, description: String?, logo: String?, terms: String?, assets: String?, fee: Double?, leverageMin: Int?, leverageMax: Int?, isKycRequired: Bool?, accountTypes: [BrokerAccountType]?, tags: [Tag]?) {
        self.name = name
        self.description = description
        self.logo = logo
        self.terms = terms
        self.assets = assets
        self.fee = fee
        self.leverageMin = leverageMin
        self.leverageMax = leverageMax
        self.isKycRequired = isKycRequired
        self.accountTypes = accountTypes
        self.tags = tags
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(terms, forKey: "terms")
        try container.encodeIfPresent(assets, forKey: "assets")
        try container.encodeIfPresent(fee, forKey: "fee")
        try container.encodeIfPresent(leverageMin, forKey: "leverageMin")
        try container.encodeIfPresent(leverageMax, forKey: "leverageMax")
        try container.encodeIfPresent(isKycRequired, forKey: "isKycRequired")
        try container.encodeIfPresent(accountTypes, forKey: "accountTypes")
        try container.encodeIfPresent(tags, forKey: "tags")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        name = try container.decodeIfPresent(String.self, forKey: "name")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        terms = try container.decodeIfPresent(String.self, forKey: "terms")
        assets = try container.decodeIfPresent(String.self, forKey: "assets")
        fee = try container.decodeIfPresent(Double.self, forKey: "fee")
        leverageMin = try container.decodeIfPresent(Int.self, forKey: "leverageMin")
        leverageMax = try container.decodeIfPresent(Int.self, forKey: "leverageMax")
        isKycRequired = try container.decodeIfPresent(Bool.self, forKey: "isKycRequired")
        accountTypes = try container.decodeIfPresent([BrokerAccountType].self, forKey: "accountTypes")
        tags = try container.decodeIfPresent([Tag].self, forKey: "tags")
    }
}

