//
// ConvertingDetails.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ConvertingDetails: Codable {

    public enum CurrencyTo: String, Codable { 
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }
    public var currencyTo: CurrencyTo?
    public var currencyToName: String?
    public var amountTo: Double?
    public var rateValue: Double?
    public var currencyToLogo: String?


    
    public init(currencyTo: CurrencyTo?, currencyToName: String?, amountTo: Double?, rateValue: Double?, currencyToLogo: String?) {
        self.currencyTo = currencyTo
        self.currencyToName = currencyToName
        self.amountTo = amountTo
        self.rateValue = rateValue
        self.currencyToLogo = currencyToLogo
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(currencyTo, forKey: "currencyTo")
        try container.encodeIfPresent(currencyToName, forKey: "currencyToName")
        try container.encodeIfPresent(amountTo, forKey: "amountTo")
        try container.encodeIfPresent(rateValue, forKey: "rateValue")
        try container.encodeIfPresent(currencyToLogo, forKey: "currencyToLogo")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        currencyTo = try container.decodeIfPresent(CurrencyTo.self, forKey: "currencyTo")
        currencyToName = try container.decodeIfPresent(String.self, forKey: "currencyToName")
        amountTo = try container.decodeIfPresent(Double.self, forKey: "amountTo")
        rateValue = try container.decodeIfPresent(Double.self, forKey: "rateValue")
        currencyToLogo = try container.decodeIfPresent(String.self, forKey: "currencyToLogo")
    }
}

