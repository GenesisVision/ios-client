//
// ProgramBalanceChart.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ProgramBalanceChart: Codable {

    public enum ProgramCurrency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }
    public var gvtBalance: Double?
    public var programCurrencyBalance: Double?
    public var programCurrency: ProgramCurrency?
    public var balanceChart: [ProgramBalanceChartElement]?


    
    public init(gvtBalance: Double?, programCurrencyBalance: Double?, programCurrency: ProgramCurrency?, balanceChart: [ProgramBalanceChartElement]?) {
        self.gvtBalance = gvtBalance
        self.programCurrencyBalance = programCurrencyBalance
        self.programCurrency = programCurrency
        self.balanceChart = balanceChart
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(gvtBalance, forKey: "gvtBalance")
        try container.encodeIfPresent(programCurrencyBalance, forKey: "programCurrencyBalance")
        try container.encodeIfPresent(programCurrency, forKey: "programCurrency")
        try container.encodeIfPresent(balanceChart, forKey: "balanceChart")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        gvtBalance = try container.decodeIfPresent(Double.self, forKey: "gvtBalance")
        programCurrencyBalance = try container.decodeIfPresent(Double.self, forKey: "programCurrencyBalance")
        programCurrency = try container.decodeIfPresent(ProgramCurrency.self, forKey: "programCurrency")
        balanceChart = try container.decodeIfPresent([ProgramBalanceChartElement].self, forKey: "balanceChart")
    }
}

