//
// ProgramInvestingDetailsList.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ProgramInvestingDetailsList: Codable {

    public var id: UUID?
    public var logo: String?
    public var url: String?
    public var color: String?
    public var title: String?
    public var creationDate: Date?
    public var currency: Currency?
    public var availableToInvest: Double?
    public var level: Int?
    public var levelProgress: Double?
    public var periodDuration: Int?
    public var investorsCount: Int?
    public var periodStarts: Date?
    public var periodEnds: Date?
    public var owner: ProfilePublicShort?
    public var brokerDetails: BrokerDetails?
    public var personalDetails: PersonalInvestingProgramDetailsList?
    public var tags: [Tag]?
    public var statistic: ProfitChart?
    public var balance: AmountWithCurrency?


    
    public init(id: UUID?, logo: String?, url: String?, color: String?, title: String?, creationDate: Date?, currency: Currency?, availableToInvest: Double?, level: Int?, levelProgress: Double?, periodDuration: Int?, investorsCount: Int?, periodStarts: Date?, periodEnds: Date?, owner: ProfilePublicShort?, brokerDetails: BrokerDetails?, personalDetails: PersonalInvestingProgramDetailsList?, tags: [Tag]?, statistic: ProfitChart?, balance: AmountWithCurrency?) {
        self.id = id
        self.logo = logo
        self.url = url
        self.color = color
        self.title = title
        self.creationDate = creationDate
        self.currency = currency
        self.availableToInvest = availableToInvest
        self.level = level
        self.levelProgress = levelProgress
        self.periodDuration = periodDuration
        self.investorsCount = investorsCount
        self.periodStarts = periodStarts
        self.periodEnds = periodEnds
        self.owner = owner
        self.brokerDetails = brokerDetails
        self.personalDetails = personalDetails
        self.tags = tags
        self.statistic = statistic
        self.balance = balance
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(color, forKey: "color")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(creationDate, forKey: "creationDate")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(availableToInvest, forKey: "availableToInvest")
        try container.encodeIfPresent(level, forKey: "level")
        try container.encodeIfPresent(levelProgress, forKey: "levelProgress")
        try container.encodeIfPresent(periodDuration, forKey: "periodDuration")
        try container.encodeIfPresent(investorsCount, forKey: "investorsCount")
        try container.encodeIfPresent(periodStarts, forKey: "periodStarts")
        try container.encodeIfPresent(periodEnds, forKey: "periodEnds")
        try container.encodeIfPresent(owner, forKey: "owner")
        try container.encodeIfPresent(brokerDetails, forKey: "brokerDetails")
        try container.encodeIfPresent(personalDetails, forKey: "personalDetails")
        try container.encodeIfPresent(tags, forKey: "tags")
        try container.encodeIfPresent(statistic, forKey: "statistic")
        try container.encodeIfPresent(balance, forKey: "balance")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        url = try container.decodeIfPresent(String.self, forKey: "url")
        color = try container.decodeIfPresent(String.self, forKey: "color")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        creationDate = try container.decodeIfPresent(Date.self, forKey: "creationDate")
        currency = try container.decodeIfPresent(Currency.self, forKey: "currency")
        availableToInvest = try container.decodeIfPresent(Double.self, forKey: "availableToInvest")
        level = try container.decodeIfPresent(Int.self, forKey: "level")
        levelProgress = try container.decodeIfPresent(Double.self, forKey: "levelProgress")
        periodDuration = try container.decodeIfPresent(Int.self, forKey: "periodDuration")
        investorsCount = try container.decodeIfPresent(Int.self, forKey: "investorsCount")
        periodStarts = try container.decodeIfPresent(Date.self, forKey: "periodStarts")
        periodEnds = try container.decodeIfPresent(Date.self, forKey: "periodEnds")
        owner = try container.decodeIfPresent(ProfilePublicShort.self, forKey: "owner")
        brokerDetails = try container.decodeIfPresent(BrokerDetails.self, forKey: "brokerDetails")
        personalDetails = try container.decodeIfPresent(PersonalInvestingProgramDetailsList.self, forKey: "personalDetails")
        tags = try container.decodeIfPresent([Tag].self, forKey: "tags")
        statistic = try container.decodeIfPresent(ProfitChart.self, forKey: "statistic")
        balance = try container.decodeIfPresent(AmountWithCurrency.self, forKey: "balance")
    }
}

