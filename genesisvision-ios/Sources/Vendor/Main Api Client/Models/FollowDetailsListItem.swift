//
// FollowDetailsListItem.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class FollowDetailsListItem: Codable {

    public enum Currency: String, Codable { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }
    public var id: UUID?
    public var title: String?
    public var description: String?
    public var logo: String?
    public var creationDate: Date?
    public var currency: Currency?
    public var subscribersCount: Int?
    public var tradesCount: Int?
    public var status: String?
    public var url: String?
    public var color: String?
    public var isExternal: Bool?
    public var leverageMin: Int?
    public var leverageMax: Int?
    public var brokerId: UUID?
    public var brokerType: BrokerTradeServerType?
    public var owner: ProfilePublicShort?
    public var statistic: ProfitChart?
    public var personalDetails: PersonalFollowDetailsList?
    public var tags: [Tag]?


    
    public init(id: UUID?, title: String?, description: String?, logo: String?, creationDate: Date?, currency: Currency?, subscribersCount: Int?, tradesCount: Int?, status: String?, url: String?, color: String?, isExternal: Bool?, leverageMin: Int?, leverageMax: Int?, brokerId: UUID?, brokerType: BrokerTradeServerType?, owner: ProfilePublicShort?, statistic: ProfitChart?, personalDetails: PersonalFollowDetailsList?, tags: [Tag]?) {
        self.id = id
        self.title = title
        self.description = description
        self.logo = logo
        self.creationDate = creationDate
        self.currency = currency
        self.subscribersCount = subscribersCount
        self.tradesCount = tradesCount
        self.status = status
        self.url = url
        self.color = color
        self.isExternal = isExternal
        self.leverageMin = leverageMin
        self.leverageMax = leverageMax
        self.brokerId = brokerId
        self.brokerType = brokerType
        self.owner = owner
        self.statistic = statistic
        self.personalDetails = personalDetails
        self.tags = tags
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(creationDate, forKey: "creationDate")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(subscribersCount, forKey: "subscribersCount")
        try container.encodeIfPresent(tradesCount, forKey: "tradesCount")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(color, forKey: "color")
        try container.encodeIfPresent(isExternal, forKey: "isExternal")
        try container.encodeIfPresent(leverageMin, forKey: "leverageMin")
        try container.encodeIfPresent(leverageMax, forKey: "leverageMax")
        try container.encodeIfPresent(brokerId, forKey: "brokerId")
        try container.encodeIfPresent(brokerType, forKey: "brokerType")
        try container.encodeIfPresent(owner, forKey: "owner")
        try container.encodeIfPresent(statistic, forKey: "statistic")
        try container.encodeIfPresent(personalDetails, forKey: "personalDetails")
        try container.encodeIfPresent(tags, forKey: "tags")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        creationDate = try container.decodeIfPresent(Date.self, forKey: "creationDate")
        currency = try container.decodeIfPresent(Currency.self, forKey: "currency")
        subscribersCount = try container.decodeIfPresent(Int.self, forKey: "subscribersCount")
        tradesCount = try container.decodeIfPresent(Int.self, forKey: "tradesCount")
        status = try container.decodeIfPresent(String.self, forKey: "status")
        url = try container.decodeIfPresent(String.self, forKey: "url")
        color = try container.decodeIfPresent(String.self, forKey: "color")
        isExternal = try container.decodeIfPresent(Bool.self, forKey: "isExternal")
        leverageMin = try container.decodeIfPresent(Int.self, forKey: "leverageMin")
        leverageMax = try container.decodeIfPresent(Int.self, forKey: "leverageMax")
        brokerId = try container.decodeIfPresent(UUID.self, forKey: "brokerId")
        brokerType = try container.decodeIfPresent(BrokerTradeServerType.self, forKey: "brokerType")
        owner = try container.decodeIfPresent(ProfilePublicShort.self, forKey: "owner")
        statistic = try container.decodeIfPresent(ProfitChart.self, forKey: "statistic")
        personalDetails = try container.decodeIfPresent(PersonalFollowDetailsList.self, forKey: "personalDetails")
        tags = try container.decodeIfPresent([Tag].self, forKey: "tags")
    }
}

