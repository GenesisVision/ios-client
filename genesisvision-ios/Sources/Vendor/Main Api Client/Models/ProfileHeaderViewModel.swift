//
// ProfileHeaderViewModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ProfileHeaderViewModel: Codable {

    public var id: UUID?
    public var name: String?
    public var email: String?
    public var url: String?
    public var avatar: String?
    public var countryCode: String?
    public var notificationsCount: Int?
    public var isKycConfirmed: Bool?
    public var isForexAllowed: Bool?
    public var isTwoFactorEnabled: Bool?
    public var isNewUser: Bool?
    public var isPublicInvestor: Bool?
    public var isUserNameFilled: Bool?


    
    public init(id: UUID?, name: String?, email: String?, url: String?, avatar: String?, countryCode: String?, notificationsCount: Int?, isKycConfirmed: Bool?, isForexAllowed: Bool?, isTwoFactorEnabled: Bool?, isNewUser: Bool?, isPublicInvestor: Bool?, isUserNameFilled: Bool?) {
        self.id = id
        self.name = name
        self.email = email
        self.url = url
        self.avatar = avatar
        self.countryCode = countryCode
        self.notificationsCount = notificationsCount
        self.isKycConfirmed = isKycConfirmed
        self.isForexAllowed = isForexAllowed
        self.isTwoFactorEnabled = isTwoFactorEnabled
        self.isNewUser = isNewUser
        self.isPublicInvestor = isPublicInvestor
        self.isUserNameFilled = isUserNameFilled
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(avatar, forKey: "avatar")
        try container.encodeIfPresent(countryCode, forKey: "countryCode")
        try container.encodeIfPresent(notificationsCount, forKey: "notificationsCount")
        try container.encodeIfPresent(isKycConfirmed, forKey: "isKycConfirmed")
        try container.encodeIfPresent(isForexAllowed, forKey: "isForexAllowed")
        try container.encodeIfPresent(isTwoFactorEnabled, forKey: "isTwoFactorEnabled")
        try container.encodeIfPresent(isNewUser, forKey: "isNewUser")
        try container.encodeIfPresent(isPublicInvestor, forKey: "isPublicInvestor")
        try container.encodeIfPresent(isUserNameFilled, forKey: "isUserNameFilled")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        email = try container.decodeIfPresent(String.self, forKey: "email")
        url = try container.decodeIfPresent(String.self, forKey: "url")
        avatar = try container.decodeIfPresent(String.self, forKey: "avatar")
        countryCode = try container.decodeIfPresent(String.self, forKey: "countryCode")
        notificationsCount = try container.decodeIfPresent(Int.self, forKey: "notificationsCount")
        isKycConfirmed = try container.decodeIfPresent(Bool.self, forKey: "isKycConfirmed")
        isForexAllowed = try container.decodeIfPresent(Bool.self, forKey: "isForexAllowed")
        isTwoFactorEnabled = try container.decodeIfPresent(Bool.self, forKey: "isTwoFactorEnabled")
        isNewUser = try container.decodeIfPresent(Bool.self, forKey: "isNewUser")
        isPublicInvestor = try container.decodeIfPresent(Bool.self, forKey: "isPublicInvestor")
        isUserNameFilled = try container.decodeIfPresent(Bool.self, forKey: "isUserNameFilled")
    }
}

