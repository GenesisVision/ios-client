//
// FundInvestingDetailsList.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class FundInvestingDetailsList: Codable {

    public var id: UUID?
    public var logo: String?
    public var url: String?
    public var color: String?
    public var title: String?
    public var description: String?
    public var creationDate: Date?
    public var investorsCount: Int?
    public var totalAssetsCount: Int?
    public var topFundAssets: [FundAssetPercent]?
    public var owner: ProfilePublicShort?
    public var statistic: ProfitChart?
    public var personalDetails: PersonalInvestingFundDetailsList?
    public var balance: AmountWithCurrency?


    
    public init(id: UUID?, logo: String?, url: String?, color: String?, title: String?, description: String?, creationDate: Date?, investorsCount: Int?, totalAssetsCount: Int?, topFundAssets: [FundAssetPercent]?, owner: ProfilePublicShort?, statistic: ProfitChart?, personalDetails: PersonalInvestingFundDetailsList?, balance: AmountWithCurrency?) {
        self.id = id
        self.logo = logo
        self.url = url
        self.color = color
        self.title = title
        self.description = description
        self.creationDate = creationDate
        self.investorsCount = investorsCount
        self.totalAssetsCount = totalAssetsCount
        self.topFundAssets = topFundAssets
        self.owner = owner
        self.statistic = statistic
        self.personalDetails = personalDetails
        self.balance = balance
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(color, forKey: "color")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(creationDate, forKey: "creationDate")
        try container.encodeIfPresent(investorsCount, forKey: "investorsCount")
        try container.encodeIfPresent(totalAssetsCount, forKey: "totalAssetsCount")
        try container.encodeIfPresent(topFundAssets, forKey: "topFundAssets")
        try container.encodeIfPresent(owner, forKey: "owner")
        try container.encodeIfPresent(statistic, forKey: "statistic")
        try container.encodeIfPresent(personalDetails, forKey: "personalDetails")
        try container.encodeIfPresent(balance, forKey: "balance")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        url = try container.decodeIfPresent(String.self, forKey: "url")
        color = try container.decodeIfPresent(String.self, forKey: "color")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        creationDate = try container.decodeIfPresent(Date.self, forKey: "creationDate")
        investorsCount = try container.decodeIfPresent(Int.self, forKey: "investorsCount")
        totalAssetsCount = try container.decodeIfPresent(Int.self, forKey: "totalAssetsCount")
        topFundAssets = try container.decodeIfPresent([FundAssetPercent].self, forKey: "topFundAssets")
        owner = try container.decodeIfPresent(ProfilePublicShort.self, forKey: "owner")
        statistic = try container.decodeIfPresent(ProfitChart.self, forKey: "statistic")
        personalDetails = try container.decodeIfPresent(PersonalInvestingFundDetailsList.self, forKey: "personalDetails")
        balance = try container.decodeIfPresent(AmountWithCurrency.self, forKey: "balance")
    }
}

