//
// MakeTradingAccountProgram.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class MakeTradingAccountProgram: Codable {

    public var id: UUID?
    public var periodLength: Int?
    public var stopOutLevel: Double?
    public var investmentLimit: Double?
    public var tradesDelay: TradesDelay?
    public var entryFee: Double?
    public var successFee: Double?
    public var title: String?
    public var description: String?
    public var logo: String?


    
    public init(id: UUID?, periodLength: Int?, stopOutLevel: Double?, investmentLimit: Double?, tradesDelay: TradesDelay?, entryFee: Double?, successFee: Double?, title: String?, description: String?, logo: String?) {
        self.id = id
        self.periodLength = periodLength
        self.stopOutLevel = stopOutLevel
        self.investmentLimit = investmentLimit
        self.tradesDelay = tradesDelay
        self.entryFee = entryFee
        self.successFee = successFee
        self.title = title
        self.description = description
        self.logo = logo
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(periodLength, forKey: "periodLength")
        try container.encodeIfPresent(stopOutLevel, forKey: "stopOutLevel")
        try container.encodeIfPresent(investmentLimit, forKey: "investmentLimit")
        try container.encodeIfPresent(tradesDelay, forKey: "tradesDelay")
        try container.encodeIfPresent(entryFee, forKey: "entryFee")
        try container.encodeIfPresent(successFee, forKey: "successFee")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(logo, forKey: "logo")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        periodLength = try container.decodeIfPresent(Int.self, forKey: "periodLength")
        stopOutLevel = try container.decodeIfPresent(Double.self, forKey: "stopOutLevel")
        investmentLimit = try container.decodeIfPresent(Double.self, forKey: "investmentLimit")
        tradesDelay = try container.decodeIfPresent(TradesDelay.self, forKey: "tradesDelay")
        entryFee = try container.decodeIfPresent(Double.self, forKey: "entryFee")
        successFee = try container.decodeIfPresent(Double.self, forKey: "successFee")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
    }
}

