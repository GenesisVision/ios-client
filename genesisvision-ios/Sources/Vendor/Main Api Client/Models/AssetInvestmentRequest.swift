//
// AssetInvestmentRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class AssetInvestmentRequest: Codable {

    public var id: UUID?
    public var date: Date?
    public var amount: Double?
    public var currency: Currency?
    public var type: InvestmentRequestType?
    public var status: InvestmentRequestStatus?
    public var canCancelRequest: Bool?
    public var assetDetails: AssetRequestDetails?


    
    public init(id: UUID?, date: Date?, amount: Double?, currency: Currency?, type: InvestmentRequestType?, status: InvestmentRequestStatus?, canCancelRequest: Bool?, assetDetails: AssetRequestDetails?) {
        self.id = id
        self.date = date
        self.amount = amount
        self.currency = currency
        self.type = type
        self.status = status
        self.canCancelRequest = canCancelRequest
        self.assetDetails = assetDetails
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(date, forKey: "date")
        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(canCancelRequest, forKey: "canCancelRequest")
        try container.encodeIfPresent(assetDetails, forKey: "assetDetails")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        date = try container.decodeIfPresent(Date.self, forKey: "date")
        amount = try container.decodeIfPresent(Double.self, forKey: "amount")
        currency = try container.decodeIfPresent(Currency.self, forKey: "currency")
        type = try container.decodeIfPresent(InvestmentRequestType.self, forKey: "type")
        status = try container.decodeIfPresent(InvestmentRequestStatus.self, forKey: "status")
        canCancelRequest = try container.decodeIfPresent(Bool.self, forKey: "canCancelRequest")
        assetDetails = try container.decodeIfPresent(AssetRequestDetails.self, forKey: "assetDetails")
    }
}

