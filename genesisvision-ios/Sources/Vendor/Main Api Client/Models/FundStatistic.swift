//
// FundStatistic.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class FundStatistic: Codable {

    public var balanceGVT: AmountWithCurrency?
    public var balanceSecondary: AmountWithCurrency?
    public var balance: AmountWithCurrency?
    public var profitPercent: Double?
    public var drawdownPercent: Double?
    public var investorsCount: Int?
    public var startDate: Date?
    public var startBalance: Double?
    public var investedAmount: Double?
    public var rebalancingCount: Int?


    
    public init(balanceGVT: AmountWithCurrency?, balanceSecondary: AmountWithCurrency?, balance: AmountWithCurrency?, profitPercent: Double?, drawdownPercent: Double?, investorsCount: Int?, startDate: Date?, startBalance: Double?, investedAmount: Double?, rebalancingCount: Int?) {
        self.balanceGVT = balanceGVT
        self.balanceSecondary = balanceSecondary
        self.balance = balance
        self.profitPercent = profitPercent
        self.drawdownPercent = drawdownPercent
        self.investorsCount = investorsCount
        self.startDate = startDate
        self.startBalance = startBalance
        self.investedAmount = investedAmount
        self.rebalancingCount = rebalancingCount
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(balanceGVT, forKey: "balanceGVT")
        try container.encodeIfPresent(balanceSecondary, forKey: "balanceSecondary")
        try container.encodeIfPresent(balance, forKey: "balance")
        try container.encodeIfPresent(profitPercent, forKey: "profitPercent")
        try container.encodeIfPresent(drawdownPercent, forKey: "drawdownPercent")
        try container.encodeIfPresent(investorsCount, forKey: "investorsCount")
        try container.encodeIfPresent(startDate, forKey: "startDate")
        try container.encodeIfPresent(startBalance, forKey: "startBalance")
        try container.encodeIfPresent(investedAmount, forKey: "investedAmount")
        try container.encodeIfPresent(rebalancingCount, forKey: "rebalancingCount")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        balanceGVT = try container.decodeIfPresent(AmountWithCurrency.self, forKey: "balanceGVT")
        balanceSecondary = try container.decodeIfPresent(AmountWithCurrency.self, forKey: "balanceSecondary")
        balance = try container.decodeIfPresent(AmountWithCurrency.self, forKey: "balance")
        profitPercent = try container.decodeIfPresent(Double.self, forKey: "profitPercent")
        drawdownPercent = try container.decodeIfPresent(Double.self, forKey: "drawdownPercent")
        investorsCount = try container.decodeIfPresent(Int.self, forKey: "investorsCount")
        startDate = try container.decodeIfPresent(Date.self, forKey: "startDate")
        startBalance = try container.decodeIfPresent(Double.self, forKey: "startBalance")
        investedAmount = try container.decodeIfPresent(Double.self, forKey: "investedAmount")
        rebalancingCount = try container.decodeIfPresent(Int.self, forKey: "rebalancingCount")
    }
}

