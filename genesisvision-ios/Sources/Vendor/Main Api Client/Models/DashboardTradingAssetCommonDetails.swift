//
// DashboardTradingAssetCommonDetails.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class DashboardTradingAssetCommonDetails: Codable {

    public enum Currency: String, Codable { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }
    public var title: String?
    public var status: DashboardTradingAssetStatus?
    public var creationDate: Date?
    public var balance: Double?
    public var login: String?
    public var currency: Currency?
    public var leverage: Int?
    public var type: PrivateTradingAccountType?


    
    public init(title: String?, status: DashboardTradingAssetStatus?, creationDate: Date?, balance: Double?, login: String?, currency: Currency?, leverage: Int?, type: PrivateTradingAccountType?) {
        self.title = title
        self.status = status
        self.creationDate = creationDate
        self.balance = balance
        self.login = login
        self.currency = currency
        self.leverage = leverage
        self.type = type
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(creationDate, forKey: "creationDate")
        try container.encodeIfPresent(balance, forKey: "balance")
        try container.encodeIfPresent(login, forKey: "login")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(leverage, forKey: "leverage")
        try container.encodeIfPresent(type, forKey: "type")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        title = try container.decodeIfPresent(String.self, forKey: "title")
        status = try container.decodeIfPresent(DashboardTradingAssetStatus.self, forKey: "status")
        creationDate = try container.decodeIfPresent(Date.self, forKey: "creationDate")
        balance = try container.decodeIfPresent(Double.self, forKey: "balance")
        login = try container.decodeIfPresent(String.self, forKey: "login")
        currency = try container.decodeIfPresent(Currency.self, forKey: "currency")
        leverage = try container.decodeIfPresent(Int.self, forKey: "leverage")
        type = try container.decodeIfPresent(PrivateTradingAccountType.self, forKey: "type")
    }
}

