//
// RegisterManagerViewModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class RegisterManagerViewModel: Codable {

    public var userName: String
    public var password: String
    public var confirmPassword: String?
    public var refCode: String?
    public var isAuto: Bool?
    public var email: String
    public var captchaCheckResult: CaptchaCheckResult?


    
    public init(userName: String, password: String, confirmPassword: String?, refCode: String?, isAuto: Bool?, email: String, captchaCheckResult: CaptchaCheckResult?) {
        self.userName = userName
        self.password = password
        self.confirmPassword = confirmPassword
        self.refCode = refCode
        self.isAuto = isAuto
        self.email = email
        self.captchaCheckResult = captchaCheckResult
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(userName, forKey: "userName")
        try container.encode(password, forKey: "password")
        try container.encodeIfPresent(confirmPassword, forKey: "confirmPassword")
        try container.encodeIfPresent(refCode, forKey: "refCode")
        try container.encodeIfPresent(isAuto, forKey: "isAuto")
        try container.encode(email, forKey: "email")
        try container.encodeIfPresent(captchaCheckResult, forKey: "captchaCheckResult")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        userName = try container.decode(String.self, forKey: "userName")
        password = try container.decode(String.self, forKey: "password")
        confirmPassword = try container.decodeIfPresent(String.self, forKey: "confirmPassword")
        refCode = try container.decodeIfPresent(String.self, forKey: "refCode")
        isAuto = try container.decodeIfPresent(Bool.self, forKey: "isAuto")
        email = try container.decode(String.self, forKey: "email")
        captchaCheckResult = try container.decodeIfPresent(CaptchaCheckResult.self, forKey: "captchaCheckResult")
    }
}

