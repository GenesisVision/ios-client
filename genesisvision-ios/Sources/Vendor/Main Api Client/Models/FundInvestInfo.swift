//
// FundInvestInfo.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class FundInvestInfo: Codable {

    public var title: String?
    public var availableInWallet: Double?
    public var minInvestmentAmount: Double?
    public var programCurrencyMinInvestment: Double?
    public var entryFee: Double?
    public var gvCommission: Double?
    public var rate: Double?
    public var isOwnProgram: Bool?


    
    public init(title: String?, availableInWallet: Double?, minInvestmentAmount: Double?, programCurrencyMinInvestment: Double?, entryFee: Double?, gvCommission: Double?, rate: Double?, isOwnProgram: Bool?) {
        self.title = title
        self.availableInWallet = availableInWallet
        self.minInvestmentAmount = minInvestmentAmount
        self.programCurrencyMinInvestment = programCurrencyMinInvestment
        self.entryFee = entryFee
        self.gvCommission = gvCommission
        self.rate = rate
        self.isOwnProgram = isOwnProgram
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(availableInWallet, forKey: "availableInWallet")
        try container.encodeIfPresent(minInvestmentAmount, forKey: "minInvestmentAmount")
        try container.encodeIfPresent(programCurrencyMinInvestment, forKey: "programCurrencyMinInvestment")
        try container.encodeIfPresent(entryFee, forKey: "entryFee")
        try container.encodeIfPresent(gvCommission, forKey: "gvCommission")
        try container.encodeIfPresent(rate, forKey: "rate")
        try container.encodeIfPresent(isOwnProgram, forKey: "isOwnProgram")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        title = try container.decodeIfPresent(String.self, forKey: "title")
        availableInWallet = try container.decodeIfPresent(Double.self, forKey: "availableInWallet")
        minInvestmentAmount = try container.decodeIfPresent(Double.self, forKey: "minInvestmentAmount")
        programCurrencyMinInvestment = try container.decodeIfPresent(Double.self, forKey: "programCurrencyMinInvestment")
        entryFee = try container.decodeIfPresent(Double.self, forKey: "entryFee")
        gvCommission = try container.decodeIfPresent(Double.self, forKey: "gvCommission")
        rate = try container.decodeIfPresent(Double.self, forKey: "rate")
        isOwnProgram = try container.decodeIfPresent(Bool.self, forKey: "isOwnProgram")
    }
}

