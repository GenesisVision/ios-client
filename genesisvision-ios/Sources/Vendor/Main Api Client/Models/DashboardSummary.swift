//
// DashboardSummary.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class DashboardSummary: Codable {

    public var chart: DashboardChartValue?
    public var events: DashboardPortfolioEvents?
    public var profileHeader: ProfileHeaderViewModel?
    public var programsCount: Int?
    public var fundsCount: Int?
    public var signalsCount: Int?
    public var requests: ProgramRequests?


    
    public init(chart: DashboardChartValue?, events: DashboardPortfolioEvents?, profileHeader: ProfileHeaderViewModel?, programsCount: Int?, fundsCount: Int?, signalsCount: Int?, requests: ProgramRequests?) {
        self.chart = chart
        self.events = events
        self.profileHeader = profileHeader
        self.programsCount = programsCount
        self.fundsCount = fundsCount
        self.signalsCount = signalsCount
        self.requests = requests
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(chart, forKey: "chart")
        try container.encodeIfPresent(events, forKey: "events")
        try container.encodeIfPresent(profileHeader, forKey: "profileHeader")
        try container.encodeIfPresent(programsCount, forKey: "programsCount")
        try container.encodeIfPresent(fundsCount, forKey: "fundsCount")
        try container.encodeIfPresent(signalsCount, forKey: "signalsCount")
        try container.encodeIfPresent(requests, forKey: "requests")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        chart = try container.decodeIfPresent(DashboardChartValue.self, forKey: "chart")
        events = try container.decodeIfPresent(DashboardPortfolioEvents.self, forKey: "events")
        profileHeader = try container.decodeIfPresent(ProfileHeaderViewModel.self, forKey: "profileHeader")
        programsCount = try container.decodeIfPresent(Int.self, forKey: "programsCount")
        fundsCount = try container.decodeIfPresent(Int.self, forKey: "fundsCount")
        signalsCount = try container.decodeIfPresent(Int.self, forKey: "signalsCount")
        requests = try container.decodeIfPresent(ProgramRequests.self, forKey: "requests")
    }
}

