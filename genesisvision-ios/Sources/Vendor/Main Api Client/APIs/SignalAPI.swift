//
// SignalAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SignalAPI {
    /**
     Subscribe to external signal using common account
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func attachSlaveToMasterExternalCommonAccount(_id: UUID, body: AttachToExternalSignalProviderCommon? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        attachSlaveToMasterExternalCommonAccountWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Subscribe to external signal using common account
     - POST /v2.0/signal/external/attach/{id}/common
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func attachSlaveToMasterExternalCommonAccountWithRequestBuilder(_id: UUID, body: AttachToExternalSignalProviderCommon? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/signal/external/attach/{id}/common"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Subscribe to external signal account
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func attachSlaveToMasterExternalPrivateAccount(_id: UUID, body: AttachToExternalSignalProviderExt? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        attachSlaveToMasterExternalPrivateAccountWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Subscribe to external signal account
     - POST /v2.0/signal/external/attach/{id}/private
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func attachSlaveToMasterExternalPrivateAccountWithRequestBuilder(_id: UUID, body: AttachToExternalSignalProviderExt? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/signal/external/attach/{id}/private"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Subscribe to signal provider
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func attachSlaveToMasterInternal(_id: UUID, body: AttachToSignalProvider? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        attachSlaveToMasterInternalWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Subscribe to signal provider
     - POST /v2.0/signal/attach/{id}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func attachSlaveToMasterInternalWithRequestBuilder(_id: UUID, body: AttachToSignalProvider? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/signal/attach/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func detachSlaveFromMasterExternal(_id: UUID, body: DetachFromExternalSignalProvider? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        detachSlaveFromMasterExternalWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v2.0/signal/external/detach/{id}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func detachSlaveFromMasterExternalWithRequestBuilder(_id: UUID, body: DetachFromExternalSignalProvider? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/signal/external/detach/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Unsubscribe from signal provider
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func detachSlaveFromMasterInternal(_id: UUID, body: DetachFromSignalProvider? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        detachSlaveFromMasterInternalWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Unsubscribe from signal provider
     - POST /v2.0/signal/detach/{id}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func detachSlaveFromMasterInternalWithRequestBuilder(_id: UUID, body: DetachFromSignalProvider? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/signal/detach/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get investors signals trading log
     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSignalTradingLog(accountId: UUID? = nil, accountCurrency: Currency? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: SignalTradingEventItemsViewModel?,_ error: Error?) -> Void)) {
        getSignalTradingLogWithRequestBuilder(accountId: accountId, accountCurrency: accountCurrency, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get investors signals trading log
     - GET /v2.0/signal/trades/log
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "message" : "message"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "message" : "message"
  } ]
}}]
     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<SignalTradingEventItemsViewModel> 
     */
    open class func getSignalTradingLogWithRequestBuilder(accountId: UUID? = nil, accountCurrency: Currency? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<SignalTradingEventItemsViewModel> {
        let path = "/v2.0/signal/trades/log"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "AccountId": accountId, 
                        "AccountCurrency": accountCurrency, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<SignalTradingEventItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get subscriber accounts for subscribe to signal provider (common method for all signals)
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSubscriberAccountsForAsset(_id: UUID, completion: @escaping ((_ data: TradingAccountDetailsItemsViewModel?,_ error: Error?) -> Void)) {
        getSubscriberAccountsForAssetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get subscriber accounts for subscribe to signal provider (common method for all signals)
     - GET /v2.0/signal/attach/{id}/accounts
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "items" : [ {
    "apiKey" : "apiKey",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "login" : "login",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None"
    }
  }, {
    "apiKey" : "apiKey",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "login" : "login",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None"
    }
  } ]
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<TradingAccountDetailsItemsViewModel> 
     */
    open class func getSubscriberAccountsForAssetWithRequestBuilder(_id: UUID) -> RequestBuilder<TradingAccountDetailsItemsViewModel> {
        var path = "/v2.0/signal/attach/{id}/accounts"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TradingAccountDetailsItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update signal subscription settings
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateExternalSubscriptionSettings(_id: UUID, body: AttachToExternalSignalProviderExt? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateExternalSubscriptionSettingsWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update signal subscription settings
     - POST /v2.0/signal/external/{id}/update
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateExternalSubscriptionSettingsWithRequestBuilder(_id: UUID, body: AttachToExternalSignalProviderExt? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/signal/external/{id}/update"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update signal subscription settings
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSubscriptionSettings(_id: UUID, body: AttachToSignalProvider? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateSubscriptionSettingsWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update signal subscription settings
     - POST /v2.0/signal/{id}/update
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateSubscriptionSettingsWithRequestBuilder(_id: UUID, body: AttachToSignalProvider? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/signal/{id}/update"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
