//
// AssetsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AssetsAPI {
    /**
     Add trading account favorite symbol
     - parameter _id: (path)       - parameter symbol: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addFavoriteSymbol(_id: UUID, symbol: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addFavoriteSymbolWithRequestBuilder(_id: _id, symbol: symbol).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add trading account favorite symbol
     - POST /v2.0/assets/tradingaccounts/{id}/symbol/favorite/{symbol}/add
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter symbol: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func addFavoriteSymbolWithRequestBuilder(_id: UUID, symbol: String) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/tradingaccounts/{id}/symbol/favorite/{symbol}/add"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let symbolPreEscape = "\(symbol)"
        let symbolPostEscape = symbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol}", with: symbolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Cancel changing broker in existing program
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelChangeBroker(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        cancelChangeBrokerWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Cancel changing broker in existing program
     - POST /v2.0/assets/programs/{id}/broker/change/cancel
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func cancelChangeBrokerWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/programs/{id}/broker/change/cancel"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Change broker in existing program
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changeBroker(_id: UUID, body: ChangeBrokerProgramRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        changeBrokerWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Change broker in existing program
     - POST /v2.0/assets/programs/{id}/broker/change
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func changeBrokerWithRequestBuilder(_id: UUID, body: ChangeBrokerProgramRequest? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/programs/{id}/broker/change"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Change trading account password
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changeTradingAccountPassword(_id: UUID, body: TradingAccountPwdUpdate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        changeTradingAccountPasswordWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Change trading account password
     - POST /v2.0/assets/tradingaccounts/{id}/password/change
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func changeTradingAccountPasswordWithRequestBuilder(_id: UUID, body: TradingAccountPwdUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/tradingaccounts/{id}/password/change"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Close current period
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeCurrentPeriod(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        closeCurrentPeriodWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Close current period
     - POST /v2.0/assets/programs/{id}/period/close
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func closeCurrentPeriodWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/programs/{id}/period/close"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Close exchange account
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeExchangeAccount(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        closeExchangeAccountWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Close exchange account
     - POST /v2.0/assets/tradingaccounts/exchange/{id}/close
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func closeExchangeAccountWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/tradingaccounts/exchange/{id}/close"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Close existing fund
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeFund(_id: UUID, body: TwoFactorCodeModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        closeFundWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Close existing fund
     - POST /v2.0/assets/funds/{id}/close
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func closeFundWithRequestBuilder(_id: UUID, body: TwoFactorCodeModel? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/funds/{id}/close"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Close existing investment program
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeInvestmentProgram(_id: UUID, body: TwoFactorCodeModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        closeInvestmentProgramWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Close existing investment program
     - POST /v2.0/assets/programs/{id}/close
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func closeInvestmentProgramWithRequestBuilder(_id: UUID, body: TwoFactorCodeModel? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/programs/{id}/close"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Close trading account
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeTradingAccount(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        closeTradingAccountWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Close trading account
     - POST /v2.0/assets/tradingaccounts/{id}/close
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func closeTradingAccountWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/tradingaccounts/{id}/close"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Confirm 2FA for program if required (for brokers like Huobi)
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func confirmProgram2FA(_id: UUID, body: TwoFactorCodeModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        confirmProgram2FAWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Confirm 2FA for program if required (for brokers like Huobi)
     - POST /v2.0/assets/programs/{id}/2fa/confirm
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func confirmProgram2FAWithRequestBuilder(_id: UUID, body: TwoFactorCodeModel? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/programs/{id}/2fa/confirm"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create exchange account
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createExchangeAccount(body: NewExchangeAccountRequest? = nil, completion: @escaping ((_ data: TradingAccountCreateResult?,_ error: Error?) -> Void)) {
        createExchangeAccountWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create exchange account
     - POST /v2.0/assets/tradingaccounts/exchange/create
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "twoFactor" : {
    "sharedKey" : "sharedKey",
    "authenticatorUri" : "authenticatorUri"
  },
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "twoFactorRequired" : true,
  "startDeposit" : 0.8008281904610115
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TradingAccountCreateResult> 
     */
    open class func createExchangeAccountWithRequestBuilder(body: NewExchangeAccountRequest? = nil) -> RequestBuilder<TradingAccountCreateResult> {
        let path = "/v2.0/assets/tradingaccounts/exchange/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TradingAccountCreateResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create external trading account
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createExternalTradingAccount(body: NewExternalTradingAccountRequest? = nil, completion: @escaping ((_ data: TradingAccountCreateResult?,_ error: Error?) -> Void)) {
        createExternalTradingAccountWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create external trading account
     - POST /v2.0/assets/tradingaccounts/external/create
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "twoFactor" : {
    "sharedKey" : "sharedKey",
    "authenticatorUri" : "authenticatorUri"
  },
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "twoFactorRequired" : true,
  "startDeposit" : 0.8008281904610115
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TradingAccountCreateResult> 
     */
    open class func createExternalTradingAccountWithRequestBuilder(body: NewExternalTradingAccountRequest? = nil) -> RequestBuilder<TradingAccountCreateResult> {
        let path = "/v2.0/assets/tradingaccounts/external/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TradingAccountCreateResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create fund
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createFund(body: NewFundRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createFundWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create fund
     - POST /v2.0/assets/funds/create
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createFundWithRequestBuilder(body: NewFundRequest? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/assets/funds/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create trading account
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTradingAccount(body: NewTradingAccountRequest? = nil, completion: @escaping ((_ data: TradingAccountCreateResult?,_ error: Error?) -> Void)) {
        createTradingAccountWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create trading account
     - POST /v2.0/assets/tradingaccounts/create
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "twoFactor" : {
    "sharedKey" : "sharedKey",
    "authenticatorUri" : "authenticatorUri"
  },
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "twoFactorRequired" : true,
  "startDeposit" : 0.8008281904610115
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TradingAccountCreateResult> 
     */
    open class func createTradingAccountWithRequestBuilder(body: NewTradingAccountRequest? = nil) -> RequestBuilder<TradingAccountCreateResult> {
        let path = "/v2.0/assets/tradingaccounts/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TradingAccountCreateResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get trading account favorite symbols
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFavoriteSymbols(_id: UUID, completion: @escaping ((_ data: StringItemsViewModel?,_ error: Error?) -> Void)) {
        getFavoriteSymbolsWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get trading account favorite symbols
     - GET /v2.0/assets/tradingaccounts/{id}/symbol/favorite
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "items" : [ "items", "items" ]
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<StringItemsViewModel> 
     */
    open class func getFavoriteSymbolsWithRequestBuilder(_id: UUID) -> RequestBuilder<StringItemsViewModel> {
        var path = "/v2.0/assets/tradingaccounts/{id}/symbol/favorite"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<StringItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get program data for levels calculator
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLevelsCalculator(_id: UUID, completion: @escaping ((_ data: ProgramLevelInfo?,_ error: Error?) -> Void)) {
        getLevelsCalculatorWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get program data for levels calculator
     - GET /v2.0/assets/programs/{id}/levels/info
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "weightedVolumeScale" : 5.637376656633329,
  "isKycPassed" : true,
  "investmentScale" : 7.061401241503109,
  "level" : 0,
  "levelProgressPercent" : 6.027456183070403,
  "genesisRatio" : 1.4658129805029452,
  "programAge" : 5.962133916683182,
  "managerBalance" : 2.3021358869347655,
  "totalAvailableToInvest" : 9.301444243932576
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<ProgramLevelInfo> 
     */
    open class func getLevelsCalculatorWithRequestBuilder(_id: UUID) -> RequestBuilder<ProgramLevelInfo> {
        var path = "/v2.0/assets/programs/{id}/levels/info"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProgramLevelInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 2FA for program if needed
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProgram2FA(_id: UUID, completion: @escaping ((_ data: TwoFactorAuthenticator?,_ error: Error?) -> Void)) {
        getProgram2FAWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 2FA for program if needed
     - GET /v2.0/assets/programs/{id}/2fa/get
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "sharedKey" : "sharedKey",
  "authenticatorUri" : "authenticatorUri"
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<TwoFactorAuthenticator> 
     */
    open class func getProgram2FAWithRequestBuilder(_id: UUID) -> RequestBuilder<TwoFactorAuthenticator> {
        var path = "/v2.0/assets/programs/{id}/2fa/get"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TwoFactorAuthenticator>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create an investment program from trading account
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func makeAccountProgram(body: MakeTradingAccountProgram? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        makeAccountProgramWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create an investment program from trading account
     - POST /v2.0/assets/programs/fromaccount/create
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func makeAccountProgramWithRequestBuilder(body: MakeTradingAccountProgram? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/assets/programs/fromaccount/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Make account signal provider
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func makeAccountSignalProvider(body: MakeTradingAccountSignalProvider? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        makeAccountSignalProviderWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Make account signal provider
     - POST /v2.0/assets/signal/create
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func makeAccountSignalProviderWithRequestBuilder(body: MakeTradingAccountSignalProvider? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/assets/signal/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Make demo trading account deposit
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func makeDemoTradingAccountDeposit(_id: UUID, body: TradingAccountDemoDeposit? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        makeDemoTradingAccountDepositWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Make demo trading account deposit
     - POST /v2.0/assets/tradingaccounts/{id}/demo/deposit
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func makeDemoTradingAccountDepositWithRequestBuilder(_id: UUID, body: TradingAccountDemoDeposit? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/tradingaccounts/{id}/demo/deposit"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create an investment program from exchange account
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func makeExchangeAccountProgram(body: MakeExchangeAccountProgram? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        makeExchangeAccountProgramWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create an investment program from exchange account
     - POST /v2.0/assets/programs/fromexchangeaccount/create
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func makeExchangeAccountProgramWithRequestBuilder(body: MakeExchangeAccountProgram? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/assets/programs/fromexchangeaccount/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Make external trading account signal provider
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func makeExternalAccountSignalProvider(body: MakeTradingAccountSignalProvider? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        makeExternalAccountSignalProviderWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Make external trading account signal provider
     - POST /v2.0/assets/tradingaccounts/external/fromaccount/create
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func makeExternalAccountSignalProviderWithRequestBuilder(body: MakeTradingAccountSignalProvider? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/assets/tradingaccounts/external/fromaccount/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create an investment program
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func makeProgram(body: MakeProgram? = nil, completion: @escaping ((_ data: TradingAccountCreateResult?,_ error: Error?) -> Void)) {
        makeProgramWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create an investment program
     - POST /v2.0/assets/programs/create
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "twoFactor" : {
    "sharedKey" : "sharedKey",
    "authenticatorUri" : "authenticatorUri"
  },
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "twoFactorRequired" : true,
  "startDeposit" : 0.8008281904610115
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TradingAccountCreateResult> 
     */
    open class func makeProgramWithRequestBuilder(body: MakeProgram? = nil) -> RequestBuilder<TradingAccountCreateResult> {
        let path = "/v2.0/assets/programs/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TradingAccountCreateResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create an investment program
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func makeSignalProviderProgram(body: MakeSignalProviderProgram? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        makeSignalProviderProgramWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create an investment program
     - POST /v2.0/assets/programs/fromsignalprovider/create
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func makeSignalProviderProgramWithRequestBuilder(body: MakeSignalProviderProgram? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/assets/programs/fromsignalprovider/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove trading account favorite symbol
     - parameter _id: (path)       - parameter symbol: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeFavoriteSymbol(_id: UUID, symbol: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        removeFavoriteSymbolWithRequestBuilder(_id: _id, symbol: symbol).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove trading account favorite symbol
     - POST /v2.0/assets/tradingaccounts/{id}/symbol/favorite/{symbol}/remove
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter symbol: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func removeFavoriteSymbolWithRequestBuilder(_id: UUID, symbol: String) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/tradingaccounts/{id}/symbol/favorite/{symbol}/remove"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let symbolPreEscape = "\(symbol)"
        let symbolPostEscape = symbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol}", with: symbolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update investment program/fund details
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAsset(_id: UUID, body: ProgramUpdate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateAssetWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update investment program/fund details
     - POST /v2.0/assets/follow/{id}/update
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateAssetWithRequestBuilder(_id: UUID, body: ProgramUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/follow/{id}/update"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update investment program/fund details
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAsset_0(_id: UUID, body: ProgramUpdate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateAsset_0WithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update investment program/fund details
     - POST /v2.0/assets/funds/{id}/update
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateAsset_0WithRequestBuilder(_id: UUID, body: ProgramUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/funds/{id}/update"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update investment program/fund details
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAsset_1(_id: UUID, body: ProgramUpdate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateAsset_1WithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update investment program/fund details
     - POST /v2.0/assets/programs/{id}/update
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateAsset_1WithRequestBuilder(_id: UUID, body: ProgramUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/programs/{id}/update"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update fund assets parts
     - parameter _id: (path)       - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateFundAssets(_id: UUID, body: [FundAssetPart]? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateFundAssetsWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update fund assets parts
     - POST /v2.0/assets/funds/{id}/assets/update
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateFundAssetsWithRequestBuilder(_id: UUID, body: [FundAssetPart]? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/funds/{id}/assets/update"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Edit account signal settings
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSignalProviderSettings(body: CreateSignalProvider? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateSignalProviderSettingsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Edit account signal settings
     - POST /v2.0/assets/signal/edit
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateSignalProviderSettingsWithRequestBuilder(body: CreateSignalProvider? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/assets/signal/edit"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
