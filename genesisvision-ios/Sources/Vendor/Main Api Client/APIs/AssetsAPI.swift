//
// AssetsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AssetsAPI {
    /**
     Cancel changing broker in existing program
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelChangeBroker(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        cancelChangeBrokerWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Cancel changing broker in existing program
     - POST /v2.0/assets/programs/{id}/broker/change/cancel
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func cancelChangeBrokerWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/programs/{id}/broker/change/cancel"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Change broker in existing program
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changeBroker(id: UUID, authorization: String, request: ChangeBrokerProgramRequest? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        changeBrokerWithRequestBuilder(id: id, authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Change broker in existing program
     - POST /v2.0/assets/programs/{id}/broker/change
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func changeBrokerWithRequestBuilder(id: UUID, authorization: String, request: ChangeBrokerProgramRequest? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/programs/{id}/broker/change"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Change trading account password
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changeTradingAccountPassword(id: UUID, authorization: String, model: TradingAccountPwdUpdate? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        changeTradingAccountPasswordWithRequestBuilder(id: id, authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Change trading account password
     - POST /v2.0/assets/tradingaccounts/{id}/password/change
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func changeTradingAccountPasswordWithRequestBuilder(id: UUID, authorization: String, model: TradingAccountPwdUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/tradingaccounts/{id}/password/change"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Close current period
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeCurrentPeriod(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        closeCurrentPeriodWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Close current period
     - POST /v2.0/assets/programs/{id}/period/close
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func closeCurrentPeriodWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/programs/{id}/period/close"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Close existing fund
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeFund(id: UUID, authorization: String, model: TwoFactorCodeModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        closeFundWithRequestBuilder(id: id, authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Close existing fund
     - POST /v2.0/assets/funds/{id}/close
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func closeFundWithRequestBuilder(id: UUID, authorization: String, model: TwoFactorCodeModel? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/funds/{id}/close"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Close existing investment program
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeInvestmentProgram(id: UUID, authorization: String, model: TwoFactorCodeModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        closeInvestmentProgramWithRequestBuilder(id: id, authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Close existing investment program
     - POST /v2.0/assets/programs/{id}/close
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func closeInvestmentProgramWithRequestBuilder(id: UUID, authorization: String, model: TwoFactorCodeModel? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/programs/{id}/close"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Close trading account
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeTradingAccount(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        closeTradingAccountWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Close trading account
     - POST /v2.0/assets/tradingaccounts/{id}/close
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func closeTradingAccountWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/tradingaccounts/{id}/close"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Confirm 2FA for program if required (for brokers like Huobi)
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func confirmProgram2FA(id: UUID, authorization: String, model: TwoFactorCodeModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        confirmProgram2FAWithRequestBuilder(id: id, authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Confirm 2FA for program if required (for brokers like Huobi)
     - POST /v2.0/assets/programs/{id}/2fa/confirm
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func confirmProgram2FAWithRequestBuilder(id: UUID, authorization: String, model: TwoFactorCodeModel? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/programs/{id}/2fa/confirm"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create external trading account
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createExternalTradingAccount(authorization: String, request: NewExternalTradingAccountRequest? = nil, completion: @escaping ((_ data: TradingAccountCreateResult?,_ error: Error?) -> Void)) {
        createExternalTradingAccountWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create external trading account
     - POST /v2.0/assets/tradingaccounts/external/create
     - examples: [{contentType=application/json, example={
  "twoFactor" : {
    "sharedKey" : "sharedKey",
    "authenticatorUri" : "authenticatorUri"
  },
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "twoFactorRequired" : true
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<TradingAccountCreateResult> 
     */
    open class func createExternalTradingAccountWithRequestBuilder(authorization: String, request: NewExternalTradingAccountRequest? = nil) -> RequestBuilder<TradingAccountCreateResult> {
        let path = "/v2.0/assets/tradingaccounts/external/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TradingAccountCreateResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create fund
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createFund(authorization: String, request: NewFundRequest? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        createFundWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Create fund
     - POST /v2.0/assets/funds/create
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createFundWithRequestBuilder(authorization: String, request: NewFundRequest? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/assets/funds/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create trading account
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTradingAccount(authorization: String, request: NewTradingAccountRequest? = nil, completion: @escaping ((_ data: TradingAccountCreateResult?,_ error: Error?) -> Void)) {
        createTradingAccountWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create trading account
     - POST /v2.0/assets/tradingaccounts/create
     - examples: [{contentType=application/json, example={
  "twoFactor" : {
    "sharedKey" : "sharedKey",
    "authenticatorUri" : "authenticatorUri"
  },
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "twoFactorRequired" : true
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<TradingAccountCreateResult> 
     */
    open class func createTradingAccountWithRequestBuilder(authorization: String, request: NewTradingAccountRequest? = nil) -> RequestBuilder<TradingAccountCreateResult> {
        let path = "/v2.0/assets/tradingaccounts/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TradingAccountCreateResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Get program data for levels calculator
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLevelsCalculator(id: UUID, authorization: String, completion: @escaping ((_ data: ProgramLevelInfo?,_ error: Error?) -> Void)) {
        getLevelsCalculatorWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get program data for levels calculator
     - GET /v2.0/assets/programs/{id}/levels/info
     - examples: [{contentType=application/json, example={
  "weightedVolumeScale" : 5.637376656633329,
  "isKycPassed" : true,
  "investmentScale" : 7.061401241503109,
  "level" : 0,
  "levelProgressPercent" : 6.027456183070403,
  "genesisRatio" : 1.4658129805029452,
  "programAge" : 5.962133916683182,
  "managerBalance" : 2.3021358869347655,
  "totalAvailableToInvest" : 9.301444243932576
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProgramLevelInfo> 
     */
    open class func getLevelsCalculatorWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<ProgramLevelInfo> {
        var path = "/v2.0/assets/programs/{id}/levels/info"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramLevelInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get 2FA for program if needed
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProgram2FA(id: UUID, authorization: String, completion: @escaping ((_ data: TwoFactorAuthenticator?,_ error: Error?) -> Void)) {
        getProgram2FAWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get 2FA for program if needed
     - GET /v2.0/assets/programs/{id}/2fa/get
     - examples: [{contentType=application/json, example={
  "sharedKey" : "sharedKey",
  "authenticatorUri" : "authenticatorUri"
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<TwoFactorAuthenticator> 
     */
    open class func getProgram2FAWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<TwoFactorAuthenticator> {
        var path = "/v2.0/assets/programs/{id}/2fa/get"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TwoFactorAuthenticator>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Create an investment program
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func makeAccountProgram(authorization: String, request: MakeTradingAccountProgram? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        makeAccountProgramWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Create an investment program
     - POST /v2.0/assets/programs/fromaccount/create
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func makeAccountProgramWithRequestBuilder(authorization: String, request: MakeTradingAccountProgram? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/assets/programs/fromaccount/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Make account signal provider
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func makeAccountSignalProvider(authorization: String, request: MakeTradingAccountSignalProvider? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        makeAccountSignalProviderWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Make account signal provider
     - POST /v2.0/assets/signal/create
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func makeAccountSignalProviderWithRequestBuilder(authorization: String, request: MakeTradingAccountSignalProvider? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/assets/signal/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Make external trading account signal provider
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func makeExternalAccountSignalProvider(authorization: String, request: MakeTradingAccountSignalProvider? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        makeExternalAccountSignalProviderWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Make external trading account signal provider
     - POST /v2.0/assets/tradingaccounts/external/fromaccount/create
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func makeExternalAccountSignalProviderWithRequestBuilder(authorization: String, request: MakeTradingAccountSignalProvider? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/assets/tradingaccounts/external/fromaccount/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create an investment program
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func makeSignalProviderProgram(authorization: String, request: MakeSignalProviderProgram? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        makeSignalProviderProgramWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Create an investment program
     - POST /v2.0/assets/programs/fromsignalprovider/create
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func makeSignalProviderProgramWithRequestBuilder(authorization: String, request: MakeSignalProviderProgram? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/assets/programs/fromsignalprovider/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update investment program/fund details
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAsset(id: UUID, authorization: String, model: ProgramUpdate? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateAssetWithRequestBuilder(id: id, authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update investment program/fund details
     - POST /v2.0/assets/follow/{id}/update
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateAssetWithRequestBuilder(id: UUID, authorization: String, model: ProgramUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/follow/{id}/update"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update investment program/fund details
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAsset_0(id: UUID, authorization: String, model: ProgramUpdate? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateAsset_0WithRequestBuilder(id: id, authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update investment program/fund details
     - POST /v2.0/assets/funds/{id}/update
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateAsset_0WithRequestBuilder(id: UUID, authorization: String, model: ProgramUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/funds/{id}/update"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update investment program/fund details
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAsset_1(id: UUID, authorization: String, model: ProgramUpdate? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateAsset_1WithRequestBuilder(id: id, authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update investment program/fund details
     - POST /v2.0/assets/programs/{id}/update
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateAsset_1WithRequestBuilder(id: UUID, authorization: String, model: ProgramUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/programs/{id}/update"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update fund assets parts
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter assets: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateFundAssets(id: UUID, authorization: String, assets: [FundAssetPart]? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateFundAssetsWithRequestBuilder(id: id, authorization: authorization, assets: assets).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update fund assets parts
     - POST /v2.0/assets/funds/{id}/assets/update
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter assets: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateFundAssetsWithRequestBuilder(id: UUID, authorization: String, assets: [FundAssetPart]? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/assets/funds/{id}/assets/update"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assets)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Edit account signal settings
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSignalProviderSettings(authorization: String, request: CreateSignalProvider? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        updateSignalProviderSettingsWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Edit account signal settings
     - POST /v2.0/assets/signal/edit
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateSignalProviderSettingsWithRequestBuilder(authorization: String, request: CreateSignalProvider? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/assets/signal/edit"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
