//
// DashboardAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DashboardAPI {
    /**
     - parameter assets: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter skipStatistic: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChart(assets: [UUID]? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: Currency? = nil, skipStatistic: Bool? = nil, completion: @escaping ((_ data: DashboardChart?,_ error: Error?) -> Void)) {
        getChartWithRequestBuilder(assets: assets, dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, showIn: showIn, skipStatistic: skipStatistic).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/dashboard/chart
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "charts" : [ {
    "color" : "color",
    "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  }, {
    "color" : "color",
    "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  } ]
}}]
     - parameter assets: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter skipStatistic: (query)  (optional)

     - returns: RequestBuilder<DashboardChart> 
     */
    open class func getChartWithRequestBuilder(assets: [UUID]? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: Currency? = nil, skipStatistic: Bool? = nil) -> RequestBuilder<DashboardChart> {
        let path = "/v2.0/dashboard/chart"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "Assets": assets, 
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
                        "ShowIn": showIn, 
                        "SkipStatistic": skipStatistic
        ])

        let requestBuilder: RequestBuilder<DashboardChart>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Active assets for chart

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChartAssets(completion: @escaping ((_ data: DashboardChartAssets?,_ error: Error?) -> Void)) {
        getChartAssetsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Active assets for chart
     - GET /v2.0/dashboard/chart/assets
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "assets" : [ {
    "programDetails" : {
      "level" : 0,
      "levelProgress" : 6.027456183070403
    },
    "color" : "color",
    "isPrivateAccount" : true,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "logoUrl" : "logoUrl",
    "url" : "url",
    "assetType" : "None"
  }, {
    "programDetails" : {
      "level" : 0,
      "levelProgress" : 6.027456183070403
    },
    "color" : "color",
    "isPrivateAccount" : true,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "logoUrl" : "logoUrl",
    "url" : "url",
    "assetType" : "None"
  } ]
}}]

     - returns: RequestBuilder<DashboardChartAssets> 
     */
    open class func getChartAssetsWithRequestBuilder() -> RequestBuilder<DashboardChartAssets> {
        let path = "/v2.0/dashboard/chart/assets"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DashboardChartAssets>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDashboardSummary(currency: Currency? = nil, completion: @escaping ((_ data: DashboardSummary?,_ error: Error?) -> Void)) {
        getDashboardSummaryWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/dashboard/summary
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "trading" : 6.027456183070403,
  "limitWithoutKyc" : {
    "limit" : 5.637376656633329,
    "currency" : "Undefined",
    "invested" : 2.3021358869347655
  },
  "profits" : {
    "day" : {
      "profitPercent" : 5.637376656633329,
      "profit" : 5.962133916683182
    }
  },
  "total" : 5.962133916683182,
  "wallets" : 1.4658129805029452,
  "invested" : 0.8008281904610115
}}]
     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<DashboardSummary> 
     */
    open class func getDashboardSummaryWithRequestBuilder(currency: Currency? = nil) -> RequestBuilder<DashboardSummary> {
        let path = "/v2.0/dashboard/summary"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "currency": currency
        ])

        let requestBuilder: RequestBuilder<DashboardSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter brokerId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExchangeAccountsCredentials(brokerId: UUID? = nil, completion: @escaping ((_ data: ExchangeAssetItemsViewModel?,_ error: Error?) -> Void)) {
        getExchangeAccountsCredentialsWithRequestBuilder(brokerId: brokerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/dashboard/trading/exchange/credentials/all
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 6,
  "items" : [ {
    "balance" : 0.8008281904610115,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None"
    }
  }, {
    "balance" : 0.8008281904610115,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None"
    }
  } ]
}}]
     - parameter brokerId: (query)  (optional)

     - returns: RequestBuilder<ExchangeAssetItemsViewModel> 
     */
    open class func getExchangeAccountsCredentialsWithRequestBuilder(brokerId: UUID? = nil) -> RequestBuilder<ExchangeAssetItemsViewModel> {
        let path = "/v2.0/dashboard/trading/exchange/credentials/all"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "brokerId": brokerId
        ])

        let requestBuilder: RequestBuilder<ExchangeAssetItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter topAssetsCount: (query)  (optional, default to 4)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHoldings(topAssetsCount: Int? = nil, completion: @escaping ((_ data: DashboardAssets?,_ error: Error?) -> Void)) {
        getHoldingsWithRequestBuilder(topAssetsCount: topAssetsCount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/dashboard/holdings
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "assets" : [ {
    "color" : "color",
    "name" : "name",
    "percent" : 0.8008281904610115
  }, {
    "color" : "color",
    "name" : "name",
    "percent" : 0.8008281904610115
  } ]
}}]
     - parameter topAssetsCount: (query)  (optional, default to 4)

     - returns: RequestBuilder<DashboardAssets> 
     */
    open class func getHoldingsWithRequestBuilder(topAssetsCount: Int? = nil) -> RequestBuilder<DashboardAssets> {
        let path = "/v2.0/dashboard/holdings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "topAssetsCount": topAssetsCount?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DashboardAssets>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter currency: (query)  (optional)     - parameter eventsTake: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInvestingDetails(currency: Currency? = nil, eventsTake: Int? = nil, completion: @escaping ((_ data: DashboardInvestingDetails?,_ error: Error?) -> Void)) {
        getInvestingDetailsWithRequestBuilder(currency: currency, eventsTake: eventsTake).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/dashboard/investing
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "profits" : {
    "day" : {
      "profitPercent" : 5.637376656633329,
      "profit" : 5.962133916683182
    }
  },
  "programsCount" : 6,
  "fundsCount" : 1,
  "equity" : 0.8008281904610115,
  "events" : {
    "total" : 2,
    "items" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "color" : "color",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "assetType" : "None"
      },
      "amount" : 2.3021358869347655,
      "feesInfo" : [ {
        "amount" : 9.301444243932576,
        "description" : "description",
        "title" : "title",
        "type" : "Undefined"
      }, {
        "amount" : 9.301444243932576,
        "description" : "description",
        "title" : "title",
        "type" : "Undefined"
      } ],
      "changeState" : "NotChanged",
      "extendedInfo" : [ {
        "amount" : 7.061401241503109,
        "title" : "title"
      }, {
        "amount" : 7.061401241503109,
        "title" : "title"
      } ],
      "currency" : "Undefined",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "totalFeesAmount" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "color" : "color",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "assetType" : "None"
      },
      "amount" : 2.3021358869347655,
      "feesInfo" : [ {
        "amount" : 9.301444243932576,
        "description" : "description",
        "title" : "title",
        "type" : "Undefined"
      }, {
        "amount" : 9.301444243932576,
        "description" : "description",
        "title" : "title",
        "type" : "Undefined"
      } ],
      "changeState" : "NotChanged",
      "extendedInfo" : [ {
        "amount" : 7.061401241503109,
        "title" : "title"
      }, {
        "amount" : 7.061401241503109,
        "title" : "title"
      } ],
      "currency" : "Undefined",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "totalFeesAmount" : 3.616076749251911
    } ]
  }
}}]
     - parameter currency: (query)  (optional)     - parameter eventsTake: (query)  (optional)

     - returns: RequestBuilder<DashboardInvestingDetails> 
     */
    open class func getInvestingDetailsWithRequestBuilder(currency: Currency? = nil, eventsTake: Int? = nil) -> RequestBuilder<DashboardInvestingDetails> {
        let path = "/v2.0/dashboard/investing"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "currency": currency, 
                        "eventsTake": eventsTake?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DashboardInvestingDetails>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter sorting: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter status: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter facetId: (query)  (optional)     - parameter mask: (query)  (optional)     - parameter ownerId: (query)  (optional)     - parameter showFavorites: (query)  (optional)     - parameter skipStatistic: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInvestingFunds(sorting: FundsFilterSorting? = nil, showIn: Currency? = nil, status: DashboardAssetStatus? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skipStatistic: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: FundInvestingDetailsListItemsViewModel?,_ error: Error?) -> Void)) {
        getInvestingFundsWithRequestBuilder(sorting: sorting, showIn: showIn, status: status, dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, facetId: facetId, mask: mask, ownerId: ownerId, showFavorites: showFavorites, skipStatistic: skipStatistic, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/dashboard/investing/funds
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "items" : [ {
    "owner" : {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    },
    "totalAssetsCount" : 2,
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "color" : "color",
    "entryFeeCurrent" : 6.027456183070403,
    "exitFeeSelected" : 5.637376656633329,
    "tradingSchedule" : {
      "hourEnd" : 2,
      "dayStart" : "Sunday",
      "minuteEnd" : 4,
      "hourStart" : 9,
      "hasTradingSchedule" : true,
      "minuteStart" : 3
    },
    "exitFeeCurrent" : 5.962133916683182,
    "topFundAssets" : [ {
      "name" : "name",
      "asset" : "asset",
      "percent" : 7.061401241503109,
      "logoUrl" : "logoUrl",
      "url" : "url"
    }, {
      "name" : "name",
      "asset" : "asset",
      "percent" : 7.061401241503109,
      "logoUrl" : "logoUrl",
      "url" : "url"
    } ],
    "description" : "description",
    "entryFeeSelected" : 1.4658129805029452,
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "logoUrl" : "logoUrl",
    "url" : "url",
    "balance" : {
      "amount" : 7.457744773683766,
      "currency" : "Undefined"
    },
    "personalDetails" : {
      "exitFeePersonal" : 6.84685269835264,
      "canWithdraw" : true,
      "canInvest" : true,
      "isOwnAsset" : true,
      "share" : 1.0246457001441578,
      "value" : 1.4894159098541704,
      "isFavorite" : true,
      "status" : "Pending"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investorsCount" : 0
  }, {
    "owner" : {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    },
    "totalAssetsCount" : 2,
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "color" : "color",
    "entryFeeCurrent" : 6.027456183070403,
    "exitFeeSelected" : 5.637376656633329,
    "tradingSchedule" : {
      "hourEnd" : 2,
      "dayStart" : "Sunday",
      "minuteEnd" : 4,
      "hourStart" : 9,
      "hasTradingSchedule" : true,
      "minuteStart" : 3
    },
    "exitFeeCurrent" : 5.962133916683182,
    "topFundAssets" : [ {
      "name" : "name",
      "asset" : "asset",
      "percent" : 7.061401241503109,
      "logoUrl" : "logoUrl",
      "url" : "url"
    }, {
      "name" : "name",
      "asset" : "asset",
      "percent" : 7.061401241503109,
      "logoUrl" : "logoUrl",
      "url" : "url"
    } ],
    "description" : "description",
    "entryFeeSelected" : 1.4658129805029452,
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "logoUrl" : "logoUrl",
    "url" : "url",
    "balance" : {
      "amount" : 7.457744773683766,
      "currency" : "Undefined"
    },
    "personalDetails" : {
      "exitFeePersonal" : 6.84685269835264,
      "canWithdraw" : true,
      "canInvest" : true,
      "isOwnAsset" : true,
      "share" : 1.0246457001441578,
      "value" : 1.4894159098541704,
      "isFavorite" : true,
      "status" : "Pending"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investorsCount" : 0
  } ]
}}]
     - parameter sorting: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter status: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter facetId: (query)  (optional)     - parameter mask: (query)  (optional)     - parameter ownerId: (query)  (optional)     - parameter showFavorites: (query)  (optional)     - parameter skipStatistic: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<FundInvestingDetailsListItemsViewModel> 
     */
    open class func getInvestingFundsWithRequestBuilder(sorting: FundsFilterSorting? = nil, showIn: Currency? = nil, status: DashboardAssetStatus? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skipStatistic: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<FundInvestingDetailsListItemsViewModel> {
        let path = "/v2.0/dashboard/investing/funds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "Sorting": sorting, 
                        "ShowIn": showIn, 
                        "Status": status, 
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
                        "FacetId": facetId, 
                        "Mask": mask, 
                        "OwnerId": ownerId, 
                        "ShowFavorites": showFavorites, 
                        "SkipStatistic": skipStatistic, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<FundInvestingDetailsListItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter sorting: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter status: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter facetId: (query)  (optional)     - parameter mask: (query)  (optional)     - parameter ownerId: (query)  (optional)     - parameter showFavorites: (query)  (optional)     - parameter skipStatistic: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInvestingPrograms(sorting: ProgramsFilterSorting? = nil, showIn: Currency? = nil, status: DashboardAssetStatus? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skipStatistic: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ProgramInvestingDetailsListItemsViewModel?,_ error: Error?) -> Void)) {
        getInvestingProgramsWithRequestBuilder(sorting: sorting, showIn: showIn, status: status, dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, facetId: facetId, mask: mask, ownerId: ownerId, showFavorites: showFavorites, skipStatistic: skipStatistic, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/dashboard/investing/programs
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "items" : [ {
    "color" : "color",
    "successFeeSelected" : 9.301444243932576,
    "type" : "DailyPeriod",
    "title" : "title",
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "managementFeeSelected" : 2.3021358869347655,
    "balance" : {
      "amount" : 7.457744773683766,
      "currency" : "Undefined"
    },
    "successFeeCurrent" : 3.616076749251911,
    "availableToInvest" : 0.8008281904610115,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "managementFeeCurrent" : 7.061401241503109,
    "brokerDetails" : {
      "showCommissionRebateSometime" : true,
      "showCommissionRebate" : true,
      "showSwaps" : true,
      "showTicketsSometime" : true,
      "type" : "Undefined",
      "showTickets" : true,
      "logoUrl" : "logoUrl",
      "isKycRequired" : true,
      "name" : "name",
      "showSwapsSometime" : true,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "isSignalsAvailable" : true,
      "isKycRequiredSometime" : true
    },
    "levelProgress" : 1.4658129805029452,
    "investorsCount" : 5,
    "owner" : {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    },
    "periodDuration" : 5,
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "level" : 6,
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "dailyPeriodDetails" : {
      "hourProcessing" : 7,
      "isProcessingRealTime" : true
    },
    "logoUrl" : "logoUrl",
    "url" : "url",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "personalDetails" : {
      "canChangeReinvest" : true,
      "canWithdraw" : true,
      "canInvest" : true,
      "isOwnAsset" : true,
      "managementFeePersonal" : 6.84685269835264,
      "profitPercent" : 1.2315135367772556,
      "isReinvest" : true,
      "isAutoJoin" : true,
      "share" : 2.027123023002322,
      "value" : 4.145608029883936,
      "profit" : 7.386281948385884,
      "successFeePersonal" : 1.4894159098541704,
      "invested" : 1.0246457001441578,
      "isFavorite" : true,
      "status" : "Pending"
    }
  }, {
    "color" : "color",
    "successFeeSelected" : 9.301444243932576,
    "type" : "DailyPeriod",
    "title" : "title",
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "managementFeeSelected" : 2.3021358869347655,
    "balance" : {
      "amount" : 7.457744773683766,
      "currency" : "Undefined"
    },
    "successFeeCurrent" : 3.616076749251911,
    "availableToInvest" : 0.8008281904610115,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "managementFeeCurrent" : 7.061401241503109,
    "brokerDetails" : {
      "showCommissionRebateSometime" : true,
      "showCommissionRebate" : true,
      "showSwaps" : true,
      "showTicketsSometime" : true,
      "type" : "Undefined",
      "showTickets" : true,
      "logoUrl" : "logoUrl",
      "isKycRequired" : true,
      "name" : "name",
      "showSwapsSometime" : true,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "isSignalsAvailable" : true,
      "isKycRequiredSometime" : true
    },
    "levelProgress" : 1.4658129805029452,
    "investorsCount" : 5,
    "owner" : {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    },
    "periodDuration" : 5,
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "level" : 6,
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "dailyPeriodDetails" : {
      "hourProcessing" : 7,
      "isProcessingRealTime" : true
    },
    "logoUrl" : "logoUrl",
    "url" : "url",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "personalDetails" : {
      "canChangeReinvest" : true,
      "canWithdraw" : true,
      "canInvest" : true,
      "isOwnAsset" : true,
      "managementFeePersonal" : 6.84685269835264,
      "profitPercent" : 1.2315135367772556,
      "isReinvest" : true,
      "isAutoJoin" : true,
      "share" : 2.027123023002322,
      "value" : 4.145608029883936,
      "profit" : 7.386281948385884,
      "successFeePersonal" : 1.4894159098541704,
      "invested" : 1.0246457001441578,
      "isFavorite" : true,
      "status" : "Pending"
    }
  } ]
}}]
     - parameter sorting: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter status: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter facetId: (query)  (optional)     - parameter mask: (query)  (optional)     - parameter ownerId: (query)  (optional)     - parameter showFavorites: (query)  (optional)     - parameter skipStatistic: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ProgramInvestingDetailsListItemsViewModel> 
     */
    open class func getInvestingProgramsWithRequestBuilder(sorting: ProgramsFilterSorting? = nil, showIn: Currency? = nil, status: DashboardAssetStatus? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skipStatistic: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ProgramInvestingDetailsListItemsViewModel> {
        let path = "/v2.0/dashboard/investing/programs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "Sorting": sorting, 
                        "ShowIn": showIn, 
                        "Status": status, 
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
                        "FacetId": facetId, 
                        "Mask": mask, 
                        "OwnerId": ownerId, 
                        "ShowFavorites": showFavorites, 
                        "SkipStatistic": skipStatistic, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ProgramInvestingDetailsListItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter skipStatistic: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMostProfitableAssets(dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: Currency? = nil, skipStatistic: Bool? = nil, completion: @escaping ((_ data: DashboardTradingAssetItemsViewModel?,_ error: Error?) -> Void)) {
        getMostProfitableAssetsWithRequestBuilder(dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, showIn: showIn, skipStatistic: skipStatistic).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/dashboard/trading/mostprofitable
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "items" : [ {
    "accountInfo" : {
      "leverage" : 1,
      "supportedCurrencies" : [ null, null ],
      "balances" : [ {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      }, {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      } ],
      "balance" : 7.386281948385884,
      "currency" : "Undefined",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : "None",
      "status" : "Pending"
    },
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "signalInfo" : {
      "subscribersCount" : 1
    },
    "assetTypeExt" : "None",
    "publicInfo" : {
      "programDetails" : {
        "managementFeeSelected" : 1.4658129805029452,
        "successFeeSelected" : 5.637376656633329,
        "level" : 0,
        "successFeeCurrent" : 2.3021358869347655,
        "managementFeeCurrent" : 5.962133916683182,
        "dailyPeriodDetails" : {
          "hourProcessing" : 7,
          "isProcessingRealTime" : true
        },
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 7,
        "entryFeeCurrent" : 9.301444243932576,
        "exitFeeSelected" : 4.145608029883936,
        "tradingSchedule" : {
          "hourEnd" : 2,
          "dayStart" : "Sunday",
          "minuteEnd" : 4,
          "hourStart" : 9,
          "hasTradingSchedule" : true,
          "minuteStart" : 3
        },
        "topFundAssets" : [ {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        }, {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        } ],
        "exitFeeCurrent" : 2.027123023002322,
        "entryFeeSelected" : 3.616076749251911
      },
      "color" : "color",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Undefined",
      "logoUrl" : "logoUrl"
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canCreateApiKeys" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeExchangeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "canClosePeriod" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "canConfirm2FA" : true,
      "hasTerminal" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : "None",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  }, {
    "accountInfo" : {
      "leverage" : 1,
      "supportedCurrencies" : [ null, null ],
      "balances" : [ {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      }, {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      } ],
      "balance" : 7.386281948385884,
      "currency" : "Undefined",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : "None",
      "status" : "Pending"
    },
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "signalInfo" : {
      "subscribersCount" : 1
    },
    "assetTypeExt" : "None",
    "publicInfo" : {
      "programDetails" : {
        "managementFeeSelected" : 1.4658129805029452,
        "successFeeSelected" : 5.637376656633329,
        "level" : 0,
        "successFeeCurrent" : 2.3021358869347655,
        "managementFeeCurrent" : 5.962133916683182,
        "dailyPeriodDetails" : {
          "hourProcessing" : 7,
          "isProcessingRealTime" : true
        },
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 7,
        "entryFeeCurrent" : 9.301444243932576,
        "exitFeeSelected" : 4.145608029883936,
        "tradingSchedule" : {
          "hourEnd" : 2,
          "dayStart" : "Sunday",
          "minuteEnd" : 4,
          "hourStart" : 9,
          "hasTradingSchedule" : true,
          "minuteStart" : 3
        },
        "topFundAssets" : [ {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        }, {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        } ],
        "exitFeeCurrent" : 2.027123023002322,
        "entryFeeSelected" : 3.616076749251911
      },
      "color" : "color",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Undefined",
      "logoUrl" : "logoUrl"
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canCreateApiKeys" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeExchangeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "canClosePeriod" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "canConfirm2FA" : true,
      "hasTerminal" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : "None",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  } ]
}}]
     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter skipStatistic: (query)  (optional)

     - returns: RequestBuilder<DashboardTradingAssetItemsViewModel> 
     */
    open class func getMostProfitableAssetsWithRequestBuilder(dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: Currency? = nil, skipStatistic: Bool? = nil) -> RequestBuilder<DashboardTradingAssetItemsViewModel> {
        let path = "/v2.0/dashboard/trading/mostprofitable"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
                        "ShowIn": showIn, 
                        "SkipStatistic": skipStatistic
        ])

        let requestBuilder: RequestBuilder<DashboardTradingAssetItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Money distribution in percents

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPortfolio(completion: @escaping ((_ data: DashboardPortfolio?,_ error: Error?) -> Void)) {
        getPortfolioWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Money distribution in percents
     - GET /v2.0/dashboard/portfolio
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "distribution" : [ {
    "color" : "color",
    "name" : "Programs",
    "percent" : 0.8008281904610115
  }, {
    "color" : "color",
    "name" : "Programs",
    "percent" : 0.8008281904610115
  } ]
}}]

     - returns: RequestBuilder<DashboardPortfolio> 
     */
    open class func getPortfolioWithRequestBuilder() -> RequestBuilder<DashboardPortfolio> {
        let path = "/v2.0/dashboard/portfolio"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DashboardPortfolio>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter status: (query)  (optional)     - parameter skipStatistic: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPrivateTradingAssets(dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: Currency? = nil, status: DashboardAssetStatus? = nil, skipStatistic: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: DashboardTradingAssetItemsViewModel?,_ error: Error?) -> Void)) {
        getPrivateTradingAssetsWithRequestBuilder(dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, showIn: showIn, status: status, skipStatistic: skipStatistic, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/dashboard/trading/private
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "items" : [ {
    "accountInfo" : {
      "leverage" : 1,
      "supportedCurrencies" : [ null, null ],
      "balances" : [ {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      }, {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      } ],
      "balance" : 7.386281948385884,
      "currency" : "Undefined",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : "None",
      "status" : "Pending"
    },
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "signalInfo" : {
      "subscribersCount" : 1
    },
    "assetTypeExt" : "None",
    "publicInfo" : {
      "programDetails" : {
        "managementFeeSelected" : 1.4658129805029452,
        "successFeeSelected" : 5.637376656633329,
        "level" : 0,
        "successFeeCurrent" : 2.3021358869347655,
        "managementFeeCurrent" : 5.962133916683182,
        "dailyPeriodDetails" : {
          "hourProcessing" : 7,
          "isProcessingRealTime" : true
        },
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 7,
        "entryFeeCurrent" : 9.301444243932576,
        "exitFeeSelected" : 4.145608029883936,
        "tradingSchedule" : {
          "hourEnd" : 2,
          "dayStart" : "Sunday",
          "minuteEnd" : 4,
          "hourStart" : 9,
          "hasTradingSchedule" : true,
          "minuteStart" : 3
        },
        "topFundAssets" : [ {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        }, {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        } ],
        "exitFeeCurrent" : 2.027123023002322,
        "entryFeeSelected" : 3.616076749251911
      },
      "color" : "color",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Undefined",
      "logoUrl" : "logoUrl"
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canCreateApiKeys" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeExchangeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "canClosePeriod" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "canConfirm2FA" : true,
      "hasTerminal" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : "None",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  }, {
    "accountInfo" : {
      "leverage" : 1,
      "supportedCurrencies" : [ null, null ],
      "balances" : [ {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      }, {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      } ],
      "balance" : 7.386281948385884,
      "currency" : "Undefined",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : "None",
      "status" : "Pending"
    },
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "signalInfo" : {
      "subscribersCount" : 1
    },
    "assetTypeExt" : "None",
    "publicInfo" : {
      "programDetails" : {
        "managementFeeSelected" : 1.4658129805029452,
        "successFeeSelected" : 5.637376656633329,
        "level" : 0,
        "successFeeCurrent" : 2.3021358869347655,
        "managementFeeCurrent" : 5.962133916683182,
        "dailyPeriodDetails" : {
          "hourProcessing" : 7,
          "isProcessingRealTime" : true
        },
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 7,
        "entryFeeCurrent" : 9.301444243932576,
        "exitFeeSelected" : 4.145608029883936,
        "tradingSchedule" : {
          "hourEnd" : 2,
          "dayStart" : "Sunday",
          "minuteEnd" : 4,
          "hourStart" : 9,
          "hasTradingSchedule" : true,
          "minuteStart" : 3
        },
        "topFundAssets" : [ {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        }, {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        } ],
        "exitFeeCurrent" : 2.027123023002322,
        "entryFeeSelected" : 3.616076749251911
      },
      "color" : "color",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Undefined",
      "logoUrl" : "logoUrl"
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canCreateApiKeys" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeExchangeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "canClosePeriod" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "canConfirm2FA" : true,
      "hasTerminal" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : "None",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  } ]
}}]
     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter status: (query)  (optional)     - parameter skipStatistic: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<DashboardTradingAssetItemsViewModel> 
     */
    open class func getPrivateTradingAssetsWithRequestBuilder(dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: Currency? = nil, status: DashboardAssetStatus? = nil, skipStatistic: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<DashboardTradingAssetItemsViewModel> {
        let path = "/v2.0/dashboard/trading/private"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
                        "ShowIn": showIn, 
                        "Status": status, 
                        "SkipStatistic": skipStatistic, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DashboardTradingAssetItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter status: (query)  (optional)     - parameter skipStatistic: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPublicTradingAssets(dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: Currency? = nil, status: DashboardAssetStatus? = nil, skipStatistic: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: DashboardTradingAssetItemsViewModel?,_ error: Error?) -> Void)) {
        getPublicTradingAssetsWithRequestBuilder(dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, showIn: showIn, status: status, skipStatistic: skipStatistic, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/dashboard/trading/public
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "items" : [ {
    "accountInfo" : {
      "leverage" : 1,
      "supportedCurrencies" : [ null, null ],
      "balances" : [ {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      }, {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      } ],
      "balance" : 7.386281948385884,
      "currency" : "Undefined",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : "None",
      "status" : "Pending"
    },
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "signalInfo" : {
      "subscribersCount" : 1
    },
    "assetTypeExt" : "None",
    "publicInfo" : {
      "programDetails" : {
        "managementFeeSelected" : 1.4658129805029452,
        "successFeeSelected" : 5.637376656633329,
        "level" : 0,
        "successFeeCurrent" : 2.3021358869347655,
        "managementFeeCurrent" : 5.962133916683182,
        "dailyPeriodDetails" : {
          "hourProcessing" : 7,
          "isProcessingRealTime" : true
        },
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 7,
        "entryFeeCurrent" : 9.301444243932576,
        "exitFeeSelected" : 4.145608029883936,
        "tradingSchedule" : {
          "hourEnd" : 2,
          "dayStart" : "Sunday",
          "minuteEnd" : 4,
          "hourStart" : 9,
          "hasTradingSchedule" : true,
          "minuteStart" : 3
        },
        "topFundAssets" : [ {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        }, {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        } ],
        "exitFeeCurrent" : 2.027123023002322,
        "entryFeeSelected" : 3.616076749251911
      },
      "color" : "color",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Undefined",
      "logoUrl" : "logoUrl"
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canCreateApiKeys" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeExchangeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "canClosePeriod" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "canConfirm2FA" : true,
      "hasTerminal" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : "None",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  }, {
    "accountInfo" : {
      "leverage" : 1,
      "supportedCurrencies" : [ null, null ],
      "balances" : [ {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      }, {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      } ],
      "balance" : 7.386281948385884,
      "currency" : "Undefined",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : "None",
      "status" : "Pending"
    },
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "signalInfo" : {
      "subscribersCount" : 1
    },
    "assetTypeExt" : "None",
    "publicInfo" : {
      "programDetails" : {
        "managementFeeSelected" : 1.4658129805029452,
        "successFeeSelected" : 5.637376656633329,
        "level" : 0,
        "successFeeCurrent" : 2.3021358869347655,
        "managementFeeCurrent" : 5.962133916683182,
        "dailyPeriodDetails" : {
          "hourProcessing" : 7,
          "isProcessingRealTime" : true
        },
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 7,
        "entryFeeCurrent" : 9.301444243932576,
        "exitFeeSelected" : 4.145608029883936,
        "tradingSchedule" : {
          "hourEnd" : 2,
          "dayStart" : "Sunday",
          "minuteEnd" : 4,
          "hourStart" : 9,
          "hasTradingSchedule" : true,
          "minuteStart" : 3
        },
        "topFundAssets" : [ {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        }, {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        } ],
        "exitFeeCurrent" : 2.027123023002322,
        "entryFeeSelected" : 3.616076749251911
      },
      "color" : "color",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Undefined",
      "logoUrl" : "logoUrl"
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canCreateApiKeys" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeExchangeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "canClosePeriod" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "canConfirm2FA" : true,
      "hasTerminal" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : "None",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  } ]
}}]
     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter status: (query)  (optional)     - parameter skipStatistic: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<DashboardTradingAssetItemsViewModel> 
     */
    open class func getPublicTradingAssetsWithRequestBuilder(dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: Currency? = nil, status: DashboardAssetStatus? = nil, skipStatistic: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<DashboardTradingAssetItemsViewModel> {
        let path = "/v2.0/dashboard/trading/public"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
                        "ShowIn": showIn, 
                        "Status": status, 
                        "SkipStatistic": skipStatistic, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DashboardTradingAssetItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Recommended assets to invest (programs, funds and follows). Funds in passed currency
     - parameter currency: (query)  (optional)     - parameter take: (query)  (optional)     - parameter onlyFollows: (query)  (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecommendations(currency: Currency? = nil, take: Int? = nil, onlyFollows: Bool? = nil, completion: @escaping ((_ data: CommonPublicAssetsViewModel?,_ error: Error?) -> Void)) {
        getRecommendationsWithRequestBuilder(currency: currency, take: take, onlyFollows: onlyFollows).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Recommended assets to invest (programs, funds and follows). Funds in passed currency
     - GET /v2.0/dashboard/recommendations
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "follows" : {
    "total" : 6,
    "items" : [ {
      "leverageMin" : 1,
      "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "color" : "color",
      "isExternal" : true,
      "subscribersCount" : 7,
      "brokerType" : "Undefined",
      "description" : "description",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "tags" : [ null, null ],
      "tradesCount" : 1,
      "leverageMax" : 1,
      "personalDetails" : {
        "isOwnAsset" : true,
        "isFavorite" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "status" : "status"
    }, {
      "leverageMin" : 1,
      "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "color" : "color",
      "isExternal" : true,
      "subscribersCount" : 7,
      "brokerType" : "Undefined",
      "description" : "description",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "tags" : [ null, null ],
      "tradesCount" : 1,
      "leverageMax" : 1,
      "personalDetails" : {
        "isOwnAsset" : true,
        "isFavorite" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "status" : "status"
    } ]
  },
  "funds" : {
    "total" : 4,
    "items" : [ {
      "totalAssetsCount" : 2,
      "color" : "color",
      "topFundAssets" : [ {
        "name" : "name",
        "asset" : "asset",
        "percent" : 7.061401241503109,
        "logoUrl" : "logoUrl",
        "url" : "url"
      }, {
        "name" : "name",
        "asset" : "asset",
        "percent" : 7.061401241503109,
        "logoUrl" : "logoUrl",
        "url" : "url"
      } ],
      "description" : "description",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "personalDetails" : {
        "isOwnAsset" : true,
        "isFavorite" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "investorsCount" : 3,
      "status" : "status"
    }, {
      "totalAssetsCount" : 2,
      "color" : "color",
      "topFundAssets" : [ {
        "name" : "name",
        "asset" : "asset",
        "percent" : 7.061401241503109,
        "logoUrl" : "logoUrl",
        "url" : "url"
      }, {
        "name" : "name",
        "asset" : "asset",
        "percent" : 7.061401241503109,
        "logoUrl" : "logoUrl",
        "url" : "url"
      } ],
      "description" : "description",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "personalDetails" : {
        "isOwnAsset" : true,
        "isFavorite" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "investorsCount" : 3,
      "status" : "status"
    } ]
  },
  "programs" : {
    "total" : 9,
    "items" : [ {
      "color" : "color",
      "description" : "description",
      "type" : "DailyPeriod",
      "title" : "title",
      "periodStarts" : "2000-01-23T04:56:07.000+00:00",
      "balance" : {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      },
      "availableToInvest" : 5.962133916683182,
      "currency" : "Undefined",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "levelProgress" : 6.027456183070403,
      "investorsCount" : 5,
      "owner" : {
        "personalDetails" : {
          "isFollow" : true,
          "allowFollow" : true,
          "canCommentPosts" : true,
          "canWritePost" : true
        },
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "url" : "url",
        "logoUrl" : "logoUrl",
        "username" : "username"
      },
      "periodDuration" : 1,
      "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "statistic" : {
        "drawdown" : 1.2315135367772556,
        "chart" : [ {
          "date" : 0,
          "value" : 6.027456183070403
        }, {
          "date" : 0,
          "value" : 6.027456183070403
        } ],
        "profit" : 7.386281948385884
      },
      "level" : 0,
      "entryFeeCurrent" : 7.061401241503109,
      "entryFeeSelected" : 2.3021358869347655,
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "tags" : [ {
        "color" : "color",
        "name" : "name"
      }, {
        "color" : "color",
        "name" : "name"
      } ],
      "periodEnds" : "2000-01-23T04:56:07.000+00:00",
      "personalDetails" : {
        "isReinvest" : true,
        "isAutoJoin" : true,
        "isOwnAsset" : true,
        "isFavorite" : true
      },
      "status" : "status"
    }, {
      "color" : "color",
      "description" : "description",
      "type" : "DailyPeriod",
      "title" : "title",
      "periodStarts" : "2000-01-23T04:56:07.000+00:00",
      "balance" : {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      },
      "availableToInvest" : 5.962133916683182,
      "currency" : "Undefined",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "levelProgress" : 6.027456183070403,
      "investorsCount" : 5,
      "owner" : {
        "personalDetails" : {
          "isFollow" : true,
          "allowFollow" : true,
          "canCommentPosts" : true,
          "canWritePost" : true
        },
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "url" : "url",
        "logoUrl" : "logoUrl",
        "username" : "username"
      },
      "periodDuration" : 1,
      "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "statistic" : {
        "drawdown" : 1.2315135367772556,
        "chart" : [ {
          "date" : 0,
          "value" : 6.027456183070403
        }, {
          "date" : 0,
          "value" : 6.027456183070403
        } ],
        "profit" : 7.386281948385884
      },
      "level" : 0,
      "entryFeeCurrent" : 7.061401241503109,
      "entryFeeSelected" : 2.3021358869347655,
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "tags" : [ {
        "color" : "color",
        "name" : "name"
      }, {
        "color" : "color",
        "name" : "name"
      } ],
      "periodEnds" : "2000-01-23T04:56:07.000+00:00",
      "personalDetails" : {
        "isReinvest" : true,
        "isAutoJoin" : true,
        "isOwnAsset" : true,
        "isFavorite" : true
      },
      "status" : "status"
    } ]
  },
  "managers" : {
    "total" : 4,
    "items" : [ {
      "socialLinks" : [ {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      }, {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      } ],
      "assets" : [ "assets", "assets" ],
      "followers" : 7,
      "following" : 1,
      "about" : "about",
      "regDate" : "2000-01-23T04:56:07.000+00:00",
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "username" : "username"
    }, {
      "socialLinks" : [ {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      }, {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      } ],
      "assets" : [ "assets", "assets" ],
      "followers" : 7,
      "following" : 1,
      "about" : "about",
      "regDate" : "2000-01-23T04:56:07.000+00:00",
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "username" : "username"
    } ]
  }
}}]
     - parameter currency: (query)  (optional)     - parameter take: (query)  (optional)     - parameter onlyFollows: (query)  (optional, default to false)

     - returns: RequestBuilder<CommonPublicAssetsViewModel> 
     */
    open class func getRecommendationsWithRequestBuilder(currency: Currency? = nil, take: Int? = nil, onlyFollows: Bool? = nil) -> RequestBuilder<CommonPublicAssetsViewModel> {
        let path = "/v2.0/dashboard/recommendations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "currency": currency, 
                        "take": take?.encodeToJSON(), 
                        "onlyFollows": onlyFollows
        ])

        let requestBuilder: RequestBuilder<CommonPublicAssetsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter status: (query)  (optional)     - parameter skipStatistic: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSelfManagedFunds(dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: Currency? = nil, status: DashboardAssetStatus? = nil, skipStatistic: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: DashboardTradingAssetItemsViewModel?,_ error: Error?) -> Void)) {
        getSelfManagedFundsWithRequestBuilder(dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, showIn: showIn, status: status, skipStatistic: skipStatistic, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/dashboard/trading/private/selfmanaged
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "items" : [ {
    "accountInfo" : {
      "leverage" : 1,
      "supportedCurrencies" : [ null, null ],
      "balances" : [ {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      }, {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      } ],
      "balance" : 7.386281948385884,
      "currency" : "Undefined",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : "None",
      "status" : "Pending"
    },
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "signalInfo" : {
      "subscribersCount" : 1
    },
    "assetTypeExt" : "None",
    "publicInfo" : {
      "programDetails" : {
        "managementFeeSelected" : 1.4658129805029452,
        "successFeeSelected" : 5.637376656633329,
        "level" : 0,
        "successFeeCurrent" : 2.3021358869347655,
        "managementFeeCurrent" : 5.962133916683182,
        "dailyPeriodDetails" : {
          "hourProcessing" : 7,
          "isProcessingRealTime" : true
        },
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 7,
        "entryFeeCurrent" : 9.301444243932576,
        "exitFeeSelected" : 4.145608029883936,
        "tradingSchedule" : {
          "hourEnd" : 2,
          "dayStart" : "Sunday",
          "minuteEnd" : 4,
          "hourStart" : 9,
          "hasTradingSchedule" : true,
          "minuteStart" : 3
        },
        "topFundAssets" : [ {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        }, {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        } ],
        "exitFeeCurrent" : 2.027123023002322,
        "entryFeeSelected" : 3.616076749251911
      },
      "color" : "color",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Undefined",
      "logoUrl" : "logoUrl"
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canCreateApiKeys" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeExchangeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "canClosePeriod" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "canConfirm2FA" : true,
      "hasTerminal" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : "None",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  }, {
    "accountInfo" : {
      "leverage" : 1,
      "supportedCurrencies" : [ null, null ],
      "balances" : [ {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      }, {
        "amount" : 7.457744773683766,
        "currency" : "Undefined"
      } ],
      "balance" : 7.386281948385884,
      "currency" : "Undefined",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : "None",
      "status" : "Pending"
    },
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "signalInfo" : {
      "subscribersCount" : 1
    },
    "assetTypeExt" : "None",
    "publicInfo" : {
      "programDetails" : {
        "managementFeeSelected" : 1.4658129805029452,
        "successFeeSelected" : 5.637376656633329,
        "level" : 0,
        "successFeeCurrent" : 2.3021358869347655,
        "managementFeeCurrent" : 5.962133916683182,
        "dailyPeriodDetails" : {
          "hourProcessing" : 7,
          "isProcessingRealTime" : true
        },
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 7,
        "entryFeeCurrent" : 9.301444243932576,
        "exitFeeSelected" : 4.145608029883936,
        "tradingSchedule" : {
          "hourEnd" : 2,
          "dayStart" : "Sunday",
          "minuteEnd" : 4,
          "hourStart" : 9,
          "hasTradingSchedule" : true,
          "minuteStart" : 3
        },
        "topFundAssets" : [ {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        }, {
          "name" : "name",
          "asset" : "asset",
          "percent" : 7.061401241503109,
          "logoUrl" : "logoUrl",
          "url" : "url"
        } ],
        "exitFeeCurrent" : 2.027123023002322,
        "entryFeeSelected" : 3.616076749251911
      },
      "color" : "color",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Undefined",
      "logoUrl" : "logoUrl"
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canCreateApiKeys" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeExchangeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "canClosePeriod" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "canConfirm2FA" : true,
      "hasTerminal" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : "None",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  } ]
}}]
     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter status: (query)  (optional)     - parameter skipStatistic: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<DashboardTradingAssetItemsViewModel> 
     */
    open class func getSelfManagedFundsWithRequestBuilder(dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: Currency? = nil, status: DashboardAssetStatus? = nil, skipStatistic: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<DashboardTradingAssetItemsViewModel> {
        let path = "/v2.0/dashboard/trading/private/selfmanaged"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
                        "ShowIn": showIn, 
                        "Status": status, 
                        "SkipStatistic": skipStatistic, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DashboardTradingAssetItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter currency: (query)  (optional)     - parameter eventsTake: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTradingDetails(currency: Currency? = nil, eventsTake: Int? = nil, completion: @escaping ((_ data: DashboardTradingDetails?,_ error: Error?) -> Void)) {
        getTradingDetailsWithRequestBuilder(currency: currency, eventsTake: eventsTake).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/dashboard/trading
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "profits" : {
    "day" : {
      "profitPercent" : 5.637376656633329,
      "profit" : 5.962133916683182
    }
  },
  "total" : 1.4658129805029452,
  "aum" : 6.027456183070403,
  "equity" : 0.8008281904610115,
  "events" : {
    "total" : 2,
    "items" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "color" : "color",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "assetType" : "None"
      },
      "amount" : 2.3021358869347655,
      "feesInfo" : [ {
        "amount" : 9.301444243932576,
        "description" : "description",
        "title" : "title",
        "type" : "Undefined"
      }, {
        "amount" : 9.301444243932576,
        "description" : "description",
        "title" : "title",
        "type" : "Undefined"
      } ],
      "changeState" : "NotChanged",
      "extendedInfo" : [ {
        "amount" : 7.061401241503109,
        "title" : "title"
      }, {
        "amount" : 7.061401241503109,
        "title" : "title"
      } ],
      "currency" : "Undefined",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "totalFeesAmount" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "color" : "color",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "assetType" : "None"
      },
      "amount" : 2.3021358869347655,
      "feesInfo" : [ {
        "amount" : 9.301444243932576,
        "description" : "description",
        "title" : "title",
        "type" : "Undefined"
      }, {
        "amount" : 9.301444243932576,
        "description" : "description",
        "title" : "title",
        "type" : "Undefined"
      } ],
      "changeState" : "NotChanged",
      "extendedInfo" : [ {
        "amount" : 7.061401241503109,
        "title" : "title"
      }, {
        "amount" : 7.061401241503109,
        "title" : "title"
      } ],
      "currency" : "Undefined",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "totalFeesAmount" : 3.616076749251911
    } ]
  }
}}]
     - parameter currency: (query)  (optional)     - parameter eventsTake: (query)  (optional)

     - returns: RequestBuilder<DashboardTradingDetails> 
     */
    open class func getTradingDetailsWithRequestBuilder(currency: Currency? = nil, eventsTake: Int? = nil) -> RequestBuilder<DashboardTradingDetails> {
        let path = "/v2.0/dashboard/trading"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "currency": currency, 
                        "eventsTake": eventsTake?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DashboardTradingDetails>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
