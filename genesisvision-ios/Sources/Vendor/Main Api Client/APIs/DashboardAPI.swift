//
// DashboardAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DashboardAPI {
    /**
     * enum for parameter showIn
     */
    public enum ShowIn_getChart: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**

     - parameter authorization: (header) JWT access token 
     - parameter assets: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChart(authorization: String, assets: [UUID]? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: ShowIn_getChart? = nil, completion: @escaping ((_ data: DashboardChart?,_ error: Error?) -> Void)) {
        getChartWithRequestBuilder(authorization: authorization, assets: assets, dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, showIn: showIn).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /v2.0/dashboard/chart
     - examples: [{contentType=application/json, example={
  "charts" : [ {
    "color" : "color",
    "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  }, {
    "color" : "color",
    "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter assets: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter showIn: (query)  (optional)

     - returns: RequestBuilder<DashboardChart> 
     */
    open class func getChartWithRequestBuilder(authorization: String, assets: [UUID]? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: ShowIn_getChart? = nil) -> RequestBuilder<DashboardChart> {
        let path = "/v2.0/dashboard/chart"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "Assets": assets, 
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
            "ShowIn": showIn?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DashboardChart>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Active assets for chart
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChartAssets(authorization: String, completion: @escaping ((_ data: DashboardChartAssets?,_ error: Error?) -> Void)) {
        getChartAssetsWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Active assets for chart
     - GET /v2.0/dashboard/chart/assets
     - examples: [{contentType=application/json, example={
  "assets" : [ {
    "programDetails" : {
      "level" : 0,
      "levelProgress" : 6.027456183070403
    },
    "color" : "color",
    "isPrivateAccount" : true,
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "url" : "url",
    "assetType" : { }
  }, {
    "programDetails" : {
      "level" : 0,
      "levelProgress" : 6.027456183070403
    },
    "color" : "color",
    "isPrivateAccount" : true,
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "url" : "url",
    "assetType" : { }
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<DashboardChartAssets> 
     */
    open class func getChartAssetsWithRequestBuilder(authorization: String) -> RequestBuilder<DashboardChartAssets> {
        let path = "/v2.0/dashboard/chart/assets"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DashboardChartAssets>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter authorization: (header) JWT access token 
     - parameter topAssetsCount: (query)  (optional, default to 4)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHoldings(authorization: String, topAssetsCount: Int? = nil, completion: @escaping ((_ data: DashboardAssets?,_ error: Error?) -> Void)) {
        getHoldingsWithRequestBuilder(authorization: authorization, topAssetsCount: topAssetsCount).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /v2.0/dashboard/holdings
     - examples: [{contentType=application/json, example={
  "assets" : [ {
    "color" : "color",
    "name" : "name",
    "percent" : 0.8008281904610115
  }, {
    "color" : "color",
    "name" : "name",
    "percent" : 0.8008281904610115
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter topAssetsCount: (query)  (optional, default to 4)

     - returns: RequestBuilder<DashboardAssets> 
     */
    open class func getHoldingsWithRequestBuilder(authorization: String, topAssetsCount: Int? = nil) -> RequestBuilder<DashboardAssets> {
        let path = "/v2.0/dashboard/holdings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "topAssetsCount": topAssetsCount?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DashboardAssets>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getInvestingDetails: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**

     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional)
     - parameter eventsTake: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInvestingDetails(authorization: String, currency: Currency_getInvestingDetails? = nil, eventsTake: Int? = nil, completion: @escaping ((_ data: DashboardInvestingDetails?,_ error: Error?) -> Void)) {
        getInvestingDetailsWithRequestBuilder(authorization: authorization, currency: currency, eventsTake: eventsTake).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /v2.0/dashboard/investing
     - examples: [{contentType=application/json, example={
  "profits" : {
    "week" : {
      "profitPercent" : 5.637376656633329,
      "profit" : 5.962133916683182
    },
    "month" : {
      "profitPercent" : 5.637376656633329,
      "profit" : 5.962133916683182
    },
    "day" : {
      "profitPercent" : 5.637376656633329,
      "profit" : 5.962133916683182
    }
  },
  "programsCount" : 6,
  "fundsCount" : 1,
  "equity" : 0.8008281904610115,
  "events" : {
    "total" : 2,
    "items" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "color" : "color",
        "logo" : "logo",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "url" : "url",
        "assetType" : { }
      },
      "amount" : 2.3021358869347655,
      "feesInfo" : [ {
        "amount" : 9.301444243932576,
        "description" : "description",
        "currency" : null,
        "title" : "title",
        "type" : { }
      }, {
        "amount" : 9.301444243932576,
        "description" : "description",
        "currency" : null,
        "title" : "title",
        "type" : { }
      } ],
      "icon" : "icon",
      "changeState" : { },
      "extendedInfo" : [ {
        "amount" : 7.061401241503109,
        "currency" : { },
        "title" : "title"
      }, {
        "amount" : 7.061401241503109,
        "currency" : { },
        "title" : "title"
      } ],
      "currency" : "USD",
      "title" : "title",
      "totalFeesCurrency" : "USD",
      "totalFeesAmount" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "color" : "color",
        "logo" : "logo",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "url" : "url",
        "assetType" : { }
      },
      "amount" : 2.3021358869347655,
      "feesInfo" : [ {
        "amount" : 9.301444243932576,
        "description" : "description",
        "currency" : null,
        "title" : "title",
        "type" : { }
      }, {
        "amount" : 9.301444243932576,
        "description" : "description",
        "currency" : null,
        "title" : "title",
        "type" : { }
      } ],
      "icon" : "icon",
      "changeState" : { },
      "extendedInfo" : [ {
        "amount" : 7.061401241503109,
        "currency" : { },
        "title" : "title"
      }, {
        "amount" : 7.061401241503109,
        "currency" : { },
        "title" : "title"
      } ],
      "currency" : "USD",
      "title" : "title",
      "totalFeesCurrency" : "USD",
      "totalFeesAmount" : 3.616076749251911
    } ]
  }
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional)
     - parameter eventsTake: (query)  (optional)

     - returns: RequestBuilder<DashboardInvestingDetails> 
     */
    open class func getInvestingDetailsWithRequestBuilder(authorization: String, currency: Currency_getInvestingDetails? = nil, eventsTake: Int? = nil) -> RequestBuilder<DashboardInvestingDetails> {
        let path = "/v2.0/dashboard/investing"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currency": currency?.rawValue, 
            "eventsTake": eventsTake?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DashboardInvestingDetails>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_getInvestingFunds: String { 
        case byTitleAsc = "ByTitleAsc"
        case byTitleDesc = "ByTitleDesc"
        case bySizeAsc = "BySizeAsc"
        case bySizeDesc = "BySizeDesc"
        case byInvestorsAsc = "ByInvestorsAsc"
        case byInvestorsDesc = "ByInvestorsDesc"
        case byDrawdownAsc = "ByDrawdownAsc"
        case byDrawdownDesc = "ByDrawdownDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byNewAsc = "ByNewAsc"
        case byNewDesc = "ByNewDesc"
        case byValueAsc = "ByValueAsc"
        case byValueDesc = "ByValueDesc"
    }

    /**
     * enum for parameter showIn
     */
    public enum ShowIn_getInvestingFunds: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     * enum for parameter status
     */
    public enum Status_getInvestingFunds: String { 
        case all = "All"
        case active = "Active"
    }

    /**

     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter facetId: (query)  (optional)
     - parameter mask: (query)  (optional)
     - parameter ownerId: (query)  (optional)
     - parameter showFavorites: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInvestingFunds(authorization: String, sorting: Sorting_getInvestingFunds? = nil, showIn: ShowIn_getInvestingFunds? = nil, status: Status_getInvestingFunds? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ItemsViewModelFundInvestingDetailsList?,_ error: Error?) -> Void)) {
        getInvestingFundsWithRequestBuilder(authorization: authorization, sorting: sorting, showIn: showIn, status: status, dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, facetId: facetId, mask: mask, ownerId: ownerId, showFavorites: showFavorites, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /v2.0/dashboard/investing/funds
     - examples: [{contentType=application/json, example={
  "total" : 3,
  "items" : [ {
    "owner" : {
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "username" : "username"
    },
    "totalAssetsCount" : 6,
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "color" : "color",
    "topFundAssets" : [ {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 1.4658129805029452
    }, {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 1.4658129805029452
    } ],
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "balance" : {
      "amount" : 9.301444243932576,
      "currency" : { }
    },
    "logo" : "logo",
    "personalDetails" : {
      "canWithdraw" : true,
      "canInvest" : true,
      "isOwnAsset" : true,
      "share" : 2.3021358869347655,
      "value" : 7.061401241503109,
      "isFavorite" : true,
      "status" : { }
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investorsCount" : 0
  }, {
    "owner" : {
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "username" : "username"
    },
    "totalAssetsCount" : 6,
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "color" : "color",
    "topFundAssets" : [ {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 1.4658129805029452
    }, {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 1.4658129805029452
    } ],
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "balance" : {
      "amount" : 9.301444243932576,
      "currency" : { }
    },
    "logo" : "logo",
    "personalDetails" : {
      "canWithdraw" : true,
      "canInvest" : true,
      "isOwnAsset" : true,
      "share" : 2.3021358869347655,
      "value" : 7.061401241503109,
      "isFavorite" : true,
      "status" : { }
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investorsCount" : 0
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter facetId: (query)  (optional)
     - parameter mask: (query)  (optional)
     - parameter ownerId: (query)  (optional)
     - parameter showFavorites: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ItemsViewModelFundInvestingDetailsList> 
     */
    open class func getInvestingFundsWithRequestBuilder(authorization: String, sorting: Sorting_getInvestingFunds? = nil, showIn: ShowIn_getInvestingFunds? = nil, status: Status_getInvestingFunds? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ItemsViewModelFundInvestingDetailsList> {
        let path = "/v2.0/dashboard/investing/funds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "Sorting": sorting?.rawValue, 
            "ShowIn": showIn?.rawValue, 
            "Status": status?.rawValue, 
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
            "FacetId": facetId, 
            "Mask": mask, 
            "OwnerId": ownerId, 
            "ShowFavorites": showFavorites, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ItemsViewModelFundInvestingDetailsList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_getInvestingPrograms: String { 
        case byTitleAsc = "ByTitleAsc"
        case byTitleDesc = "ByTitleDesc"
        case byEquityAsc = "ByEquityAsc"
        case byEquityDesc = "ByEquityDesc"
        case byInvestorsAsc = "ByInvestorsAsc"
        case byInvestorsDesc = "ByInvestorsDesc"
        case byPeriodAsc = "ByPeriodAsc"
        case byPeriodDesc = "ByPeriodDesc"
        case byDrawdownAsc = "ByDrawdownAsc"
        case byDrawdownDesc = "ByDrawdownDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byNewAsc = "ByNewAsc"
        case byNewDesc = "ByNewDesc"
        case byLevelProgressAsc = "ByLevelProgressAsc"
        case byLevelProgressDesc = "ByLevelProgressDesc"
        case byLevelAsc = "ByLevelAsc"
        case byLevelDesc = "ByLevelDesc"
        case byValueAsc = "ByValueAsc"
        case byValueDesc = "ByValueDesc"
    }

    /**
     * enum for parameter showIn
     */
    public enum ShowIn_getInvestingPrograms: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     * enum for parameter status
     */
    public enum Status_getInvestingPrograms: String { 
        case all = "All"
        case active = "Active"
    }

    /**

     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter facetId: (query)  (optional)
     - parameter mask: (query)  (optional)
     - parameter ownerId: (query)  (optional)
     - parameter showFavorites: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInvestingPrograms(authorization: String, sorting: Sorting_getInvestingPrograms? = nil, showIn: ShowIn_getInvestingPrograms? = nil, status: Status_getInvestingPrograms? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ItemsViewModelProgramInvestingDetailsList?,_ error: Error?) -> Void)) {
        getInvestingProgramsWithRequestBuilder(authorization: authorization, sorting: sorting, showIn: showIn, status: status, dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, facetId: facetId, mask: mask, ownerId: ownerId, showFavorites: showFavorites, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /v2.0/dashboard/investing/programs
     - examples: [{contentType=application/json, example={
  "total" : 4,
  "items" : [ {
    "owner" : {
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "username" : "username"
    },
    "periodDuration" : 5,
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "color" : "color",
    "level" : 6,
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "balance" : {
      "amount" : 9.301444243932576,
      "currency" : { }
    },
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "logo" : "logo",
    "availableToInvest" : 0.8008281904610115,
    "personalDetails" : {
      "profitPercent" : 3.616076749251911,
      "canWithdraw" : true,
      "isReinvest" : true,
      "canInvest" : true,
      "isOwnAsset" : true,
      "share" : 2.3021358869347655,
      "value" : 7.061401241503109,
      "profit" : 9.301444243932576,
      "invested" : 2.027123023002322,
      "isFavorite" : true,
      "status" : { }
    },
    "currency" : { },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "brokerDetails" : {
      "showCommissionRebateSometime" : true,
      "showCommissionRebate" : true,
      "showSwaps" : true,
      "showTicketsSometime" : true,
      "type" : { },
      "showTickets" : true,
      "isKycRequired" : true,
      "name" : "name",
      "logo" : "logo",
      "showSwapsSometime" : true,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "isSignalsAvailable" : true,
      "isKycRequiredSometime" : true
    },
    "levelProgress" : 1.4658129805029452,
    "investorsCount" : 5
  }, {
    "owner" : {
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "username" : "username"
    },
    "periodDuration" : 5,
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "color" : "color",
    "level" : 6,
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "balance" : {
      "amount" : 9.301444243932576,
      "currency" : { }
    },
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "logo" : "logo",
    "availableToInvest" : 0.8008281904610115,
    "personalDetails" : {
      "profitPercent" : 3.616076749251911,
      "canWithdraw" : true,
      "isReinvest" : true,
      "canInvest" : true,
      "isOwnAsset" : true,
      "share" : 2.3021358869347655,
      "value" : 7.061401241503109,
      "profit" : 9.301444243932576,
      "invested" : 2.027123023002322,
      "isFavorite" : true,
      "status" : { }
    },
    "currency" : { },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "brokerDetails" : {
      "showCommissionRebateSometime" : true,
      "showCommissionRebate" : true,
      "showSwaps" : true,
      "showTicketsSometime" : true,
      "type" : { },
      "showTickets" : true,
      "isKycRequired" : true,
      "name" : "name",
      "logo" : "logo",
      "showSwapsSometime" : true,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "isSignalsAvailable" : true,
      "isKycRequiredSometime" : true
    },
    "levelProgress" : 1.4658129805029452,
    "investorsCount" : 5
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter facetId: (query)  (optional)
     - parameter mask: (query)  (optional)
     - parameter ownerId: (query)  (optional)
     - parameter showFavorites: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ItemsViewModelProgramInvestingDetailsList> 
     */
    open class func getInvestingProgramsWithRequestBuilder(authorization: String, sorting: Sorting_getInvestingPrograms? = nil, showIn: ShowIn_getInvestingPrograms? = nil, status: Status_getInvestingPrograms? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ItemsViewModelProgramInvestingDetailsList> {
        let path = "/v2.0/dashboard/investing/programs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "Sorting": sorting?.rawValue, 
            "ShowIn": showIn?.rawValue, 
            "Status": status?.rawValue, 
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
            "FacetId": facetId, 
            "Mask": mask, 
            "OwnerId": ownerId, 
            "ShowFavorites": showFavorites, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ItemsViewModelProgramInvestingDetailsList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter showIn
     */
    public enum ShowIn_getMostProfitableAssets: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**

     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMostProfitableAssets(authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: ShowIn_getMostProfitableAssets? = nil, completion: @escaping ((_ data: ItemsViewModelDashboardTradingAsset?,_ error: Error?) -> Void)) {
        getMostProfitableAssetsWithRequestBuilder(authorization: authorization, dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, showIn: showIn).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /v2.0/dashboard/trading/mostprofitable
     - examples: [{contentType=application/json, example={
  "total" : 5,
  "items" : [ {
    "accountInfo" : {
      "leverage" : 1,
      "balance" : 6.027456183070403,
      "currency" : "USD",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : { },
      "status" : { }
    },
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "signalInfo" : {
      "subscribersCount" : 5
    },
    "assetTypeExt" : { },
    "publicInfo" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 0,
        "topFundAssets" : [ {
          "name" : "name",
          "icon" : "icon",
          "asset" : "asset",
          "percent" : 1.4658129805029452
        }, {
          "name" : "name",
          "icon" : "icon",
          "asset" : "asset",
          "percent" : 1.4658129805029452
        } ]
      },
      "color" : "color",
      "logo" : "logo",
      "title" : "title",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : { }
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "hasTerminal" : true,
      "canConfirm2FA" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : { },
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  }, {
    "accountInfo" : {
      "leverage" : 1,
      "balance" : 6.027456183070403,
      "currency" : "USD",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : { },
      "status" : { }
    },
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "signalInfo" : {
      "subscribersCount" : 5
    },
    "assetTypeExt" : { },
    "publicInfo" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 0,
        "topFundAssets" : [ {
          "name" : "name",
          "icon" : "icon",
          "asset" : "asset",
          "percent" : 1.4658129805029452
        }, {
          "name" : "name",
          "icon" : "icon",
          "asset" : "asset",
          "percent" : 1.4658129805029452
        } ]
      },
      "color" : "color",
      "logo" : "logo",
      "title" : "title",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : { }
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "hasTerminal" : true,
      "canConfirm2FA" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : { },
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter showIn: (query)  (optional)

     - returns: RequestBuilder<ItemsViewModelDashboardTradingAsset> 
     */
    open class func getMostProfitableAssetsWithRequestBuilder(authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: ShowIn_getMostProfitableAssets? = nil) -> RequestBuilder<ItemsViewModelDashboardTradingAsset> {
        let path = "/v2.0/dashboard/trading/mostprofitable"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
            "ShowIn": showIn?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ItemsViewModelDashboardTradingAsset>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Money distribution in percents
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPortfolio(authorization: String, completion: @escaping ((_ data: DashboardPortfolio?,_ error: Error?) -> Void)) {
        getPortfolioWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Money distribution in percents
     - GET /v2.0/dashboard/portfolio
     - examples: [{contentType=application/json, example={
  "distribution" : [ {
    "color" : "color",
    "name" : { },
    "percent" : 0.8008281904610115
  }, {
    "color" : "color",
    "name" : { },
    "percent" : 0.8008281904610115
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<DashboardPortfolio> 
     */
    open class func getPortfolioWithRequestBuilder(authorization: String) -> RequestBuilder<DashboardPortfolio> {
        let path = "/v2.0/dashboard/portfolio"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DashboardPortfolio>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter showIn
     */
    public enum ShowIn_getPrivateTradingAssets: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     * enum for parameter status
     */
    public enum Status_getPrivateTradingAssets: String { 
        case all = "All"
        case active = "Active"
    }

    /**

     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPrivateTradingAssets(authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: ShowIn_getPrivateTradingAssets? = nil, status: Status_getPrivateTradingAssets? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ItemsViewModelDashboardTradingAsset?,_ error: Error?) -> Void)) {
        getPrivateTradingAssetsWithRequestBuilder(authorization: authorization, dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, showIn: showIn, status: status, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /v2.0/dashboard/trading/private
     - examples: [{contentType=application/json, example={
  "total" : 5,
  "items" : [ {
    "accountInfo" : {
      "leverage" : 1,
      "balance" : 6.027456183070403,
      "currency" : "USD",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : { },
      "status" : { }
    },
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "signalInfo" : {
      "subscribersCount" : 5
    },
    "assetTypeExt" : { },
    "publicInfo" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 0,
        "topFundAssets" : [ {
          "name" : "name",
          "icon" : "icon",
          "asset" : "asset",
          "percent" : 1.4658129805029452
        }, {
          "name" : "name",
          "icon" : "icon",
          "asset" : "asset",
          "percent" : 1.4658129805029452
        } ]
      },
      "color" : "color",
      "logo" : "logo",
      "title" : "title",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : { }
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "hasTerminal" : true,
      "canConfirm2FA" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : { },
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  }, {
    "accountInfo" : {
      "leverage" : 1,
      "balance" : 6.027456183070403,
      "currency" : "USD",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : { },
      "status" : { }
    },
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "signalInfo" : {
      "subscribersCount" : 5
    },
    "assetTypeExt" : { },
    "publicInfo" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 0,
        "topFundAssets" : [ {
          "name" : "name",
          "icon" : "icon",
          "asset" : "asset",
          "percent" : 1.4658129805029452
        }, {
          "name" : "name",
          "icon" : "icon",
          "asset" : "asset",
          "percent" : 1.4658129805029452
        } ]
      },
      "color" : "color",
      "logo" : "logo",
      "title" : "title",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : { }
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "hasTerminal" : true,
      "canConfirm2FA" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : { },
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ItemsViewModelDashboardTradingAsset> 
     */
    open class func getPrivateTradingAssetsWithRequestBuilder(authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: ShowIn_getPrivateTradingAssets? = nil, status: Status_getPrivateTradingAssets? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ItemsViewModelDashboardTradingAsset> {
        let path = "/v2.0/dashboard/trading/private"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
            "ShowIn": showIn?.rawValue, 
            "Status": status?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ItemsViewModelDashboardTradingAsset>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter showIn
     */
    public enum ShowIn_getPublicTradingAssets: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     * enum for parameter status
     */
    public enum Status_getPublicTradingAssets: String { 
        case all = "All"
        case active = "Active"
    }

    /**

     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPublicTradingAssets(authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: ShowIn_getPublicTradingAssets? = nil, status: Status_getPublicTradingAssets? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ItemsViewModelDashboardTradingAsset?,_ error: Error?) -> Void)) {
        getPublicTradingAssetsWithRequestBuilder(authorization: authorization, dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, showIn: showIn, status: status, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /v2.0/dashboard/trading/public
     - examples: [{contentType=application/json, example={
  "total" : 5,
  "items" : [ {
    "accountInfo" : {
      "leverage" : 1,
      "balance" : 6.027456183070403,
      "currency" : "USD",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : { },
      "status" : { }
    },
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "signalInfo" : {
      "subscribersCount" : 5
    },
    "assetTypeExt" : { },
    "publicInfo" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 0,
        "topFundAssets" : [ {
          "name" : "name",
          "icon" : "icon",
          "asset" : "asset",
          "percent" : 1.4658129805029452
        }, {
          "name" : "name",
          "icon" : "icon",
          "asset" : "asset",
          "percent" : 1.4658129805029452
        } ]
      },
      "color" : "color",
      "logo" : "logo",
      "title" : "title",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : { }
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "hasTerminal" : true,
      "canConfirm2FA" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : { },
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  }, {
    "accountInfo" : {
      "leverage" : 1,
      "balance" : 6.027456183070403,
      "currency" : "USD",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "login" : "login",
      "type" : { },
      "status" : { }
    },
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "signalInfo" : {
      "subscribersCount" : 5
    },
    "assetTypeExt" : { },
    "publicInfo" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "fundDetails" : {
        "totalAssetsCount" : 0,
        "topFundAssets" : [ {
          "name" : "name",
          "icon" : "icon",
          "asset" : "asset",
          "percent" : 1.4658129805029452
        }, {
          "name" : "name",
          "icon" : "icon",
          "asset" : "asset",
          "percent" : 1.4658129805029452
        } ]
      },
      "color" : "color",
      "logo" : "logo",
      "title" : "title",
      "url" : "url"
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "broker" : {
      "name" : "name",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : { }
    },
    "actions" : {
      "canAddRequestWithdraw" : true,
      "canClose" : true,
      "canEditSignalProviderSettings" : true,
      "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
      "canTransferMoney" : true,
      "canMakeDemoDeposit" : true,
      "canMakeProgramFromPrivateTradingAccount" : true,
      "canMakeProgramFromSignalProvider" : true,
      "isEnoughMoneyToCreateProgram" : true,
      "canChangePassword" : true,
      "canMakeSignalProviderFromPrivateTradingAccount" : true,
      "canMakeSignalProviderFromProgram" : true,
      "hasTerminal" : true,
      "canConfirm2FA" : true,
      "canAddRequestInvest" : true
    },
    "assetType" : { },
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ]
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ItemsViewModelDashboardTradingAsset> 
     */
    open class func getPublicTradingAssetsWithRequestBuilder(authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, showIn: ShowIn_getPublicTradingAssets? = nil, status: Status_getPublicTradingAssets? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ItemsViewModelDashboardTradingAsset> {
        let path = "/v2.0/dashboard/trading/public"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
            "ShowIn": showIn?.rawValue, 
            "Status": status?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ItemsViewModelDashboardTradingAsset>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getRecommendations: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Recommended assets to invest (programs, funds and follows). Funds in passed currency
     
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter onlyFollows: (query)  (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecommendations(authorization: String, currency: Currency_getRecommendations? = nil, take: Int? = nil, onlyFollows: Bool? = nil, completion: @escaping ((_ data: CommonPublicAssetsViewModel?,_ error: Error?) -> Void)) {
        getRecommendationsWithRequestBuilder(authorization: authorization, currency: currency, take: take, onlyFollows: onlyFollows).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Recommended assets to invest (programs, funds and follows). Funds in passed currency
     - GET /v2.0/dashboard/recommendations
     - examples: [{contentType=application/json, example={
  "follows" : {
    "total" : 6,
    "items" : [ {
      "leverageMin" : 1,
      "owner" : {
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "url" : "url",
        "username" : "username"
      },
      "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "statistic" : {
        "drawdown" : 5.637376656633329,
        "chart" : [ {
          "date" : 0,
          "value" : 6.027456183070403
        }, {
          "date" : 0,
          "value" : 6.027456183070403
        } ],
        "profit" : 5.962133916683182
      },
      "color" : "color",
      "isExternal" : true,
      "subscribersCount" : 7,
      "brokerType" : { },
      "description" : "description",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "url" : "url",
      "tags" : [ {
        "color" : "color",
        "name" : "name"
      }, {
        "color" : "color",
        "name" : "name"
      } ],
      "tradesCount" : 1,
      "leverageMax" : 1,
      "logo" : "logo",
      "personalDetails" : {
        "isOwnAsset" : true,
        "isFavorite" : true
      },
      "currency" : "USD",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "status" : "status"
    }, {
      "leverageMin" : 1,
      "owner" : {
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "url" : "url",
        "username" : "username"
      },
      "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "statistic" : {
        "drawdown" : 5.637376656633329,
        "chart" : [ {
          "date" : 0,
          "value" : 6.027456183070403
        }, {
          "date" : 0,
          "value" : 6.027456183070403
        } ],
        "profit" : 5.962133916683182
      },
      "color" : "color",
      "isExternal" : true,
      "subscribersCount" : 7,
      "brokerType" : { },
      "description" : "description",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "url" : "url",
      "tags" : [ {
        "color" : "color",
        "name" : "name"
      }, {
        "color" : "color",
        "name" : "name"
      } ],
      "tradesCount" : 1,
      "leverageMax" : 1,
      "logo" : "logo",
      "personalDetails" : {
        "isOwnAsset" : true,
        "isFavorite" : true
      },
      "currency" : "USD",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "status" : "status"
    } ]
  },
  "funds" : {
    "total" : 4,
    "items" : [ {
      "owner" : {
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "url" : "url",
        "username" : "username"
      },
      "totalAssetsCount" : 2,
      "statistic" : {
        "drawdown" : 5.637376656633329,
        "chart" : [ {
          "date" : 0,
          "value" : 6.027456183070403
        }, {
          "date" : 0,
          "value" : 6.027456183070403
        } ],
        "profit" : 5.962133916683182
      },
      "color" : "color",
      "topFundAssets" : [ {
        "name" : "name",
        "icon" : "icon",
        "asset" : "asset",
        "percent" : 1.4658129805029452
      }, {
        "name" : "name",
        "icon" : "icon",
        "asset" : "asset",
        "percent" : 1.4658129805029452
      } ],
      "description" : "description",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "url" : "url",
      "balance" : {
        "amount" : 9.301444243932576,
        "currency" : { }
      },
      "logo" : "logo",
      "personalDetails" : {
        "isOwnAsset" : true,
        "isFavorite" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "investorsCount" : 3,
      "status" : "status"
    }, {
      "owner" : {
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "url" : "url",
        "username" : "username"
      },
      "totalAssetsCount" : 2,
      "statistic" : {
        "drawdown" : 5.637376656633329,
        "chart" : [ {
          "date" : 0,
          "value" : 6.027456183070403
        }, {
          "date" : 0,
          "value" : 6.027456183070403
        } ],
        "profit" : 5.962133916683182
      },
      "color" : "color",
      "topFundAssets" : [ {
        "name" : "name",
        "icon" : "icon",
        "asset" : "asset",
        "percent" : 1.4658129805029452
      }, {
        "name" : "name",
        "icon" : "icon",
        "asset" : "asset",
        "percent" : 1.4658129805029452
      } ],
      "description" : "description",
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "url" : "url",
      "balance" : {
        "amount" : 9.301444243932576,
        "currency" : { }
      },
      "logo" : "logo",
      "personalDetails" : {
        "isOwnAsset" : true,
        "isFavorite" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "investorsCount" : 3,
      "status" : "status"
    } ]
  },
  "programs" : {
    "total" : 9,
    "items" : [ {
      "owner" : {
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "url" : "url",
        "username" : "username"
      },
      "periodDuration" : 1,
      "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "statistic" : {
        "drawdown" : 5.637376656633329,
        "chart" : [ {
          "date" : 0,
          "value" : 6.027456183070403
        }, {
          "date" : 0,
          "value" : 6.027456183070403
        } ],
        "profit" : 5.962133916683182
      },
      "color" : "color",
      "level" : 0,
      "entryFeeCurrent" : 7.061401241503109,
      "description" : "description",
      "entryFeeSelected" : 2.3021358869347655,
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "url" : "url",
      "periodStarts" : "2000-01-23T04:56:07.000+00:00",
      "tags" : [ {
        "color" : "color",
        "name" : "name"
      }, {
        "color" : "color",
        "name" : "name"
      } ],
      "balance" : {
        "amount" : 9.301444243932576,
        "currency" : { }
      },
      "periodEnds" : "2000-01-23T04:56:07.000+00:00",
      "logo" : "logo",
      "availableToInvest" : 5.962133916683182,
      "personalDetails" : {
        "isReinvest" : true,
        "isOwnAsset" : true,
        "isFavorite" : true
      },
      "currency" : { },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "levelProgress" : 6.027456183070403,
      "investorsCount" : 5,
      "status" : "status"
    }, {
      "owner" : {
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "url" : "url",
        "username" : "username"
      },
      "periodDuration" : 1,
      "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "statistic" : {
        "drawdown" : 5.637376656633329,
        "chart" : [ {
          "date" : 0,
          "value" : 6.027456183070403
        }, {
          "date" : 0,
          "value" : 6.027456183070403
        } ],
        "profit" : 5.962133916683182
      },
      "color" : "color",
      "level" : 0,
      "entryFeeCurrent" : 7.061401241503109,
      "description" : "description",
      "entryFeeSelected" : 2.3021358869347655,
      "title" : "title",
      "creationDate" : "2000-01-23T04:56:07.000+00:00",
      "url" : "url",
      "periodStarts" : "2000-01-23T04:56:07.000+00:00",
      "tags" : [ {
        "color" : "color",
        "name" : "name"
      }, {
        "color" : "color",
        "name" : "name"
      } ],
      "balance" : {
        "amount" : 9.301444243932576,
        "currency" : { }
      },
      "periodEnds" : "2000-01-23T04:56:07.000+00:00",
      "logo" : "logo",
      "availableToInvest" : 5.962133916683182,
      "personalDetails" : {
        "isReinvest" : true,
        "isOwnAsset" : true,
        "isFavorite" : true
      },
      "currency" : { },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "levelProgress" : 6.027456183070403,
      "investorsCount" : 5,
      "status" : "status"
    } ]
  },
  "managers" : {
    "total" : 7,
    "items" : [ {
      "socialLinks" : [ {
        "name" : "name",
        "logo" : "logo",
        "type" : { },
        "value" : "value",
        "url" : "url"
      }, {
        "name" : "name",
        "logo" : "logo",
        "type" : { },
        "value" : "value",
        "url" : "url"
      } ],
      "assets" : [ "assets", "assets" ],
      "about" : "about",
      "regDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    }, {
      "socialLinks" : [ {
        "name" : "name",
        "logo" : "logo",
        "type" : { },
        "value" : "value",
        "url" : "url"
      }, {
        "name" : "name",
        "logo" : "logo",
        "type" : { },
        "value" : "value",
        "url" : "url"
      } ],
      "assets" : [ "assets", "assets" ],
      "about" : "about",
      "regDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    } ]
  }
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter onlyFollows: (query)  (optional, default to false)

     - returns: RequestBuilder<CommonPublicAssetsViewModel> 
     */
    open class func getRecommendationsWithRequestBuilder(authorization: String, currency: Currency_getRecommendations? = nil, take: Int? = nil, onlyFollows: Bool? = nil) -> RequestBuilder<CommonPublicAssetsViewModel> {
        let path = "/v2.0/dashboard/recommendations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currency": currency?.rawValue, 
            "take": take?.encodeToJSON(), 
            "onlyFollows": onlyFollows
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CommonPublicAssetsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getSummary: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**

     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSummary(authorization: String, currency: Currency_getSummary? = nil, completion: @escaping ((_ data: DashboardSummary?,_ error: Error?) -> Void)) {
        getSummaryWithRequestBuilder(authorization: authorization, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /v2.0/dashboard/summary
     - examples: [{contentType=application/json, example={
  "trading" : 6.027456183070403,
  "profits" : {
    "week" : {
      "profitPercent" : 5.637376656633329,
      "profit" : 5.962133916683182
    },
    "month" : {
      "profitPercent" : 5.637376656633329,
      "profit" : 5.962133916683182
    },
    "day" : {
      "profitPercent" : 5.637376656633329,
      "profit" : 5.962133916683182
    }
  },
  "total" : 5.962133916683182,
  "wallets" : 1.4658129805029452,
  "invested" : 0.8008281904610115
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<DashboardSummary> 
     */
    open class func getSummaryWithRequestBuilder(authorization: String, currency: Currency_getSummary? = nil) -> RequestBuilder<DashboardSummary> {
        let path = "/v2.0/dashboard/summary"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currency": currency?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DashboardSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getTradingDetails: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**

     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional)
     - parameter eventsTake: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTradingDetails(authorization: String, currency: Currency_getTradingDetails? = nil, eventsTake: Int? = nil, completion: @escaping ((_ data: DashboardTradingDetails?,_ error: Error?) -> Void)) {
        getTradingDetailsWithRequestBuilder(authorization: authorization, currency: currency, eventsTake: eventsTake).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /v2.0/dashboard/trading
     - examples: [{contentType=application/json, example={
  "profits" : {
    "week" : {
      "profitPercent" : 5.637376656633329,
      "profit" : 5.962133916683182
    },
    "month" : {
      "profitPercent" : 5.637376656633329,
      "profit" : 5.962133916683182
    },
    "day" : {
      "profitPercent" : 5.637376656633329,
      "profit" : 5.962133916683182
    }
  },
  "total" : 1.4658129805029452,
  "aum" : 6.027456183070403,
  "equity" : 0.8008281904610115,
  "events" : {
    "total" : 2,
    "items" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "color" : "color",
        "logo" : "logo",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "url" : "url",
        "assetType" : { }
      },
      "amount" : 2.3021358869347655,
      "feesInfo" : [ {
        "amount" : 9.301444243932576,
        "description" : "description",
        "currency" : null,
        "title" : "title",
        "type" : { }
      }, {
        "amount" : 9.301444243932576,
        "description" : "description",
        "currency" : null,
        "title" : "title",
        "type" : { }
      } ],
      "icon" : "icon",
      "changeState" : { },
      "extendedInfo" : [ {
        "amount" : 7.061401241503109,
        "currency" : { },
        "title" : "title"
      }, {
        "amount" : 7.061401241503109,
        "currency" : { },
        "title" : "title"
      } ],
      "currency" : "USD",
      "title" : "title",
      "totalFeesCurrency" : "USD",
      "totalFeesAmount" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "color" : "color",
        "logo" : "logo",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "url" : "url",
        "assetType" : { }
      },
      "amount" : 2.3021358869347655,
      "feesInfo" : [ {
        "amount" : 9.301444243932576,
        "description" : "description",
        "currency" : null,
        "title" : "title",
        "type" : { }
      }, {
        "amount" : 9.301444243932576,
        "description" : "description",
        "currency" : null,
        "title" : "title",
        "type" : { }
      } ],
      "icon" : "icon",
      "changeState" : { },
      "extendedInfo" : [ {
        "amount" : 7.061401241503109,
        "currency" : { },
        "title" : "title"
      }, {
        "amount" : 7.061401241503109,
        "currency" : { },
        "title" : "title"
      } ],
      "currency" : "USD",
      "title" : "title",
      "totalFeesCurrency" : "USD",
      "totalFeesAmount" : 3.616076749251911
    } ]
  }
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional)
     - parameter eventsTake: (query)  (optional)

     - returns: RequestBuilder<DashboardTradingDetails> 
     */
    open class func getTradingDetailsWithRequestBuilder(authorization: String, currency: Currency_getTradingDetails? = nil, eventsTake: Int? = nil) -> RequestBuilder<DashboardTradingDetails> {
        let path = "/v2.0/dashboard/trading"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currency": currency?.rawValue, 
            "eventsTake": eventsTake?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DashboardTradingDetails>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
