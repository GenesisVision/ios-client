//
// InvestorAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class InvestorAPI {
    /**
     * enum for parameter currency
     */
    public enum Currency_v10InvestorFundsByIdInvestByAmountPost: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Investing into the fund.  Invest in GVT if currency is empty
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorFundsByIdInvestByAmountPost(id: UUID, amount: Double, authorization: String, currency: Currency_v10InvestorFundsByIdInvestByAmountPost? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10InvestorFundsByIdInvestByAmountPostWithRequestBuilder(id: id, amount: amount, authorization: authorization, currency: currency).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Investing into the fund.  Invest in GVT if currency is empty
     - POST /v1.0/investor/funds/{id}/invest/{amount}
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional, default to 100)

     - returns: RequestBuilder<Void> 
     */
    open class func v10InvestorFundsByIdInvestByAmountPostWithRequestBuilder(id: UUID, amount: Double, authorization: String, currency: Currency_v10InvestorFundsByIdInvestByAmountPost? = nil) -> RequestBuilder<Void> {
        var path = "/v1.0/investor/funds/{id}/invest/{amount}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{amount}", with: "\(amount)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currency": currency?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10InvestorFundsByIdInvestInfoByCurrencyGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Data for investing into the fund
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorFundsByIdInvestInfoByCurrencyGet(id: UUID, currency: Currency_v10InvestorFundsByIdInvestInfoByCurrencyGet, authorization: String, completion: @escaping ((_ data: FundInvestInfo?,_ error: Error?) -> Void)) {
        v10InvestorFundsByIdInvestInfoByCurrencyGetWithRequestBuilder(id: id, currency: currency, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Data for investing into the fund
     - GET /v1.0/investor/funds/{id}/invest/info/{currency}
     - examples: [{contentType=application/json, example={
  "entryFee" : 1.4658129805029452,
  "availableInWallet" : 0.8008281904610115,
  "isOwnProgram" : true,
  "rate" : 5.637376656633329,
  "title" : "title",
  "minInvestmentAmount" : 6.027456183070403,
  "gvCommission" : 5.962133916683182
}}]
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<FundInvestInfo> 
     */
    open class func v10InvestorFundsByIdInvestInfoByCurrencyGetWithRequestBuilder(id: UUID, currency: Currency_v10InvestorFundsByIdInvestInfoByCurrencyGet, authorization: String) -> RequestBuilder<FundInvestInfo> {
        var path = "/v1.0/investor/funds/{id}/invest/info/{currency}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{currency}", with: "\(currency.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FundInvestInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get program/fund requests
     
     - parameter id: (path)  
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorFundsByIdRequestsBySkipByTakeGet(id: UUID, skip: Int, take: Int, authorization: String, completion: @escaping ((_ data: ProgramRequests?,_ error: Error?) -> Void)) {
        v10InvestorFundsByIdRequestsBySkipByTakeGetWithRequestBuilder(id: id, skip: skip, take: take, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get program/fund requests
     - GET /v1.0/investor/funds/{id}/requests/{skip}/{take}
     - examples: [{contentType=application/json, example={
  "totalValue" : 6.519180951018382,
  "total" : 7,
  "requests" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeExit" : 7.143538047012306,
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "valueGvt" : 3.353193347011243,
    "fundWithdrawPercent" : 0.8851374739011653,
    "feeEntry" : 3.0937452626664474,
    "type" : "Invest",
    "title" : "title",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "value" : 6.704019297950036,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeExit" : 7.143538047012306,
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "valueGvt" : 3.353193347011243,
    "fundWithdrawPercent" : 0.8851374739011653,
    "feeEntry" : 3.0937452626664474,
    "type" : "Invest",
    "title" : "title",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "value" : 6.704019297950036,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  } ]
}}]
     
     - parameter id: (path)  
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProgramRequests> 
     */
    open class func v10InvestorFundsByIdRequestsBySkipByTakeGetWithRequestBuilder(id: UUID, skip: Int, take: Int, authorization: String) -> RequestBuilder<ProgramRequests> {
        var path = "/v1.0/investor/funds/{id}/requests/{skip}/{take}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{skip}", with: "\(skip)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{take}", with: "\(take)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramRequests>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10InvestorFundsByIdWithdrawByPercentPost: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Withdraw from fund. Percent is % of investor total money.  Withdraw in GVT if currency is empty
     
     - parameter id: (path)  
     - parameter percent: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorFundsByIdWithdrawByPercentPost(id: UUID, percent: Double, authorization: String, currency: Currency_v10InvestorFundsByIdWithdrawByPercentPost? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10InvestorFundsByIdWithdrawByPercentPostWithRequestBuilder(id: id, percent: percent, authorization: authorization, currency: currency).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Withdraw from fund. Percent is % of investor total money.  Withdraw in GVT if currency is empty
     - POST /v1.0/investor/funds/{id}/withdraw/{percent}
     
     - parameter id: (path)  
     - parameter percent: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional, default to 100)

     - returns: RequestBuilder<Void> 
     */
    open class func v10InvestorFundsByIdWithdrawByPercentPostWithRequestBuilder(id: UUID, percent: Double, authorization: String, currency: Currency_v10InvestorFundsByIdWithdrawByPercentPost? = nil) -> RequestBuilder<Void> {
        var path = "/v1.0/investor/funds/{id}/withdraw/{percent}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{percent}", with: "\(percent)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currency": currency?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10InvestorFundsByIdWithdrawInfoByCurrencyGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Data for withdrawal from fund
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: UUID, currency: Currency_v10InvestorFundsByIdWithdrawInfoByCurrencyGet, authorization: String, completion: @escaping ((_ data: FundWithdrawInfo?,_ error: Error?) -> Void)) {
        v10InvestorFundsByIdWithdrawInfoByCurrencyGetWithRequestBuilder(id: id, currency: currency, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Data for withdrawal from fund
     - GET /v1.0/investor/funds/{id}/withdraw/info/{currency}
     - examples: [{contentType=application/json, example={
  "exitFee" : 0.8008281904610115,
  "rate" : 1.4658129805029452,
  "title" : "title",
  "availableToWithdraw" : 6.027456183070403
}}]
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<FundWithdrawInfo> 
     */
    open class func v10InvestorFundsByIdWithdrawInfoByCurrencyGetWithRequestBuilder(id: UUID, currency: Currency_v10InvestorFundsByIdWithdrawInfoByCurrencyGet, authorization: String) -> RequestBuilder<FundWithdrawInfo> {
        var path = "/v1.0/investor/funds/{id}/withdraw/info/{currency}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{currency}", with: "\(currency.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FundWithdrawInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_v10InvestorFundsGet: String { 
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byDrawdownAsc = "ByDrawdownAsc"
        case byDrawdownDesc = "ByDrawdownDesc"
        case byInvestorsAsc = "ByInvestorsAsc"
        case byInvestorsDesc = "ByInvestorsDesc"
        case byNewAsc = "ByNewAsc"
        case byNewDesc = "ByNewDesc"
        case byTitleAsc = "ByTitleAsc"
        case byTitleDesc = "ByTitleDesc"
        case byBalanceAsc = "ByBalanceAsc"
        case byBalanceDesc = "ByBalanceDesc"
    }

    /**
     * enum for parameter currencySecondary
     */
    public enum CurrencySecondary_v10InvestorFundsGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     * enum for parameter actionStatus
     */
    public enum ActionStatus_v10InvestorFundsGet: String { 
        case pending = "Pending"
        case active = "Active"
        case investing = "Investing"
        case withdrawing = "Withdrawing"
        case ended = "Ended"
    }

    /**
     Dashboard funds list
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter currencySecondary: (query)  (optional)
     - parameter actionStatus: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorFundsGet(authorization: String, sorting: Sorting_v10InvestorFundsGet? = nil, from: Date? = nil, to: Date? = nil, chartPointsCount: Int? = nil, currencySecondary: CurrencySecondary_v10InvestorFundsGet? = nil, actionStatus: ActionStatus_v10InvestorFundsGet? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: FundsList?,_ error: Error?) -> Void)) {
        v10InvestorFundsGetWithRequestBuilder(authorization: authorization, sorting: sorting, from: from, to: to, chartPointsCount: chartPointsCount, currencySecondary: currencySecondary, actionStatus: actionStatus, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Dashboard funds list
     - GET /v1.0/investor/funds
     - examples: [{contentType=application/json, example={
  "total" : 6,
  "funds" : [ {
    "totalAssetsCount" : 7,
    "statistic" : {
      "balanceGVT" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "profitPercent" : 4.965218492984954,
      "drawdownPercent" : 5.025004791520295,
      "balanceSecondary" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "investorsCount" : 9
    },
    "color" : "color",
    "manager" : {
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    },
    "topFundAssets" : [ {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 1.1730742509559433
    }, {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 1.1730742509559433
    } ],
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "dashboardAssetsDetails" : {
      "share" : 2.3021358869347655
    },
    "personalDetails" : {
      "canCloseProgram" : true,
      "canWithdraw" : true,
      "canInvest" : true,
      "isFollowSignals" : true,
      "canClosePeriod" : true,
      "canReallocate" : true,
      "pendingOutput" : 3.5571952270680973,
      "hasNotifications" : true,
      "pendingInput" : 6.438423552598547,
      "isOwnProgram" : true,
      "possibleReallocationTime" : "2000-01-23T04:56:07.000+00:00",
      "isFinishing" : true,
      "canMakeSignalProvider" : true,
      "value" : 6.683562403749608,
      "profit" : 8.762042012749001,
      "withdrawPercent" : 9.369310271410669,
      "invested" : 9.018348186070783,
      "isFavorite" : true,
      "isInvested" : true,
      "status" : "Pending"
    },
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "status" : "None"
  }, {
    "totalAssetsCount" : 7,
    "statistic" : {
      "balanceGVT" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "profitPercent" : 4.965218492984954,
      "drawdownPercent" : 5.025004791520295,
      "balanceSecondary" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "investorsCount" : 9
    },
    "color" : "color",
    "manager" : {
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    },
    "topFundAssets" : [ {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 1.1730742509559433
    }, {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 1.1730742509559433
    } ],
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "dashboardAssetsDetails" : {
      "share" : 2.3021358869347655
    },
    "personalDetails" : {
      "canCloseProgram" : true,
      "canWithdraw" : true,
      "canInvest" : true,
      "isFollowSignals" : true,
      "canClosePeriod" : true,
      "canReallocate" : true,
      "pendingOutput" : 3.5571952270680973,
      "hasNotifications" : true,
      "pendingInput" : 6.438423552598547,
      "isOwnProgram" : true,
      "possibleReallocationTime" : "2000-01-23T04:56:07.000+00:00",
      "isFinishing" : true,
      "canMakeSignalProvider" : true,
      "value" : 6.683562403749608,
      "profit" : 8.762042012749001,
      "withdrawPercent" : 9.369310271410669,
      "invested" : 9.018348186070783,
      "isFavorite" : true,
      "isInvested" : true,
      "status" : "Pending"
    },
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "status" : "None"
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter currencySecondary: (query)  (optional)
     - parameter actionStatus: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<FundsList> 
     */
    open class func v10InvestorFundsGetWithRequestBuilder(authorization: String, sorting: Sorting_v10InvestorFundsGet? = nil, from: Date? = nil, to: Date? = nil, chartPointsCount: Int? = nil, currencySecondary: CurrencySecondary_v10InvestorFundsGet? = nil, actionStatus: ActionStatus_v10InvestorFundsGet? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<FundsList> {
        let path = "/v1.0/investor/funds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "Sorting": sorting?.rawValue, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
            "CurrencySecondary": currencySecondary?.rawValue, 
            "ActionStatus": actionStatus?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FundsList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter chartCurrency
     */
    public enum ChartCurrency_v10InvestorGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Summary dashboard info
     
     - parameter authorization: (header) JWT access token 
     - parameter chartCurrency: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter balancePoints: (query)  (optional)
     - parameter programsPoints: (query)  (optional)
     - parameter eventsTake: (query)  (optional)
     - parameter requestsSkip: (query)  (optional)
     - parameter requestsTake: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorGet(authorization: String, chartCurrency: ChartCurrency_v10InvestorGet? = nil, from: Date? = nil, to: Date? = nil, balancePoints: Int? = nil, programsPoints: Int? = nil, eventsTake: Int? = nil, requestsSkip: Int? = nil, requestsTake: Int? = nil, completion: @escaping ((_ data: DashboardSummary?,_ error: Error?) -> Void)) {
        v10InvestorGetWithRequestBuilder(authorization: authorization, chartCurrency: chartCurrency, from: from, to: to, balancePoints: balancePoints, programsPoints: programsPoints, eventsTake: eventsTake, requestsSkip: requestsSkip, requestsTake: requestsTake).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Summary dashboard info
     - GET /v1.0/investor
     - examples: [{contentType=application/json, example={
  "signalsCount" : 5,
  "programsCount" : 6,
  "fundsCount" : 6,
  "requests" : {
    "totalValue" : 6.519180951018382,
    "total" : 7,
    "requests" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "feeExit" : 7.143538047012306,
      "canCancelRequest" : true,
      "programType" : "Program",
      "color" : "color",
      "valueGvt" : 3.353193347011243,
      "fundWithdrawPercent" : 0.8851374739011653,
      "feeEntry" : 3.0937452626664474,
      "type" : "Invest",
      "title" : "title",
      "logo" : "logo",
      "currency" : "Undefined",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "value" : 6.704019297950036,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "status" : "New"
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "feeExit" : 7.143538047012306,
      "canCancelRequest" : true,
      "programType" : "Program",
      "color" : "color",
      "valueGvt" : 3.353193347011243,
      "fundWithdrawPercent" : 0.8851374739011653,
      "feeEntry" : 3.0937452626664474,
      "type" : "Invest",
      "title" : "title",
      "logo" : "logo",
      "currency" : "Undefined",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "value" : 6.704019297950036,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "status" : "New"
    } ]
  },
  "profileHeader" : {
    "totalBalance" : 3.5571952270680973,
    "pending" : 2.8841621266687802,
    "available" : 1.284659006116532,
    "notificationsCount" : 9,
    "kycConfirmed" : true,
    "availableGvt" : 6.438423552598547,
    "avatar" : "avatar",
    "investedGvt" : 9.018348186070783,
    "favoritesCount" : 6,
    "isNewUser" : true,
    "isTwoFactorEnabled" : true,
    "allowForex" : true,
    "name" : "name",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "userType" : "Investor",
    "totalBalanceGvt" : 8.762042012749001,
    "email" : "email",
    "invested" : 6.965117697638846
  },
  "chart" : {
    "investedProgramsInfo" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "topAssets" : [ {
        "color" : "color",
        "changePercent" : 1.4658129805029452,
        "changeValue" : 5.962133916683182,
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "avatar" : "avatar",
        "type" : "All",
        "title" : "title",
        "value" : 6.027456183070403
      }, {
        "color" : "color",
        "changePercent" : 1.4658129805029452,
        "changeValue" : 5.962133916683182,
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "avatar" : "avatar",
        "type" : "All",
        "title" : "title",
        "value" : 6.027456183070403
      } ],
      "value" : 0.8008281904610115,
      "otherAssetsValue" : {
        "amount" : 5,
        "changePercent" : 7.061401241503109,
        "changeValue" : 9.301444243932576,
        "value" : 2.3021358869347655
      }
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "topAssets" : [ {
        "color" : "color",
        "changePercent" : 1.4658129805029452,
        "changeValue" : 5.962133916683182,
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "avatar" : "avatar",
        "type" : "All",
        "title" : "title",
        "value" : 6.027456183070403
      }, {
        "color" : "color",
        "changePercent" : 1.4658129805029452,
        "changeValue" : 5.962133916683182,
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "avatar" : "avatar",
        "type" : "All",
        "title" : "title",
        "value" : 6.027456183070403
      } ],
      "value" : 0.8008281904610115,
      "otherAssetsValue" : {
        "amount" : 5,
        "changePercent" : 7.061401241503109,
        "changeValue" : 9.301444243932576,
        "value" : 2.3021358869347655
      }
    } ],
    "changeValueCurrency" : 1.0246457001441578,
    "valueCurrency" : 4.145608029883936,
    "balanceChart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "rate" : 1.4894159098541704,
    "changePercent" : 7.386281948385884,
    "changeValue" : 1.2315135367772556,
    "value" : 2.027123023002322
  },
  "events" : {
    "total" : 9,
    "events" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "feeSuccessPlatformCurrency" : "Undefined",
      "color" : "color",
      "description" : "description",
      "feeSuccessManager" : 1.1730742509559433,
      "title" : "title",
      "type" : "All",
      "url" : "url",
      "feeSuccessPlatform" : 4.965218492984954,
      "assetType" : "Program",
      "feeSuccessManagerCurrency" : "Undefined",
      "profitPercent" : 5.025004791520295,
      "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "logo" : "logo",
      "currency" : "Undefined",
      "value" : 6.84685269835264,
      "valueTotal" : 7.457744773683766
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "feeSuccessPlatformCurrency" : "Undefined",
      "color" : "color",
      "description" : "description",
      "feeSuccessManager" : 1.1730742509559433,
      "title" : "title",
      "type" : "All",
      "url" : "url",
      "feeSuccessPlatform" : 4.965218492984954,
      "assetType" : "Program",
      "feeSuccessManagerCurrency" : "Undefined",
      "profitPercent" : 5.025004791520295,
      "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "logo" : "logo",
      "currency" : "Undefined",
      "value" : 6.84685269835264,
      "valueTotal" : 7.457744773683766
    } ]
  }
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter chartCurrency: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter balancePoints: (query)  (optional)
     - parameter programsPoints: (query)  (optional)
     - parameter eventsTake: (query)  (optional)
     - parameter requestsSkip: (query)  (optional)
     - parameter requestsTake: (query)  (optional)

     - returns: RequestBuilder<DashboardSummary> 
     */
    open class func v10InvestorGetWithRequestBuilder(authorization: String, chartCurrency: ChartCurrency_v10InvestorGet? = nil, from: Date? = nil, to: Date? = nil, balancePoints: Int? = nil, programsPoints: Int? = nil, eventsTake: Int? = nil, requestsSkip: Int? = nil, requestsTake: Int? = nil) -> RequestBuilder<DashboardSummary> {
        let path = "/v1.0/investor"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "chartCurrency": chartCurrency?.rawValue, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "BalancePoints": balancePoints?.encodeToJSON(), 
            "ProgramsPoints": programsPoints?.encodeToJSON(), 
            "eventsTake": eventsTake?.encodeToJSON(), 
            "requestsSkip": requestsSkip?.encodeToJSON(), 
            "requestsTake": requestsTake?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DashboardSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10InvestorPortfolioChartGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Portfolio charts
     
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter balancePoints: (query)  (optional)
     - parameter programsPoints: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorPortfolioChartGet(authorization: String, currency: Currency_v10InvestorPortfolioChartGet? = nil, from: Date? = nil, to: Date? = nil, balancePoints: Int? = nil, programsPoints: Int? = nil, completion: @escaping ((_ data: DashboardChartValue?,_ error: Error?) -> Void)) {
        v10InvestorPortfolioChartGetWithRequestBuilder(authorization: authorization, currency: currency, from: from, to: to, balancePoints: balancePoints, programsPoints: programsPoints).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Portfolio charts
     - GET /v1.0/investor/portfolio/chart
     - examples: [{contentType=application/json, example={
  "investedProgramsInfo" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "topAssets" : [ {
      "color" : "color",
      "changePercent" : 1.4658129805029452,
      "changeValue" : 5.962133916683182,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "type" : "All",
      "title" : "title",
      "value" : 6.027456183070403
    }, {
      "color" : "color",
      "changePercent" : 1.4658129805029452,
      "changeValue" : 5.962133916683182,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "type" : "All",
      "title" : "title",
      "value" : 6.027456183070403
    } ],
    "value" : 0.8008281904610115,
    "otherAssetsValue" : {
      "amount" : 5,
      "changePercent" : 7.061401241503109,
      "changeValue" : 9.301444243932576,
      "value" : 2.3021358869347655
    }
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "topAssets" : [ {
      "color" : "color",
      "changePercent" : 1.4658129805029452,
      "changeValue" : 5.962133916683182,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "type" : "All",
      "title" : "title",
      "value" : 6.027456183070403
    }, {
      "color" : "color",
      "changePercent" : 1.4658129805029452,
      "changeValue" : 5.962133916683182,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "type" : "All",
      "title" : "title",
      "value" : 6.027456183070403
    } ],
    "value" : 0.8008281904610115,
    "otherAssetsValue" : {
      "amount" : 5,
      "changePercent" : 7.061401241503109,
      "changeValue" : 9.301444243932576,
      "value" : 2.3021358869347655
    }
  } ],
  "changeValueCurrency" : 1.0246457001441578,
  "valueCurrency" : 4.145608029883936,
  "balanceChart" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "value" : 3.616076749251911
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "value" : 3.616076749251911
  } ],
  "rate" : 1.4894159098541704,
  "changePercent" : 7.386281948385884,
  "changeValue" : 1.2315135367772556,
  "value" : 2.027123023002322
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter balancePoints: (query)  (optional)
     - parameter programsPoints: (query)  (optional)

     - returns: RequestBuilder<DashboardChartValue> 
     */
    open class func v10InvestorPortfolioChartGetWithRequestBuilder(authorization: String, currency: Currency_v10InvestorPortfolioChartGet? = nil, from: Date? = nil, to: Date? = nil, balancePoints: Int? = nil, programsPoints: Int? = nil) -> RequestBuilder<DashboardChartValue> {
        let path = "/v1.0/investor/portfolio/chart"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currency": currency?.rawValue, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "BalancePoints": balancePoints?.encodeToJSON(), 
            "ProgramsPoints": programsPoints?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DashboardChartValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_v10InvestorPortfolioEventsGet: String { 
        case all = "All"
        case invest = "Invest"
        case withdraw = "Withdraw"
        case profit = "Profit"
        case loss = "Loss"
        case reinvest = "Reinvest"
        case canceled = "Canceled"
        case ended = "Ended"
        case withdrawByStopOut = "WithdrawByStopOut"
    }

    /**
     * enum for parameter assetType
     */
    public enum AssetType_v10InvestorPortfolioEventsGet: String { 
        case all = "All"
        case program = "Program"
        case fund = "Fund"
    }

    /**
     Portfolio events
     
     - parameter authorization: (header) JWT access token 
     - parameter assetId: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter assetType: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorPortfolioEventsGet(authorization: String, assetId: UUID? = nil, from: Date? = nil, to: Date? = nil, type: ModelType_v10InvestorPortfolioEventsGet? = nil, assetType: AssetType_v10InvestorPortfolioEventsGet? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: DashboardPortfolioEvents?,_ error: Error?) -> Void)) {
        v10InvestorPortfolioEventsGetWithRequestBuilder(authorization: authorization, assetId: assetId, from: from, to: to, type: type, assetType: assetType, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Portfolio events
     - GET /v1.0/investor/portfolio/events
     - examples: [{contentType=application/json, example={
  "total" : 9,
  "events" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeSuccessPlatformCurrency" : "Undefined",
    "color" : "color",
    "description" : "description",
    "feeSuccessManager" : 1.1730742509559433,
    "title" : "title",
    "type" : "All",
    "url" : "url",
    "feeSuccessPlatform" : 4.965218492984954,
    "assetType" : "Program",
    "feeSuccessManagerCurrency" : "Undefined",
    "profitPercent" : 5.025004791520295,
    "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "logo" : "logo",
    "currency" : "Undefined",
    "value" : 6.84685269835264,
    "valueTotal" : 7.457744773683766
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeSuccessPlatformCurrency" : "Undefined",
    "color" : "color",
    "description" : "description",
    "feeSuccessManager" : 1.1730742509559433,
    "title" : "title",
    "type" : "All",
    "url" : "url",
    "feeSuccessPlatform" : 4.965218492984954,
    "assetType" : "Program",
    "feeSuccessManagerCurrency" : "Undefined",
    "profitPercent" : 5.025004791520295,
    "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "logo" : "logo",
    "currency" : "Undefined",
    "value" : 6.84685269835264,
    "valueTotal" : 7.457744773683766
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter assetId: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter assetType: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<DashboardPortfolioEvents> 
     */
    open class func v10InvestorPortfolioEventsGetWithRequestBuilder(authorization: String, assetId: UUID? = nil, from: Date? = nil, to: Date? = nil, type: ModelType_v10InvestorPortfolioEventsGet? = nil, assetType: AssetType_v10InvestorPortfolioEventsGet? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<DashboardPortfolioEvents> {
        let path = "/v1.0/investor/portfolio/events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "AssetId": assetId, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "Type": type?.rawValue, 
            "AssetType": assetType?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DashboardPortfolioEvents>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10InvestorProgramsByIdInvestByAmountPost: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Investing into the program.  Invest in GVT if currency is empty
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorProgramsByIdInvestByAmountPost(id: UUID, amount: Double, authorization: String, currency: Currency_v10InvestorProgramsByIdInvestByAmountPost? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10InvestorProgramsByIdInvestByAmountPostWithRequestBuilder(id: id, amount: amount, authorization: authorization, currency: currency).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Investing into the program.  Invest in GVT if currency is empty
     - POST /v1.0/investor/programs/{id}/invest/{amount}
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional, default to 100)

     - returns: RequestBuilder<Void> 
     */
    open class func v10InvestorProgramsByIdInvestByAmountPostWithRequestBuilder(id: UUID, amount: Double, authorization: String, currency: Currency_v10InvestorProgramsByIdInvestByAmountPost? = nil) -> RequestBuilder<Void> {
        var path = "/v1.0/investor/programs/{id}/invest/{amount}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{amount}", with: "\(amount)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currency": currency?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10InvestorProgramsByIdInvestInfoByCurrencyGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Data for investing into the program
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: UUID, currency: Currency_v10InvestorProgramsByIdInvestInfoByCurrencyGet, authorization: String, completion: @escaping ((_ data: ProgramInvestInfo?,_ error: Error?) -> Void)) {
        v10InvestorProgramsByIdInvestInfoByCurrencyGetWithRequestBuilder(id: id, currency: currency, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Data for investing into the program
     - GET /v1.0/investor/programs/{id}/invest/info/{currency}
     - examples: [{contentType=application/json, example={
  "entryFee" : 5.637376656633329,
  "availableInWallet" : 1.4658129805029452,
  "isOwnProgram" : true,
  "availableToInvestBase" : 6.027456183070403,
  "rate" : 7.061401241503109,
  "periodEnds" : "2000-01-23T04:56:07.000+00:00",
  "availableToInvest" : 0.8008281904610115,
  "title" : "title",
  "minInvestmentAmount" : 5.962133916683182,
  "gvCommission" : 2.3021358869347655
}}]
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProgramInvestInfo> 
     */
    open class func v10InvestorProgramsByIdInvestInfoByCurrencyGetWithRequestBuilder(id: UUID, currency: Currency_v10InvestorProgramsByIdInvestInfoByCurrencyGet, authorization: String) -> RequestBuilder<ProgramInvestInfo> {
        var path = "/v1.0/investor/programs/{id}/invest/info/{currency}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{currency}", with: "\(currency.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramInvestInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Disable reinvesting
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorProgramsByIdReinvestOffPost(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        v10InvestorProgramsByIdReinvestOffPostWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Disable reinvesting
     - POST /v1.0/investor/programs/{id}/reinvest/off
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func v10InvestorProgramsByIdReinvestOffPostWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v1.0/investor/programs/{id}/reinvest/off"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Enable reinvesting
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorProgramsByIdReinvestOnPost(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        v10InvestorProgramsByIdReinvestOnPostWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Enable reinvesting
     - POST /v1.0/investor/programs/{id}/reinvest/on
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func v10InvestorProgramsByIdReinvestOnPostWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v1.0/investor/programs/{id}/reinvest/on"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get program/fund requests
     
     - parameter id: (path)  
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: UUID, skip: Int, take: Int, authorization: String, completion: @escaping ((_ data: ProgramRequests?,_ error: Error?) -> Void)) {
        v10InvestorProgramsByIdRequestsBySkipByTakeGetWithRequestBuilder(id: id, skip: skip, take: take, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get program/fund requests
     - GET /v1.0/investor/programs/{id}/requests/{skip}/{take}
     - examples: [{contentType=application/json, example={
  "totalValue" : 6.519180951018382,
  "total" : 7,
  "requests" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeExit" : 7.143538047012306,
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "valueGvt" : 3.353193347011243,
    "fundWithdrawPercent" : 0.8851374739011653,
    "feeEntry" : 3.0937452626664474,
    "type" : "Invest",
    "title" : "title",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "value" : 6.704019297950036,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeExit" : 7.143538047012306,
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "valueGvt" : 3.353193347011243,
    "fundWithdrawPercent" : 0.8851374739011653,
    "feeEntry" : 3.0937452626664474,
    "type" : "Invest",
    "title" : "title",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "value" : 6.704019297950036,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  } ]
}}]
     
     - parameter id: (path)  
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProgramRequests> 
     */
    open class func v10InvestorProgramsByIdRequestsBySkipByTakeGetWithRequestBuilder(id: UUID, skip: Int, take: Int, authorization: String) -> RequestBuilder<ProgramRequests> {
        var path = "/v1.0/investor/programs/{id}/requests/{skip}/{take}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{skip}", with: "\(skip)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{take}", with: "\(take)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramRequests>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Withdraw from investment program in GVT
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorProgramsByIdWithdrawByAmountPost(id: UUID, amount: Double, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        v10InvestorProgramsByIdWithdrawByAmountPostWithRequestBuilder(id: id, amount: amount, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Withdraw from investment program in GVT
     - POST /v1.0/investor/programs/{id}/withdraw/{amount}
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func v10InvestorProgramsByIdWithdrawByAmountPostWithRequestBuilder(id: UUID, amount: Double, authorization: String) -> RequestBuilder<Void> {
        var path = "/v1.0/investor/programs/{id}/withdraw/{amount}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{amount}", with: "\(amount)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10InvestorProgramsByIdWithdrawInfoByCurrencyGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Data for withdrawal from investment program
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: UUID, currency: Currency_v10InvestorProgramsByIdWithdrawInfoByCurrencyGet, authorization: String, completion: @escaping ((_ data: ProgramWithdrawInfo?,_ error: Error?) -> Void)) {
        v10InvestorProgramsByIdWithdrawInfoByCurrencyGetWithRequestBuilder(id: id, currency: currency, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Data for withdrawal from investment program
     - GET /v1.0/investor/programs/{id}/withdraw/info/{currency}
     - examples: [{contentType=application/json, example={
  "rate" : 6.027456183070403,
  "periodEnds" : "2000-01-23T04:56:07.000+00:00",
  "title" : "title",
  "availableToWithdraw" : 0.8008281904610115
}}]
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProgramWithdrawInfo> 
     */
    open class func v10InvestorProgramsByIdWithdrawInfoByCurrencyGetWithRequestBuilder(id: UUID, currency: Currency_v10InvestorProgramsByIdWithdrawInfoByCurrencyGet, authorization: String) -> RequestBuilder<ProgramWithdrawInfo> {
        var path = "/v1.0/investor/programs/{id}/withdraw/info/{currency}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{currency}", with: "\(currency.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramWithdrawInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Withdraw from investment program in program currency
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorProgramsByIdWithdrawMultiByAmountPost(id: UUID, amount: Double, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        v10InvestorProgramsByIdWithdrawMultiByAmountPostWithRequestBuilder(id: id, amount: amount, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Withdraw from investment program in program currency
     - POST /v1.0/investor/programs/{id}/withdraw/multi/{amount}
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func v10InvestorProgramsByIdWithdrawMultiByAmountPostWithRequestBuilder(id: UUID, amount: Double, authorization: String) -> RequestBuilder<Void> {
        var path = "/v1.0/investor/programs/{id}/withdraw/multi/{amount}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{amount}", with: "\(amount)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_v10InvestorProgramsGet: String { 
        case byLevelAsc = "ByLevelAsc"
        case byLevelDesc = "ByLevelDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byDrawdownAsc = "ByDrawdownAsc"
        case byDrawdownDesc = "ByDrawdownDesc"
        case byTradesAsc = "ByTradesAsc"
        case byTradesDesc = "ByTradesDesc"
        case byInvestorsAsc = "ByInvestorsAsc"
        case byInvestorsDesc = "ByInvestorsDesc"
        case byNewDesc = "ByNewDesc"
        case byNewAsc = "ByNewAsc"
        case byEndOfPeriodAsc = "ByEndOfPeriodAsc"
        case byEndOfPeriodDesc = "ByEndOfPeriodDesc"
        case byTitleAsc = "ByTitleAsc"
        case byTitleDesc = "ByTitleDesc"
        case byBalanceAsc = "ByBalanceAsc"
        case byBalanceDesc = "ByBalanceDesc"
        case byCurrDesc = "ByCurrDesc"
        case byCurrAsc = "ByCurrAsc"
    }

    /**
     * enum for parameter currencySecondary
     */
    public enum CurrencySecondary_v10InvestorProgramsGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     * enum for parameter actionStatus
     */
    public enum ActionStatus_v10InvestorProgramsGet: String { 
        case pending = "Pending"
        case active = "Active"
        case investing = "Investing"
        case withdrawing = "Withdrawing"
        case ended = "Ended"
    }

    /**
     Dashboard program list
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter currencySecondary: (query)  (optional)
     - parameter actionStatus: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorProgramsGet(authorization: String, sorting: Sorting_v10InvestorProgramsGet? = nil, from: Date? = nil, to: Date? = nil, chartPointsCount: Int? = nil, currencySecondary: CurrencySecondary_v10InvestorProgramsGet? = nil, actionStatus: ActionStatus_v10InvestorProgramsGet? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ProgramsList?,_ error: Error?) -> Void)) {
        v10InvestorProgramsGetWithRequestBuilder(authorization: authorization, sorting: sorting, from: from, to: to, chartPointsCount: chartPointsCount, currencySecondary: currencySecondary, actionStatus: actionStatus, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Dashboard program list
     - GET /v1.0/investor/programs
     - examples: [{contentType=application/json, example={
  "total" : 6,
  "programs" : [ {
    "periodDuration" : 6,
    "statistic" : {
      "balanceBase" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "tradesCount" : 7,
      "balanceGVT" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "profitPercent" : 1.4658129805029452,
      "profitValue" : 5.962133916683182,
      "drawdownPercent" : 5.637376656633329,
      "currentValue" : 6.027456183070403,
      "balanceSecondary" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "investorsCount" : 2
    },
    "color" : "color",
    "manager" : {
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    },
    "level" : 0,
    "stopOutLevel" : 1.4658129805029452,
    "availableInvestment" : 5.962133916683182,
    "rating" : {
      "rating" : 7,
      "canLevelUp" : true,
      "topPercent" : 3.616076749251911,
      "profit" : 9.301444243932576
    },
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "availableInvestmentBase" : 5.637376656633329,
    "url" : "url",
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "dashboardAssetsDetails" : {
      "share" : 2.3021358869347655
    },
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "personalDetails" : {
      "canCloseProgram" : true,
      "canWithdraw" : true,
      "canInvest" : true,
      "notificationAvailableToInvestId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "isFollowSignals" : true,
      "login" : "login",
      "showTwoFactorButton" : true,
      "canClosePeriod" : true,
      "pendingOutput" : 1.4894159098541704,
      "hasNotifications" : true,
      "pendingInput" : 1.0246457001441578,
      "isOwnProgram" : true,
      "isReinvest" : true,
      "gvtValue" : 2.027123023002322,
      "isFinishing" : true,
      "signalSubscription" : {
        "mode" : "ByBalance",
        "hasSignalAccount" : true,
        "fixedCurrency" : "Undefined",
        "fixedVolume" : 4.145608029883936,
        "openTolerancePercent" : 2.027123023002322,
        "hasActiveSubscription" : true,
        "percent" : 3.616076749251911
      },
      "canMakeSignalProvider" : true,
      "value" : 4.145608029883936,
      "profit" : 7.386281948385884,
      "invested" : 1.2315135367772556,
      "isFavorite" : true,
      "isInvested" : true,
      "status" : "Pending"
    },
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "status" : "None"
  }, {
    "periodDuration" : 6,
    "statistic" : {
      "balanceBase" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "tradesCount" : 7,
      "balanceGVT" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "profitPercent" : 1.4658129805029452,
      "profitValue" : 5.962133916683182,
      "drawdownPercent" : 5.637376656633329,
      "currentValue" : 6.027456183070403,
      "balanceSecondary" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "investorsCount" : 2
    },
    "color" : "color",
    "manager" : {
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    },
    "level" : 0,
    "stopOutLevel" : 1.4658129805029452,
    "availableInvestment" : 5.962133916683182,
    "rating" : {
      "rating" : 7,
      "canLevelUp" : true,
      "topPercent" : 3.616076749251911,
      "profit" : 9.301444243932576
    },
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "availableInvestmentBase" : 5.637376656633329,
    "url" : "url",
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "dashboardAssetsDetails" : {
      "share" : 2.3021358869347655
    },
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "personalDetails" : {
      "canCloseProgram" : true,
      "canWithdraw" : true,
      "canInvest" : true,
      "notificationAvailableToInvestId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "isFollowSignals" : true,
      "login" : "login",
      "showTwoFactorButton" : true,
      "canClosePeriod" : true,
      "pendingOutput" : 1.4894159098541704,
      "hasNotifications" : true,
      "pendingInput" : 1.0246457001441578,
      "isOwnProgram" : true,
      "isReinvest" : true,
      "gvtValue" : 2.027123023002322,
      "isFinishing" : true,
      "signalSubscription" : {
        "mode" : "ByBalance",
        "hasSignalAccount" : true,
        "fixedCurrency" : "Undefined",
        "fixedVolume" : 4.145608029883936,
        "openTolerancePercent" : 2.027123023002322,
        "hasActiveSubscription" : true,
        "percent" : 3.616076749251911
      },
      "canMakeSignalProvider" : true,
      "value" : 4.145608029883936,
      "profit" : 7.386281948385884,
      "invested" : 1.2315135367772556,
      "isFavorite" : true,
      "isInvested" : true,
      "status" : "Pending"
    },
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "status" : "None"
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter currencySecondary: (query)  (optional)
     - parameter actionStatus: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ProgramsList> 
     */
    open class func v10InvestorProgramsGetWithRequestBuilder(authorization: String, sorting: Sorting_v10InvestorProgramsGet? = nil, from: Date? = nil, to: Date? = nil, chartPointsCount: Int? = nil, currencySecondary: CurrencySecondary_v10InvestorProgramsGet? = nil, actionStatus: ActionStatus_v10InvestorProgramsGet? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ProgramsList> {
        let path = "/v1.0/investor/programs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "Sorting": sorting?.rawValue, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
            "CurrencySecondary": currencySecondary?.rawValue, 
            "ActionStatus": actionStatus?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramsList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Cancel investment program request
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorProgramsRequestsByIdCancelPost(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        v10InvestorProgramsRequestsByIdCancelPostWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Cancel investment program request
     - POST /v1.0/investor/programs/requests/{id}/cancel
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func v10InvestorProgramsRequestsByIdCancelPostWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v1.0/investor/programs/requests/{id}/cancel"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get all requests
     
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorRequestsBySkipByTakeGet(skip: Int, take: Int, authorization: String, completion: @escaping ((_ data: ProgramRequests?,_ error: Error?) -> Void)) {
        v10InvestorRequestsBySkipByTakeGetWithRequestBuilder(skip: skip, take: take, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get all requests
     - GET /v1.0/investor/requests/{skip}/{take}
     - examples: [{contentType=application/json, example={
  "totalValue" : 6.519180951018382,
  "total" : 7,
  "requests" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeExit" : 7.143538047012306,
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "valueGvt" : 3.353193347011243,
    "fundWithdrawPercent" : 0.8851374739011653,
    "feeEntry" : 3.0937452626664474,
    "type" : "Invest",
    "title" : "title",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "value" : 6.704019297950036,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeExit" : 7.143538047012306,
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "valueGvt" : 3.353193347011243,
    "fundWithdrawPercent" : 0.8851374739011653,
    "feeEntry" : 3.0937452626664474,
    "type" : "Invest",
    "title" : "title",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "value" : 6.704019297950036,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  } ]
}}]
     
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProgramRequests> 
     */
    open class func v10InvestorRequestsBySkipByTakeGetWithRequestBuilder(skip: Int, take: Int, authorization: String) -> RequestBuilder<ProgramRequests> {
        var path = "/v1.0/investor/requests/{skip}/{take}"
        path = path.replacingOccurrences(of: "{skip}", with: "\(skip)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{take}", with: "\(take)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramRequests>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_v10InvestorSignalsGet: String { 
        case byLevelAsc = "ByLevelAsc"
        case byLevelDesc = "ByLevelDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byDrawdownAsc = "ByDrawdownAsc"
        case byDrawdownDesc = "ByDrawdownDesc"
        case byTradesAsc = "ByTradesAsc"
        case byTradesDesc = "ByTradesDesc"
        case byInvestorsAsc = "ByInvestorsAsc"
        case byInvestorsDesc = "ByInvestorsDesc"
        case byNewDesc = "ByNewDesc"
        case byNewAsc = "ByNewAsc"
        case byEndOfPeriodAsc = "ByEndOfPeriodAsc"
        case byEndOfPeriodDesc = "ByEndOfPeriodDesc"
        case byTitleAsc = "ByTitleAsc"
        case byTitleDesc = "ByTitleDesc"
        case byBalanceAsc = "ByBalanceAsc"
        case byBalanceDesc = "ByBalanceDesc"
        case byCurrDesc = "ByCurrDesc"
        case byCurrAsc = "ByCurrAsc"
    }

    /**
     * enum for parameter currencySecondary
     */
    public enum CurrencySecondary_v10InvestorSignalsGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     * enum for parameter actionStatus
     */
    public enum ActionStatus_v10InvestorSignalsGet: String { 
        case pending = "Pending"
        case active = "Active"
        case investing = "Investing"
        case withdrawing = "Withdrawing"
        case ended = "Ended"
    }

    /**
     Dashboard signal providers list
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter currencySecondary: (query)  (optional)
     - parameter actionStatus: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10InvestorSignalsGet(authorization: String, sorting: Sorting_v10InvestorSignalsGet? = nil, from: Date? = nil, to: Date? = nil, chartPointsCount: Int? = nil, currencySecondary: CurrencySecondary_v10InvestorSignalsGet? = nil, actionStatus: ActionStatus_v10InvestorSignalsGet? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: SignalsList?,_ error: Error?) -> Void)) {
        v10InvestorSignalsGetWithRequestBuilder(authorization: authorization, sorting: sorting, from: from, to: to, chartPointsCount: chartPointsCount, currencySecondary: currencySecondary, actionStatus: actionStatus, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Dashboard signal providers list
     - GET /v1.0/investor/signals
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "programs" : [ {
    "statistic" : {
      "balanceBase" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "tradesCount" : 7,
      "balanceGVT" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "profitPercent" : 1.4658129805029452,
      "profitValue" : 5.962133916683182,
      "drawdownPercent" : 5.637376656633329,
      "currentValue" : 6.027456183070403,
      "balanceSecondary" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "investorsCount" : 2
    },
    "color" : "color",
    "manager" : {
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    },
    "level" : 7,
    "subscribers" : 1,
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "personalDetails" : {
      "tradesCount" : 9,
      "subscriptionDate" : "2000-01-23T04:56:07.000+00:00",
      "signalSubscription" : {
        "mode" : "ByBalance",
        "hasSignalAccount" : true,
        "fixedCurrency" : "Undefined",
        "fixedVolume" : 4.145608029883936,
        "openTolerancePercent" : 2.027123023002322,
        "hasActiveSubscription" : true,
        "percent" : 3.616076749251911
      }
    },
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "status" : "None"
  }, {
    "statistic" : {
      "balanceBase" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "tradesCount" : 7,
      "balanceGVT" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "profitPercent" : 1.4658129805029452,
      "profitValue" : 5.962133916683182,
      "drawdownPercent" : 5.637376656633329,
      "currentValue" : 6.027456183070403,
      "balanceSecondary" : {
        "amount" : 0.8008281904610115,
        "currency" : "Undefined"
      },
      "investorsCount" : 2
    },
    "color" : "color",
    "manager" : {
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    },
    "level" : 7,
    "subscribers" : 1,
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "personalDetails" : {
      "tradesCount" : 9,
      "subscriptionDate" : "2000-01-23T04:56:07.000+00:00",
      "signalSubscription" : {
        "mode" : "ByBalance",
        "hasSignalAccount" : true,
        "fixedCurrency" : "Undefined",
        "fixedVolume" : 4.145608029883936,
        "openTolerancePercent" : 2.027123023002322,
        "hasActiveSubscription" : true,
        "percent" : 3.616076749251911
      }
    },
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "status" : "None"
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter currencySecondary: (query)  (optional)
     - parameter actionStatus: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<SignalsList> 
     */
    open class func v10InvestorSignalsGetWithRequestBuilder(authorization: String, sorting: Sorting_v10InvestorSignalsGet? = nil, from: Date? = nil, to: Date? = nil, chartPointsCount: Int? = nil, currencySecondary: CurrencySecondary_v10InvestorSignalsGet? = nil, actionStatus: ActionStatus_v10InvestorSignalsGet? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<SignalsList> {
        let path = "/v1.0/investor/signals"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "Sorting": sorting?.rawValue, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
            "CurrencySecondary": currencySecondary?.rawValue, 
            "ActionStatus": actionStatus?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SignalsList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
