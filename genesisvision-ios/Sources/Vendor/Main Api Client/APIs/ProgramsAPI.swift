//
// ProgramsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ProgramsAPI {
    /**
     Add to favorites
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addToFavorites(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addToFavoritesWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add to favorites
     - POST /v2.0/programs/{id}/favorite/add
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func addToFavoritesWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/programs/{id}/favorite/add"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Manually close trade by symbol for asset
     - parameter _id: (path)       - parameter symbol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeAssetTrade(_id: UUID, symbol: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        closeAssetTradeWithRequestBuilder(_id: _id, symbol: symbol).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Manually close trade by symbol for asset
     - POST /v2.0/programs/{id}/trades/close
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter symbol: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func closeAssetTradeWithRequestBuilder(_id: UUID, symbol: String? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/programs/{id}/trades/close"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "Symbol": symbol
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Export daily program analytics
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter numberMin: (query)  (optional)     - parameter numberMax: (query)  (optional)     - parameter status: (query)  (optional)     - parameter timeframe: (query)  (optional)     - parameter showInvestorReport: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportDailyProgramAnalytics(_id: String, dateFrom: Date? = nil, dateTo: Date? = nil, numberMin: Int? = nil, numberMax: Int? = nil, status: PeriodStatus? = nil, timeframe: Timeframe? = nil, showInvestorReport: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        exportDailyProgramAnalyticsWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, numberMin: numberMin, numberMax: numberMax, status: status, timeframe: timeframe, showInvestorReport: showInvestorReport, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Export daily program analytics
     - GET /v2.0/programs/{id}/periods/export/analytics
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter numberMin: (query)  (optional)     - parameter numberMax: (query)  (optional)     - parameter status: (query)  (optional)     - parameter timeframe: (query)  (optional)     - parameter showInvestorReport: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<Data> 
     */
    open class func exportDailyProgramAnalyticsWithRequestBuilder(_id: String, dateFrom: Date? = nil, dateTo: Date? = nil, numberMin: Int? = nil, numberMax: Int? = nil, status: PeriodStatus? = nil, timeframe: Timeframe? = nil, showInvestorReport: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<Data> {
        var path = "/v2.0/programs/{id}/periods/export/analytics"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "NumberMin": numberMin?.encodeToJSON(), 
                        "NumberMax": numberMax?.encodeToJSON(), 
                        "Status": status, 
                        "Timeframe": timeframe, 
                        "ShowInvestorReport": showInvestorReport, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Export daily program financial statistic
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter numberMin: (query)  (optional)     - parameter numberMax: (query)  (optional)     - parameter status: (query)  (optional)     - parameter timeframe: (query)  (optional)     - parameter showInvestorReport: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportDailyProgramFinancialStatistic(_id: String, dateFrom: Date? = nil, dateTo: Date? = nil, numberMin: Int? = nil, numberMax: Int? = nil, status: PeriodStatus? = nil, timeframe: Timeframe? = nil, showInvestorReport: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        exportDailyProgramFinancialStatisticWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, numberMin: numberMin, numberMax: numberMax, status: status, timeframe: timeframe, showInvestorReport: showInvestorReport, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Export daily program financial statistic
     - GET /v2.0/programs/{id}/periods/export/financialstatistic
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter numberMin: (query)  (optional)     - parameter numberMax: (query)  (optional)     - parameter status: (query)  (optional)     - parameter timeframe: (query)  (optional)     - parameter showInvestorReport: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<Data> 
     */
    open class func exportDailyProgramFinancialStatisticWithRequestBuilder(_id: String, dateFrom: Date? = nil, dateTo: Date? = nil, numberMin: Int? = nil, numberMax: Int? = nil, status: PeriodStatus? = nil, timeframe: Timeframe? = nil, showInvestorReport: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<Data> {
        var path = "/v2.0/programs/{id}/periods/export/financialstatistic"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "NumberMin": numberMin?.encodeToJSON(), 
                        "NumberMax": numberMax?.encodeToJSON(), 
                        "Status": status, 
                        "Timeframe": timeframe, 
                        "ShowInvestorReport": showInvestorReport, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Export daily program investor report
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter numberMin: (query)  (optional)     - parameter numberMax: (query)  (optional)     - parameter status: (query)  (optional)     - parameter timeframe: (query)  (optional)     - parameter showInvestorReport: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportDailyProgramInvestorReport(_id: String, dateFrom: Date? = nil, dateTo: Date? = nil, numberMin: Int? = nil, numberMax: Int? = nil, status: PeriodStatus? = nil, timeframe: Timeframe? = nil, showInvestorReport: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        exportDailyProgramInvestorReportWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, numberMin: numberMin, numberMax: numberMax, status: status, timeframe: timeframe, showInvestorReport: showInvestorReport, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Export daily program investor report
     - GET /v2.0/programs/{id}/periods/export/investorreport
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter numberMin: (query)  (optional)     - parameter numberMax: (query)  (optional)     - parameter status: (query)  (optional)     - parameter timeframe: (query)  (optional)     - parameter showInvestorReport: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<Data> 
     */
    open class func exportDailyProgramInvestorReportWithRequestBuilder(_id: String, dateFrom: Date? = nil, dateTo: Date? = nil, numberMin: Int? = nil, numberMax: Int? = nil, status: PeriodStatus? = nil, timeframe: Timeframe? = nil, showInvestorReport: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<Data> {
        var path = "/v2.0/programs/{id}/periods/export/investorreport"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "NumberMin": numberMin?.encodeToJSON(), 
                        "NumberMax": numberMax?.encodeToJSON(), 
                        "Status": status, 
                        "Timeframe": timeframe, 
                        "ShowInvestorReport": showInvestorReport, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Export periods
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter numberMin: (query)  (optional)     - parameter numberMax: (query)  (optional)     - parameter status: (query)  (optional)     - parameter timeframe: (query)  (optional)     - parameter showInvestorReport: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportProgramPeriods(_id: String, dateFrom: Date? = nil, dateTo: Date? = nil, numberMin: Int? = nil, numberMax: Int? = nil, status: PeriodStatus? = nil, timeframe: Timeframe? = nil, showInvestorReport: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        exportProgramPeriodsWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, numberMin: numberMin, numberMax: numberMax, status: status, timeframe: timeframe, showInvestorReport: showInvestorReport, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Export periods
     - GET /v2.0/programs/{id}/periods/export
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter numberMin: (query)  (optional)     - parameter numberMax: (query)  (optional)     - parameter status: (query)  (optional)     - parameter timeframe: (query)  (optional)     - parameter showInvestorReport: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<Data> 
     */
    open class func exportProgramPeriodsWithRequestBuilder(_id: String, dateFrom: Date? = nil, dateTo: Date? = nil, numberMin: Int? = nil, numberMax: Int? = nil, status: PeriodStatus? = nil, timeframe: Timeframe? = nil, showInvestorReport: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<Data> {
        var path = "/v2.0/programs/{id}/periods/export"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "NumberMin": numberMin?.encodeToJSON(), 
                        "NumberMax": numberMax?.encodeToJSON(), 
                        "Status": status, 
                        "Timeframe": timeframe, 
                        "ShowInvestorReport": showInvestorReport, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Export period financial statistic
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter numberMin: (query)  (optional)     - parameter numberMax: (query)  (optional)     - parameter status: (query)  (optional)     - parameter timeframe: (query)  (optional)     - parameter showInvestorReport: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportProgramPeriodsFinStatistic(_id: String, dateFrom: Date? = nil, dateTo: Date? = nil, numberMin: Int? = nil, numberMax: Int? = nil, status: PeriodStatus? = nil, timeframe: Timeframe? = nil, showInvestorReport: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        exportProgramPeriodsFinStatisticWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, numberMin: numberMin, numberMax: numberMax, status: status, timeframe: timeframe, showInvestorReport: showInvestorReport, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Export period financial statistic
     - GET /v2.0/programs/{id}/periods/export/statistic
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter numberMin: (query)  (optional)     - parameter numberMax: (query)  (optional)     - parameter status: (query)  (optional)     - parameter timeframe: (query)  (optional)     - parameter showInvestorReport: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<Data> 
     */
    open class func exportProgramPeriodsFinStatisticWithRequestBuilder(_id: String, dateFrom: Date? = nil, dateTo: Date? = nil, numberMin: Int? = nil, numberMax: Int? = nil, status: PeriodStatus? = nil, timeframe: Timeframe? = nil, showInvestorReport: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<Data> {
        var path = "/v2.0/programs/{id}/periods/export/statistic"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "NumberMin": numberMin?.encodeToJSON(), 
                        "NumberMax": numberMax?.encodeToJSON(), 
                        "Status": status, 
                        "Timeframe": timeframe, 
                        "ShowInvestorReport": showInvestorReport, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Export trade history
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter sorting: (query)  (optional)     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter isFollow: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportProgramTrades(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: TradeSorting? = nil, accountId: UUID? = nil, accountCurrency: Currency? = nil, isFollow: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        exportProgramTradesWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, symbol: symbol, sorting: sorting, accountId: accountId, accountCurrency: accountCurrency, isFollow: isFollow, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Export trade history
     - GET /v2.0/programs/{id}/trades/export
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter sorting: (query)  (optional)     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter isFollow: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<Data> 
     */
    open class func exportProgramTradesWithRequestBuilder(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: TradeSorting? = nil, accountId: UUID? = nil, accountCurrency: Currency? = nil, isFollow: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<Data> {
        var path = "/v2.0/programs/{id}/trades/export"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "Symbol": symbol, 
                        "Sorting": sorting, 
                        "AccountId": accountId, 
                        "AccountCurrency": accountCurrency, 
                        "IsFollow": isFollow, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Trade history
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter sorting: (query)  (optional)     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter isFollow: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAssetTrades(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: TradeSorting? = nil, accountId: UUID? = nil, accountCurrency: Currency? = nil, isFollow: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: TradesSignalViewModel?,_ error: Error?) -> Void)) {
        getAssetTradesWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, symbol: symbol, sorting: sorting, accountId: accountId, accountCurrency: accountCurrency, isFollow: isFollow, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trade history
     - GET /v2.0/programs/{id}/trades
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 7,
  "showSwaps" : true,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "originalCommission" : 2.3021358869347655,
    "login" : "login",
    "totalCommission" : 6.84685269835264,
    "priceCurrent" : 5.962133916683182,
    "price" : 1.4658129805029452,
    "showOriginalCommission" : true,
    "commission" : 7.061401241503109,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 5.637376656633329,
    "signalData" : {
      "masters" : [ {
        "share" : 3.616076749251911,
        "login" : "login"
      }, {
        "share" : 3.616076749251911,
        "login" : "login"
      } ]
    },
    "profit" : 6.027456183070403,
    "direction" : "Buy",
    "ticket" : "ticket",
    "assetData" : {
      "hasAssetInfo" : true,
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "swap" : 9.301444243932576,
    "volume" : 0.8008281904610115,
    "entry" : "In",
    "totalCommissionByType" : [ {
      "amount" : 9.301444243932576,
      "description" : "description",
      "title" : "title",
      "type" : "Undefined"
    }, {
      "amount" : 9.301444243932576,
      "description" : "description",
      "title" : "title",
      "type" : "Undefined"
    } ],
    "tradingAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profitCurrency" : "profitCurrency",
    "providers" : [ {
      "volume" : 7.386281948385884,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      }, {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 1.2315135367772556,
      "program" : {
        "color" : "color",
        "level" : 2,
        "title" : "title",
        "type" : "None",
        "url" : "url",
        "logoUrl" : "logoUrl",
        "levelProgress" : 4.145608029883936
      },
      "profit" : 1.0246457001441578,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "volume" : 7.386281948385884,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      }, {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 1.2315135367772556,
      "program" : {
        "color" : "color",
        "level" : 2,
        "title" : "title",
        "type" : "None",
        "url" : "url",
        "logoUrl" : "logoUrl",
        "levelProgress" : 4.145608029883936
      },
      "profit" : 1.0246457001441578,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "originalCommission" : 2.3021358869347655,
    "login" : "login",
    "totalCommission" : 6.84685269835264,
    "priceCurrent" : 5.962133916683182,
    "price" : 1.4658129805029452,
    "showOriginalCommission" : true,
    "commission" : 7.061401241503109,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 5.637376656633329,
    "signalData" : {
      "masters" : [ {
        "share" : 3.616076749251911,
        "login" : "login"
      }, {
        "share" : 3.616076749251911,
        "login" : "login"
      } ]
    },
    "profit" : 6.027456183070403,
    "direction" : "Buy",
    "ticket" : "ticket",
    "assetData" : {
      "hasAssetInfo" : true,
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "swap" : 9.301444243932576,
    "volume" : 0.8008281904610115,
    "entry" : "In",
    "totalCommissionByType" : [ {
      "amount" : 9.301444243932576,
      "description" : "description",
      "title" : "title",
      "type" : "Undefined"
    }, {
      "amount" : 9.301444243932576,
      "description" : "description",
      "title" : "title",
      "type" : "Undefined"
    } ],
    "tradingAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profitCurrency" : "profitCurrency",
    "providers" : [ {
      "volume" : 7.386281948385884,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      }, {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 1.2315135367772556,
      "program" : {
        "color" : "color",
        "level" : 2,
        "title" : "title",
        "type" : "None",
        "url" : "url",
        "logoUrl" : "logoUrl",
        "levelProgress" : 4.145608029883936
      },
      "profit" : 1.0246457001441578,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "volume" : 7.386281948385884,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      }, {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 1.2315135367772556,
      "program" : {
        "color" : "color",
        "level" : 2,
        "title" : "title",
        "type" : "None",
        "url" : "url",
        "logoUrl" : "logoUrl",
        "levelProgress" : 4.145608029883936
      },
      "profit" : 1.0246457001441578,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  } ],
  "showTickets" : true,
  "tradesDelay" : "None"
}}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter sorting: (query)  (optional)     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter isFollow: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<TradesSignalViewModel> 
     */
    open class func getAssetTradesWithRequestBuilder(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: TradeSorting? = nil, accountId: UUID? = nil, accountCurrency: Currency? = nil, isFollow: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<TradesSignalViewModel> {
        var path = "/v2.0/programs/{id}/trades"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "Symbol": symbol, 
                        "Sorting": sorting, 
                        "AccountId": accountId, 
                        "AccountCurrency": accountCurrency, 
                        "IsFollow": isFollow, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<TradesSignalViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Program absolute profit chart
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter maxPointCount: (query)  (optional)     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProgramAbsoluteProfitChart(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency? = nil, completion: @escaping ((_ data: AbsoluteProfitChart?,_ error: Error?) -> Void)) {
        getProgramAbsoluteProfitChartWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Program absolute profit chart
     - GET /v2.0/programs/{id}/charts/profit/absolute
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "profit" : 0.8008281904610115,
  "chart" : [ {
    "date" : 0,
    "value" : 6.027456183070403
  }, {
    "date" : 0,
    "value" : 6.027456183070403
  } ]
}}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter maxPointCount: (query)  (optional)     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<AbsoluteProfitChart> 
     */
    open class func getProgramAbsoluteProfitChartWithRequestBuilder(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency? = nil) -> RequestBuilder<AbsoluteProfitChart> {
        var path = "/v2.0/programs/{id}/charts/profit/absolute"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "MaxPointCount": maxPointCount?.encodeToJSON(), 
                        "Currency": currency
        ])

        let requestBuilder: RequestBuilder<AbsoluteProfitChart>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Program balance chart
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter maxPointCount: (query)  (optional)     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProgramBalanceChart(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency? = nil, completion: @escaping ((_ data: ProgramBalanceChart?,_ error: Error?) -> Void)) {
        getProgramBalanceChartWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Program balance chart
     - GET /v2.0/programs/{id}/charts/balance
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "balance" : 0.8008281904610115,
  "color" : "color",
  "programCurrency" : "Undefined",
  "chart" : [ {
    "date" : 6,
    "investorsFunds" : 5.962133916683182,
    "managerFunds" : 1.4658129805029452
  }, {
    "date" : 6,
    "investorsFunds" : 5.962133916683182,
    "managerFunds" : 1.4658129805029452
  } ]
}}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter maxPointCount: (query)  (optional)     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<ProgramBalanceChart> 
     */
    open class func getProgramBalanceChartWithRequestBuilder(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency? = nil) -> RequestBuilder<ProgramBalanceChart> {
        var path = "/v2.0/programs/{id}/charts/balance"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "MaxPointCount": maxPointCount?.encodeToJSON(), 
                        "Currency": currency
        ])

        let requestBuilder: RequestBuilder<ProgramBalanceChart>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Program details
     - parameter _id: (path)       - parameter logoQuality: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProgramDetails(_id: String, logoQuality: ImageQuality? = nil, completion: @escaping ((_ data: ProgramFollowDetailsFull?,_ error: Error?) -> Void)) {
        getProgramDetailsWithRequestBuilder(_id: _id, logoQuality: logoQuality).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Program details
     - GET /v2.0/programs/{id}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "owner" : {
    "socialLinks" : [ {
      "name" : "name",
      "type" : "Undefined",
      "value" : "value",
      "url" : "url",
      "logoUrl" : "logoUrl"
    }, {
      "name" : "name",
      "type" : "Undefined",
      "value" : "value",
      "url" : "url",
      "logoUrl" : "logoUrl"
    } ],
    "registrationDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "logoUrl" : "logoUrl",
    "url" : "url",
    "username" : "username"
  },
  "programDetails" : {
    "periodDuration" : 2,
    "stopOutLevelCurrent" : 6.84685269835264,
    "successFeeSelected" : 1.2315135367772556,
    "canShowFinancialStatistic" : true,
    "level" : 5,
    "genesisRatio" : 9.301444243932576,
    "availableInvestmentLimit" : 1.1730742509559433,
    "type" : "DailyPeriod",
    "tradesDelay" : "None",
    "dailyPeriodDetails" : {
      "nextProcessingDate" : "2000-01-23T04:56:07.000+00:00",
      "hourProcessing" : 7,
      "isProcessingRealTime" : true
    },
    "availableInvestmentBase" : 7.457744773683766,
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "totalAvailableInvestment" : 4.965218492984954,
    "stopOutLevelSelected" : 1.4894159098541704,
    "managementFeeSelected" : 4.145608029883936,
    "investmentScale" : 3.616076749251911,
    "successFeeCurrent" : 1.0246457001441578,
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "canShowPeriodHistory" : true,
    "ageDays" : 7.061401241503109,
    "personalDetails" : {
      "canChangeReinvest" : true,
      "canWithdraw" : true,
      "pendingOutputIsWithdrawAll" : true,
      "subscribedAccounts" : 1,
      "canInvest" : true,
      "showTwoFactorButton" : true,
      "pendingOutput" : 9.018348186070783,
      "managementFeePersonal" : 3.5571952270680973,
      "hasNotifications" : true,
      "pendingInput" : 8.762042012749001,
      "profitPercent" : 9.369310271410669,
      "isReinvest" : true,
      "isAutoJoin" : true,
      "migration" : {
        "newBroker" : {
          "leverageMin" : 6,
          "leverageMax" : 1,
          "assets" : "assets",
          "terms" : "terms",
          "fee" : 0.8008281904610115,
          "name" : "name",
          "description" : "description",
          "accountTypes" : [ {
            "name" : "name",
            "description" : "description",
            "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "typeTitle" : "typeTitle",
            "isSignalsAvailable" : true,
            "type" : "Undefined",
            "leverages" : [ 5, 5 ],
            "minimumDepositsAmount" : {
              "key" : 5.637376656633329
            },
            "isCountryNotUSRequired" : true,
            "isDepositRequired" : true,
            "isKycRequired" : true,
            "currencies" : [ "currencies", "currencies" ]
          }, {
            "name" : "name",
            "description" : "description",
            "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "typeTitle" : "typeTitle",
            "isSignalsAvailable" : true,
            "type" : "Undefined",
            "leverages" : [ 5, 5 ],
            "minimumDepositsAmount" : {
              "key" : 5.637376656633329
            },
            "isCountryNotUSRequired" : true,
            "isDepositRequired" : true,
            "isKycRequired" : true,
            "currencies" : [ "currencies", "currencies" ]
          } ],
          "logoUrl" : "logoUrl",
          "isKycRequired" : true,
          "tags" : [ {
            "color" : "color",
            "name" : "name"
          }, {
            "color" : "color",
            "name" : "name"
          } ]
        },
        "newLeverage" : 6,
        "dateCreate" : "2000-01-23T04:56:07.000+00:00"
      },
      "value" : 5.025004791520295,
      "profit" : 9.965781217890562,
      "successFeePersonal" : 6.438423552598547,
      "invested" : 6.683562403749608,
      "isFavorite" : true,
      "isInvested" : true,
      "status" : "Pending"
    },
    "volumeScale" : 2.027123023002322,
    "managementFeeCurrent" : 7.386281948385884,
    "levelProgress" : 5.637376656633329
  },
  "tradingAccountInfo" : {
    "leverageMin" : 0,
    "leverageMax" : 6,
    "balance" : 1.4658129805029452,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "login" : "login"
  },
  "publicInfo" : {
    "typeExt" : "None",
    "color" : "color",
    "description" : "description",
    "logo" : "logo",
    "isOwnAsset" : true,
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "systemUrl" : "systemUrl",
    "logoUrl" : "logoUrl",
    "url" : "url",
    "status" : "status"
  },
  "ownerActions" : {
    "canClose" : true,
    "canCloseOpenPositions" : true,
    "canEditSignalProviderSettings" : true,
    "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
    "canCreateApiKeys" : true,
    "canTransferMoney" : true,
    "canMakeProgramFromPrivateTradingAccount" : true,
    "canMakeExchangeProgramFromPrivateTradingAccount" : true,
    "canMakeProgramFromSignalProvider" : true,
    "canClosePeriod" : true,
    "isEnoughMoneyToCreateProgram" : true,
    "canChangePassword" : true,
    "canMakeSignalProviderFromPrivateTradingAccount" : true,
    "canMakeSignalProviderFromProgram" : true,
    "canConfirm2FA" : true
  },
  "followDetails" : {
    "tradesCount" : 2,
    "signalSettings" : {
      "signalSuccessFee" : 6.778324963048013,
      "signalVolumeFee" : 6.878052220127876,
      "isActive" : true
    },
    "subscribersCount" : 5,
    "personalDetails" : {
      "guestActions" : {
        "canSubscribeToExternalSignalPrivateAccount" : true,
        "canSubscribeToExternalSignalCommonAccount" : true,
        "canSubscribeToInternalSignal" : true
      },
      "hasNotifications" : true,
      "subscribedAccounts" : 6,
      "isFavorite" : true
    }
  },
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "brokerDetails" : {
    "showCommissionRebateSometime" : true,
    "showCommissionRebate" : true,
    "showSwaps" : true,
    "showTicketsSometime" : true,
    "type" : "Undefined",
    "showTickets" : true,
    "logoUrl" : "logoUrl",
    "isKycRequired" : true,
    "name" : "name",
    "showSwapsSometime" : true,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "isSignalsAvailable" : true,
    "isKycRequiredSometime" : true
  },
  "tags" : [ {
    "color" : "color",
    "name" : "name"
  }, {
    "color" : "color",
    "name" : "name"
  } ]
}}]
     - parameter _id: (path)       - parameter logoQuality: (query)  (optional)

     - returns: RequestBuilder<ProgramFollowDetailsFull> 
     */
    open class func getProgramDetailsWithRequestBuilder(_id: String, logoQuality: ImageQuality? = nil) -> RequestBuilder<ProgramFollowDetailsFull> {
        var path = "/v2.0/programs/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "logoQuality": logoQuality
        ])

        let requestBuilder: RequestBuilder<ProgramFollowDetailsFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Open positions
     - parameter _id: (path)       - parameter sorting: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProgramOpenTrades(_id: UUID, sorting: TradeSorting? = nil, symbol: String? = nil, accountId: UUID? = nil, accountCurrency: Currency? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: TradesViewModel?,_ error: Error?) -> Void)) {
        getProgramOpenTradesWithRequestBuilder(_id: _id, sorting: sorting, symbol: symbol, accountId: accountId, accountCurrency: accountCurrency, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Open positions
     - GET /v2.0/programs/{id}/trades/open
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "showProfit" : true,
  "total" : 3,
  "showDirection" : true,
  "showPrice" : true,
  "showSwaps" : true,
  "showPriceOpen" : true,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "ticket" : "ticket",
    "assetData" : {
      "hasAssetInfo" : true,
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "swap" : 9.301444243932576,
    "originalCommission" : 2.3021358869347655,
    "login" : "login",
    "volume" : 0.8008281904610115,
    "priceCurrent" : 5.962133916683182,
    "entry" : "In",
    "price" : 1.4658129805029452,
    "showOriginalCommission" : true,
    "profitCurrency" : "profitCurrency",
    "commission" : 7.061401241503109,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 5.637376656633329,
    "signalData" : {
      "masters" : [ {
        "share" : 3.616076749251911,
        "login" : "login"
      }, {
        "share" : 3.616076749251911,
        "login" : "login"
      } ]
    },
    "profit" : 6.027456183070403,
    "direction" : "Buy"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "ticket" : "ticket",
    "assetData" : {
      "hasAssetInfo" : true,
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "swap" : 9.301444243932576,
    "originalCommission" : 2.3021358869347655,
    "login" : "login",
    "volume" : 0.8008281904610115,
    "priceCurrent" : 5.962133916683182,
    "entry" : "In",
    "price" : 1.4658129805029452,
    "showOriginalCommission" : true,
    "profitCurrency" : "profitCurrency",
    "commission" : 7.061401241503109,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 5.637376656633329,
    "signalData" : {
      "masters" : [ {
        "share" : 3.616076749251911,
        "login" : "login"
      }, {
        "share" : 3.616076749251911,
        "login" : "login"
      } ]
    },
    "profit" : 6.027456183070403,
    "direction" : "Buy"
  } ],
  "showTickets" : true,
  "showDate" : true,
  "tradesDelay" : "None"
}}]
     - parameter _id: (path)       - parameter sorting: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<TradesViewModel> 
     */
    open class func getProgramOpenTradesWithRequestBuilder(_id: UUID, sorting: TradeSorting? = nil, symbol: String? = nil, accountId: UUID? = nil, accountCurrency: Currency? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<TradesViewModel> {
        var path = "/v2.0/programs/{id}/trades/open"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "Sorting": sorting, 
                        "Symbol": symbol, 
                        "AccountId": accountId, 
                        "AccountCurrency": accountCurrency, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<TradesViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Program periods
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter numberMin: (query)  (optional)     - parameter numberMax: (query)  (optional)     - parameter status: (query)  (optional)     - parameter timeframe: (query)  (optional)     - parameter showInvestorReport: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProgramPeriods(_id: String, dateFrom: Date? = nil, dateTo: Date? = nil, numberMin: Int? = nil, numberMax: Int? = nil, status: PeriodStatus? = nil, timeframe: Timeframe? = nil, showInvestorReport: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ProgramPeriodsViewModel?,_ error: Error?) -> Void)) {
        getProgramPeriodsWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, numberMin: numberMin, numberMax: numberMax, status: status, timeframe: timeframe, showInvestorReport: showInvestorReport, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Program periods
     - GET /v2.0/programs/{id}/periods
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 9,
  "periods" : [ {
    "investorStatistic" : {
      "balance" : 4.965218492984954,
      "managerSuccessFee" : 6.683562403749608,
      "platformSuccessFee" : 8.762042012749001,
      "managerManagementFee" : 9.369310271410669,
      "profit" : 1.1730742509559433,
      "deposits" : 5.025004791520295,
      "withdrawals" : 9.965781217890562
    },
    "investorsWithdraw" : 4.145608029883936,
    "dateFrom" : "2000-01-23T04:56:07.000+00:00",
    "investors" : 2,
    "investorsDeposit" : 2.027123023002322,
    "managerWithdraw" : 9.301444243932576,
    "number" : 6,
    "investorsProfitWithdraw" : 7.386281948385884,
    "managerDeposit" : 7.061401241503109,
    "profitPercent" : 5.962133916683182,
    "balance" : 5.637376656633329,
    "dateTo" : "2000-01-23T04:56:07.000+00:00",
    "platformSuccessFee" : 1.2315135367772556,
    "periodLength" : 0.8008281904610115,
    "managerCommissionRebate" : 3.616076749251911,
    "profit" : 1.4658129805029452,
    "managerStatistic" : {
      "entryFee" : 1.4894159098541704,
      "balance" : 7.457744773683766,
      "successFee" : 1.0246457001441578,
      "profit" : 6.84685269835264
    },
    "status" : "Planned"
  }, {
    "investorStatistic" : {
      "balance" : 4.965218492984954,
      "managerSuccessFee" : 6.683562403749608,
      "platformSuccessFee" : 8.762042012749001,
      "managerManagementFee" : 9.369310271410669,
      "profit" : 1.1730742509559433,
      "deposits" : 5.025004791520295,
      "withdrawals" : 9.965781217890562
    },
    "investorsWithdraw" : 4.145608029883936,
    "dateFrom" : "2000-01-23T04:56:07.000+00:00",
    "investors" : 2,
    "investorsDeposit" : 2.027123023002322,
    "managerWithdraw" : 9.301444243932576,
    "number" : 6,
    "investorsProfitWithdraw" : 7.386281948385884,
    "managerDeposit" : 7.061401241503109,
    "profitPercent" : 5.962133916683182,
    "balance" : 5.637376656633329,
    "dateTo" : "2000-01-23T04:56:07.000+00:00",
    "platformSuccessFee" : 1.2315135367772556,
    "periodLength" : 0.8008281904610115,
    "managerCommissionRebate" : 3.616076749251911,
    "profit" : 1.4658129805029452,
    "managerStatistic" : {
      "entryFee" : 1.4894159098541704,
      "balance" : 7.457744773683766,
      "successFee" : 1.0246457001441578,
      "profit" : 6.84685269835264
    },
    "status" : "Planned"
  } ]
}}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter numberMin: (query)  (optional)     - parameter numberMax: (query)  (optional)     - parameter status: (query)  (optional)     - parameter timeframe: (query)  (optional)     - parameter showInvestorReport: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ProgramPeriodsViewModel> 
     */
    open class func getProgramPeriodsWithRequestBuilder(_id: String, dateFrom: Date? = nil, dateTo: Date? = nil, numberMin: Int? = nil, numberMax: Int? = nil, status: PeriodStatus? = nil, timeframe: Timeframe? = nil, showInvestorReport: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ProgramPeriodsViewModel> {
        var path = "/v2.0/programs/{id}/periods"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "NumberMin": numberMin?.encodeToJSON(), 
                        "NumberMax": numberMax?.encodeToJSON(), 
                        "Status": status, 
                        "Timeframe": timeframe, 
                        "ShowInvestorReport": showInvestorReport, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ProgramPeriodsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Program profit percent charts
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter maxPointCount: (query)  (optional)     - parameter currency: (query)  (optional)     - parameter currencies: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProgramProfitPercentCharts(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency? = nil, currencies: [Currency]? = nil, completion: @escaping ((_ data: ProgramProfitPercentCharts?,_ error: Error?) -> Void)) {
        getProgramProfitPercentChartsWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency, currencies: currencies).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Program profit percent charts
     - GET /v2.0/programs/{id}/charts/profit/percent
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "statistic" : {
    "profitFactor" : 2.027123023002322,
    "calmarRatio" : 5.637376656633329,
    "subscribers" : 7,
    "trades" : 9,
    "maxDrawdown" : 2.3021358869347655,
    "tradingVolume" : 7.061401241503109,
    "investors" : 4,
    "sortinoRatio" : 5.962133916683182,
    "balance" : 0.8008281904610115,
    "profitPercent" : 6.027456183070403,
    "successTradesPercent" : 3.616076749251911,
    "lastPeriodEnds" : "2000-01-23T04:56:07.000+00:00",
    "sharpeRatio" : 1.4658129805029452,
    "lastPeriodStarts" : "2000-01-23T04:56:07.000+00:00"
  },
  "charts" : [ {
    "color" : "color",
    "currency" : "Undefined",
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  }, {
    "color" : "color",
    "currency" : "Undefined",
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  } ]
}}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter maxPointCount: (query)  (optional)     - parameter currency: (query)  (optional)     - parameter currencies: (query)  (optional)

     - returns: RequestBuilder<ProgramProfitPercentCharts> 
     */
    open class func getProgramProfitPercentChartsWithRequestBuilder(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency? = nil, currencies: [Currency]? = nil) -> RequestBuilder<ProgramProfitPercentCharts> {
        var path = "/v2.0/programs/{id}/charts/profit/percent"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "MaxPointCount": maxPointCount?.encodeToJSON(), 
                        "Currency": currency, 
                        "currencies": currencies
        ])

        let requestBuilder: RequestBuilder<ProgramProfitPercentCharts>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Signal subscribers
     - parameter _id: (path)       - parameter status: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProgramSubscribers(_id: UUID, status: DashboardActionStatus? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: SignalProviderSubscribers?,_ error: Error?) -> Void)) {
        getProgramSubscribersWithRequestBuilder(_id: _id, status: status, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Signal subscribers
     - GET /v2.0/programs/{id}/subscribers
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 9,
  "subscribers" : [ {
    "unsubscriptionDate" : "2000-01-23T04:56:07.000+00:00",
    "totalCommissionAmount" : 5.637376656633329,
    "trades" : 6,
    "totalCommissionCurrency" : "Undefined",
    "totalVolumeFeeAmount" : 7.061401241503109,
    "totalSuccessFeeAmount" : 2.3021358869347655,
    "volume" : 5.962133916683182,
    "number" : 0,
    "subscriptionDate" : "2000-01-23T04:56:07.000+00:00",
    "profit" : 1.4658129805029452,
    "status" : "Active"
  }, {
    "unsubscriptionDate" : "2000-01-23T04:56:07.000+00:00",
    "totalCommissionAmount" : 5.637376656633329,
    "trades" : 6,
    "totalCommissionCurrency" : "Undefined",
    "totalVolumeFeeAmount" : 7.061401241503109,
    "totalSuccessFeeAmount" : 2.3021358869347655,
    "volume" : 5.962133916683182,
    "number" : 0,
    "subscriptionDate" : "2000-01-23T04:56:07.000+00:00",
    "profit" : 1.4658129805029452,
    "status" : "Active"
  } ]
}}]
     - parameter _id: (path)       - parameter status: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<SignalProviderSubscribers> 
     */
    open class func getProgramSubscribersWithRequestBuilder(_id: UUID, status: DashboardActionStatus? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<SignalProviderSubscribers> {
        var path = "/v2.0/programs/{id}/subscribers"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "Status": status, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<SignalProviderSubscribers>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Programs list
     - parameter sorting: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter tags: (query)  (optional)     - parameter programCurrency: (query)  (optional)     - parameter levelMin: (query)  (optional)     - parameter levelMax: (query)  (optional)     - parameter levelsSet: (query)  (optional)     - parameter investorId: (query)  (optional)     - parameter includeWithInvestments: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter facetId: (query)  (optional)     - parameter mask: (query)  (optional)     - parameter ownerId: (query)  (optional)     - parameter showFavorites: (query)  (optional)     - parameter skipStatistic: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPrograms(sorting: ProgramsFilterSorting? = nil, showIn: Currency? = nil, tags: [String]? = nil, programCurrency: Currency? = nil, levelMin: Int? = nil, levelMax: Int? = nil, levelsSet: [Int]? = nil, investorId: UUID? = nil, includeWithInvestments: Bool? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skipStatistic: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ProgramDetailsListItemItemsViewModel?,_ error: Error?) -> Void)) {
        getProgramsWithRequestBuilder(sorting: sorting, showIn: showIn, tags: tags, programCurrency: programCurrency, levelMin: levelMin, levelMax: levelMax, levelsSet: levelsSet, investorId: investorId, includeWithInvestments: includeWithInvestments, dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, facetId: facetId, mask: mask, ownerId: ownerId, showFavorites: showFavorites, skipStatistic: skipStatistic, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Programs list
     - GET /v2.0/programs
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 9,
  "items" : [ {
    "color" : "color",
    "description" : "description",
    "type" : "DailyPeriod",
    "title" : "title",
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "balance" : {
      "amount" : 7.457744773683766,
      "currency" : "Undefined"
    },
    "availableToInvest" : 5.962133916683182,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "levelProgress" : 6.027456183070403,
    "investorsCount" : 5,
    "owner" : {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    },
    "periodDuration" : 1,
    "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "level" : 0,
    "entryFeeCurrent" : 7.061401241503109,
    "entryFeeSelected" : 2.3021358869347655,
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "logoUrl" : "logoUrl",
    "url" : "url",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "personalDetails" : {
      "isReinvest" : true,
      "isAutoJoin" : true,
      "isOwnAsset" : true,
      "isFavorite" : true
    },
    "status" : "status"
  }, {
    "color" : "color",
    "description" : "description",
    "type" : "DailyPeriod",
    "title" : "title",
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "balance" : {
      "amount" : 7.457744773683766,
      "currency" : "Undefined"
    },
    "availableToInvest" : 5.962133916683182,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "levelProgress" : 6.027456183070403,
    "investorsCount" : 5,
    "owner" : {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    },
    "periodDuration" : 1,
    "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "statistic" : {
      "drawdown" : 1.2315135367772556,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 7.386281948385884
    },
    "level" : 0,
    "entryFeeCurrent" : 7.061401241503109,
    "entryFeeSelected" : 2.3021358869347655,
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "logoUrl" : "logoUrl",
    "url" : "url",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "personalDetails" : {
      "isReinvest" : true,
      "isAutoJoin" : true,
      "isOwnAsset" : true,
      "isFavorite" : true
    },
    "status" : "status"
  } ]
}}]
     - parameter sorting: (query)  (optional)     - parameter showIn: (query)  (optional)     - parameter tags: (query)  (optional)     - parameter programCurrency: (query)  (optional)     - parameter levelMin: (query)  (optional)     - parameter levelMax: (query)  (optional)     - parameter levelsSet: (query)  (optional)     - parameter investorId: (query)  (optional)     - parameter includeWithInvestments: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter chartPointsCount: (query)  (optional)     - parameter facetId: (query)  (optional)     - parameter mask: (query)  (optional)     - parameter ownerId: (query)  (optional)     - parameter showFavorites: (query)  (optional)     - parameter skipStatistic: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ProgramDetailsListItemItemsViewModel> 
     */
    open class func getProgramsWithRequestBuilder(sorting: ProgramsFilterSorting? = nil, showIn: Currency? = nil, tags: [String]? = nil, programCurrency: Currency? = nil, levelMin: Int? = nil, levelMax: Int? = nil, levelsSet: [Int]? = nil, investorId: UUID? = nil, includeWithInvestments: Bool? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skipStatistic: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ProgramDetailsListItemItemsViewModel> {
        let path = "/v2.0/programs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "Sorting": sorting, 
                        "ShowIn": showIn, 
                        "Tags": tags, 
                        "ProgramCurrency": programCurrency, 
                        "LevelMin": levelMin?.encodeToJSON(), 
                        "LevelMax": levelMax?.encodeToJSON(), 
                        "LevelsSet": levelsSet, 
                        "InvestorId": investorId, 
                        "IncludeWithInvestments": includeWithInvestments, 
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
                        "FacetId": facetId, 
                        "Mask": mask, 
                        "OwnerId": ownerId, 
                        "ShowFavorites": showFavorites, 
                        "SkipStatistic": skipStatistic, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ProgramDetailsListItemItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove from favorites
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeFromFavorites(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        removeFromFavoritesWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove from favorites
     - POST /v2.0/programs/{id}/favorite/remove
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func removeFromFavoritesWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/programs/{id}/favorite/remove"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
