//
// CoinsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CoinsAPI {
    /**
     Add to favorites
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addToFavorites(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addToFavoritesWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add to favorites
     - POST /v2.0/coins/coins/{id}/favorite/add
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func addToFavoritesWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/coins/coins/{id}/favorite/add"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     All coins list

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllCoins(completion: @escaping ((_ data: BasePlatformAssetItemsViewModel?,_ error: Error?) -> Void)) {
        getAllCoinsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     All coins list
     - GET /v2.0/coins/all
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "items" : [ {
    "color" : "color",
    "provider" : "Undefined",
    "name" : "name",
    "description" : "description",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "asset" : "asset",
    "logoUrl" : "logoUrl",
    "url" : "url"
  }, {
    "color" : "color",
    "provider" : "Undefined",
    "name" : "name",
    "description" : "description",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "asset" : "asset",
    "logoUrl" : "logoUrl",
    "url" : "url"
  } ]
}}]

     - returns: RequestBuilder<BasePlatformAssetItemsViewModel> 
     */
    open class func getAllCoinsWithRequestBuilder() -> RequestBuilder<BasePlatformAssetItemsViewModel> {
        let path = "/v2.0/coins/all"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BasePlatformAssetItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Coins list
     - parameter sorting: (query)  (optional)     - parameter assets: (query)  (optional)     - parameter isFavorite: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCoins(sorting: CoinsFilterSorting? = nil, assets: [String]? = nil, isFavorite: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: CoinsAssetItemsViewModel?,_ error: Error?) -> Void)) {
        getCoinsWithRequestBuilder(sorting: sorting, assets: assets, isFavorite: isFavorite, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Coins list
     - GET /v2.0/coins
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 4,
  "items" : [ {
    "totalVolume" : 1.4658129805029452,
    "marketCap" : 5.962133916683182,
    "amount" : 7.061401241503109,
    "color" : "color",
    "isTransferred" : true,
    "description" : "description",
    "profitCurrent" : 3.616076749251911,
    "logoUrl" : "logoUrl",
    "url" : "url",
    "total" : 2.027123023002322,
    "change24Percent" : 6.027456183070403,
    "provider" : "Undefined",
    "price" : 0.8008281904610115,
    "name" : "name",
    "details" : {
      "symbol" : "symbol",
      "socialLinks" : [ {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      }, {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      } ],
      "name" : "name",
      "description" : "description",
      "chartSymbol" : "chartSymbol",
      "lastModified" : "2000-01-23T04:56:07.000+00:00",
      "logoUrl" : "logoUrl",
      "tags" : [ {
        "color" : "color",
        "name" : "name"
      }, {
        "color" : "color",
        "name" : "name"
      } ]
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "averagePrice" : 9.301444243932576,
    "asset" : "asset",
    "chart" : {
      "chart" : [ {
        "date" : 5,
        "value" : 2.3021358869347655
      }, {
        "date" : 5,
        "value" : 2.3021358869347655
      } ]
    },
    "oefAssetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "isFavorite" : true
  }, {
    "totalVolume" : 1.4658129805029452,
    "marketCap" : 5.962133916683182,
    "amount" : 7.061401241503109,
    "color" : "color",
    "isTransferred" : true,
    "description" : "description",
    "profitCurrent" : 3.616076749251911,
    "logoUrl" : "logoUrl",
    "url" : "url",
    "total" : 2.027123023002322,
    "change24Percent" : 6.027456183070403,
    "provider" : "Undefined",
    "price" : 0.8008281904610115,
    "name" : "name",
    "details" : {
      "symbol" : "symbol",
      "socialLinks" : [ {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      }, {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      } ],
      "name" : "name",
      "description" : "description",
      "chartSymbol" : "chartSymbol",
      "lastModified" : "2000-01-23T04:56:07.000+00:00",
      "logoUrl" : "logoUrl",
      "tags" : [ {
        "color" : "color",
        "name" : "name"
      }, {
        "color" : "color",
        "name" : "name"
      } ]
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "averagePrice" : 9.301444243932576,
    "asset" : "asset",
    "chart" : {
      "chart" : [ {
        "date" : 5,
        "value" : 2.3021358869347655
      }, {
        "date" : 5,
        "value" : 2.3021358869347655
      } ]
    },
    "oefAssetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "isFavorite" : true
  } ]
}}]
     - parameter sorting: (query)  (optional)     - parameter assets: (query)  (optional)     - parameter isFavorite: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<CoinsAssetItemsViewModel> 
     */
    open class func getCoinsWithRequestBuilder(sorting: CoinsFilterSorting? = nil, assets: [String]? = nil, isFavorite: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<CoinsAssetItemsViewModel> {
        let path = "/v2.0/coins"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "Sorting": sorting, 
                        "Assets": assets, 
                        "IsFavorite": isFavorite, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<CoinsAssetItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get coins history
     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter assets: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCoinsConvertingHistory(dateFrom: Date? = nil, dateTo: Date? = nil, assets: [String]? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: CoinsHistoryEventItemsViewModel?,_ error: Error?) -> Void)) {
        getCoinsConvertingHistoryWithRequestBuilder(dateFrom: dateFrom, dateTo: dateTo, assets: assets, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get coins history
     - GET /v2.0/coins/history
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 5,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "trade" : {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "commissionCurrency" : "commissionCurrency",
      "soldAsset" : {
        "color" : "color",
        "provider" : "Undefined",
        "name" : "name",
        "description" : "description",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "asset" : "asset",
        "logoUrl" : "logoUrl",
        "url" : "url"
      },
      "boughtAmount" : 6.027456183070403,
      "price" : 1.4658129805029452,
      "commission" : 5.962133916683182,
      "soldAmount" : 0.8008281904610115
    }
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "trade" : {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "commissionCurrency" : "commissionCurrency",
      "soldAsset" : {
        "color" : "color",
        "provider" : "Undefined",
        "name" : "name",
        "description" : "description",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "asset" : "asset",
        "logoUrl" : "logoUrl",
        "url" : "url"
      },
      "boughtAmount" : 6.027456183070403,
      "price" : 1.4658129805029452,
      "commission" : 5.962133916683182,
      "soldAmount" : 0.8008281904610115
    }
  } ]
}}]
     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter assets: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<CoinsHistoryEventItemsViewModel> 
     */
    open class func getCoinsConvertingHistoryWithRequestBuilder(dateFrom: Date? = nil, dateTo: Date? = nil, assets: [String]? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<CoinsHistoryEventItemsViewModel> {
        let path = "/v2.0/coins/history"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "Assets": assets, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<CoinsHistoryEventItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get user coins
     - parameter sorting: (query)  (optional)     - parameter assets: (query)  (optional)     - parameter isFavorite: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserCoins(sorting: CoinsFilterSorting? = nil, assets: [String]? = nil, isFavorite: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: CoinsAssetItemsViewModel?,_ error: Error?) -> Void)) {
        getUserCoinsWithRequestBuilder(sorting: sorting, assets: assets, isFavorite: isFavorite, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get user coins
     - GET /v2.0/coins/portfolio
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 4,
  "items" : [ {
    "totalVolume" : 1.4658129805029452,
    "marketCap" : 5.962133916683182,
    "amount" : 7.061401241503109,
    "color" : "color",
    "isTransferred" : true,
    "description" : "description",
    "profitCurrent" : 3.616076749251911,
    "logoUrl" : "logoUrl",
    "url" : "url",
    "total" : 2.027123023002322,
    "change24Percent" : 6.027456183070403,
    "provider" : "Undefined",
    "price" : 0.8008281904610115,
    "name" : "name",
    "details" : {
      "symbol" : "symbol",
      "socialLinks" : [ {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      }, {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      } ],
      "name" : "name",
      "description" : "description",
      "chartSymbol" : "chartSymbol",
      "lastModified" : "2000-01-23T04:56:07.000+00:00",
      "logoUrl" : "logoUrl",
      "tags" : [ {
        "color" : "color",
        "name" : "name"
      }, {
        "color" : "color",
        "name" : "name"
      } ]
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "averagePrice" : 9.301444243932576,
    "asset" : "asset",
    "chart" : {
      "chart" : [ {
        "date" : 5,
        "value" : 2.3021358869347655
      }, {
        "date" : 5,
        "value" : 2.3021358869347655
      } ]
    },
    "oefAssetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "isFavorite" : true
  }, {
    "totalVolume" : 1.4658129805029452,
    "marketCap" : 5.962133916683182,
    "amount" : 7.061401241503109,
    "color" : "color",
    "isTransferred" : true,
    "description" : "description",
    "profitCurrent" : 3.616076749251911,
    "logoUrl" : "logoUrl",
    "url" : "url",
    "total" : 2.027123023002322,
    "change24Percent" : 6.027456183070403,
    "provider" : "Undefined",
    "price" : 0.8008281904610115,
    "name" : "name",
    "details" : {
      "symbol" : "symbol",
      "socialLinks" : [ {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      }, {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      } ],
      "name" : "name",
      "description" : "description",
      "chartSymbol" : "chartSymbol",
      "lastModified" : "2000-01-23T04:56:07.000+00:00",
      "logoUrl" : "logoUrl",
      "tags" : [ {
        "color" : "color",
        "name" : "name"
      }, {
        "color" : "color",
        "name" : "name"
      } ]
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "averagePrice" : 9.301444243932576,
    "asset" : "asset",
    "chart" : {
      "chart" : [ {
        "date" : 5,
        "value" : 2.3021358869347655
      }, {
        "date" : 5,
        "value" : 2.3021358869347655
      } ]
    },
    "oefAssetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "isFavorite" : true
  } ]
}}]
     - parameter sorting: (query)  (optional)     - parameter assets: (query)  (optional)     - parameter isFavorite: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<CoinsAssetItemsViewModel> 
     */
    open class func getUserCoinsWithRequestBuilder(sorting: CoinsFilterSorting? = nil, assets: [String]? = nil, isFavorite: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<CoinsAssetItemsViewModel> {
        let path = "/v2.0/coins/portfolio"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "Sorting": sorting, 
                        "Assets": assets, 
                        "IsFavorite": isFavorite, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<CoinsAssetItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove from favorites
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeFromFavorites(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        removeFromFavoritesWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove from favorites
     - POST /v2.0/coins/coins/{id}/favorite/remove
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func removeFromFavoritesWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/coins/coins/{id}/favorite/remove"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Transfer money
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transfer(body: InternalTransferRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        transferWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Transfer money
     - POST /v2.0/coins/transfer
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func transferWithRequestBuilder(body: InternalTransferRequest? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/coins/transfer"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
