//
// FollowAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class FollowAPI {
    /**
     Add to favorites
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addToFavorites(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        addToFavoritesWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Add to favorites
     - POST /v2.0/follow/{id}/favorite/add
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func addToFavoritesWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v2.0/follow/{id}/favorite/add"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getAbsoluteProfitChart: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Follow absolute profit chart
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAbsoluteProfitChart(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getAbsoluteProfitChart? = nil, completion: @escaping ((_ data: AbsoluteProfitChart?,_ error: Error?) -> Void)) {
        getAbsoluteProfitChartWithRequestBuilder(id: id, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Follow absolute profit chart
     - GET /v2.0/follow/{id}/charts/profit/absolute
     - examples: [{contentType=application/json, example={
  "profit" : 0.8008281904610115,
  "chart" : [ {
    "date" : 0,
    "value" : 6.027456183070403
  }, {
    "date" : 0,
    "value" : 6.027456183070403
  } ]
}}]
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<AbsoluteProfitChart> 
     */
    open class func getAbsoluteProfitChartWithRequestBuilder(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getAbsoluteProfitChart? = nil) -> RequestBuilder<AbsoluteProfitChart> {
        var path = "/v2.0/follow/{id}/charts/profit/absolute"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "MaxPointCount": maxPointCount?.encodeToJSON(), 
            "Currency": currency?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<AbsoluteProfitChart>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_getAssetTrades: String { 
        case byDateAsc = "ByDateAsc"
        case byDateDesc = "ByDateDesc"
        case byTicketAsc = "ByTicketAsc"
        case byTicketDesc = "ByTicketDesc"
        case bySymbolAsc = "BySymbolAsc"
        case bySymbolDesc = "BySymbolDesc"
        case byDirectionAsc = "ByDirectionAsc"
        case byDirectionDesc = "ByDirectionDesc"
        case byVolumeAsc = "ByVolumeAsc"
        case byVolumeDesc = "ByVolumeDesc"
        case byPriceAsc = "ByPriceAsc"
        case byPriceDesc = "ByPriceDesc"
        case byPriceCurrentAsc = "ByPriceCurrentAsc"
        case byPriceCurrentDesc = "ByPriceCurrentDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byCommissionAsc = "ByCommissionAsc"
        case byCommissionDesc = "ByCommissionDesc"
        case bySwapAsc = "BySwapAsc"
        case bySwapDesc = "BySwapDesc"
    }

    /**
     * enum for parameter accountCurrency
     */
    public enum AccountCurrency_getAssetTrades: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Trade history
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter symbol: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter accountId: (query)  (optional)
     - parameter accountCurrency: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAssetTrades(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: Sorting_getAssetTrades? = nil, accountId: UUID? = nil, accountCurrency: AccountCurrency_getAssetTrades? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: TradesSignalViewModel?,_ error: Error?) -> Void)) {
        getAssetTradesWithRequestBuilder(id: id, dateFrom: dateFrom, dateTo: dateTo, symbol: symbol, sorting: sorting, accountId: accountId, accountCurrency: accountCurrency, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Trade history
     - GET /v2.0/follow/{id}/trades
     - examples: [{contentType=application/json, example={
  "total" : 7,
  "showSwaps" : true,
  "showTickets" : true,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "originalCommission" : 1.2315135367772556,
    "totalCommission" : 7.061401241503109,
    "login" : "login",
    "priceCurrent" : 4.145608029883936,
    "price" : 2.027123023002322,
    "showOriginalCommission" : true,
    "currency" : null,
    "commission" : 1.0246457001441578,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 7.386281948385884,
    "signalData" : {
      "masters" : [ {
        "share" : 6.84685269835264,
        "login" : "login"
      }, {
        "share" : 6.84685269835264,
        "login" : "login"
      } ]
    },
    "profit" : 3.616076749251911,
    "direction" : { },
    "externalSignalAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "ticket" : "ticket",
    "swap" : 1.4894159098541704,
    "volume" : 9.301444243932576,
    "totalCommissionByType" : [ {
      "amount" : 9.301444243932576,
      "description" : "description",
      "currency" : null,
      "title" : "title",
      "type" : { }
    }, {
      "amount" : 9.301444243932576,
      "description" : "description",
      "currency" : null,
      "title" : "title",
      "type" : { }
    } ],
    "entry" : { },
    "tradingAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profitCurrency" : "profitCurrency",
    "providers" : [ {
      "volume" : 1.4658129805029452,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      }, {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        }, {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "avatar" : "avatar",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 5.962133916683182,
      "program" : {
        "color" : "color",
        "level" : 0,
        "logo" : "logo",
        "title" : "title",
        "type" : { },
        "url" : "url",
        "levelProgress" : 6.027456183070403
      },
      "profit" : 5.637376656633329,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "volume" : 1.4658129805029452,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      }, {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        }, {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "avatar" : "avatar",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 5.962133916683182,
      "program" : {
        "color" : "color",
        "level" : 0,
        "logo" : "logo",
        "title" : "title",
        "type" : { },
        "url" : "url",
        "levelProgress" : 6.027456183070403
      },
      "profit" : 5.637376656633329,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "originalCommission" : 1.2315135367772556,
    "totalCommission" : 7.061401241503109,
    "login" : "login",
    "priceCurrent" : 4.145608029883936,
    "price" : 2.027123023002322,
    "showOriginalCommission" : true,
    "currency" : null,
    "commission" : 1.0246457001441578,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 7.386281948385884,
    "signalData" : {
      "masters" : [ {
        "share" : 6.84685269835264,
        "login" : "login"
      }, {
        "share" : 6.84685269835264,
        "login" : "login"
      } ]
    },
    "profit" : 3.616076749251911,
    "direction" : { },
    "externalSignalAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "ticket" : "ticket",
    "swap" : 1.4894159098541704,
    "volume" : 9.301444243932576,
    "totalCommissionByType" : [ {
      "amount" : 9.301444243932576,
      "description" : "description",
      "currency" : null,
      "title" : "title",
      "type" : { }
    }, {
      "amount" : 9.301444243932576,
      "description" : "description",
      "currency" : null,
      "title" : "title",
      "type" : { }
    } ],
    "entry" : { },
    "tradingAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profitCurrency" : "profitCurrency",
    "providers" : [ {
      "volume" : 1.4658129805029452,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      }, {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        }, {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "avatar" : "avatar",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 5.962133916683182,
      "program" : {
        "color" : "color",
        "level" : 0,
        "logo" : "logo",
        "title" : "title",
        "type" : { },
        "url" : "url",
        "levelProgress" : 6.027456183070403
      },
      "profit" : 5.637376656633329,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "volume" : 1.4658129805029452,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      }, {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        }, {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "avatar" : "avatar",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 5.962133916683182,
      "program" : {
        "color" : "color",
        "level" : 0,
        "logo" : "logo",
        "title" : "title",
        "type" : { },
        "url" : "url",
        "levelProgress" : 6.027456183070403
      },
      "profit" : 5.637376656633329,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  } ]
}}]
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter symbol: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter accountId: (query)  (optional)
     - parameter accountCurrency: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<TradesSignalViewModel> 
     */
    open class func getAssetTradesWithRequestBuilder(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: Sorting_getAssetTrades? = nil, accountId: UUID? = nil, accountCurrency: AccountCurrency_getAssetTrades? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<TradesSignalViewModel> {
        var path = "/v2.0/follow/{id}/trades"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "Symbol": symbol, 
            "Sorting": sorting?.rawValue, 
            "AccountId": accountId, 
            "AccountCurrency": accountCurrency?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<TradesSignalViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getBalanceChart: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Follow balance chart
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBalanceChart(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getBalanceChart? = nil, completion: @escaping ((_ data: AccountBalanceChart?,_ error: Error?) -> Void)) {
        getBalanceChartWithRequestBuilder(id: id, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Follow balance chart
     - GET /v2.0/follow/{id}/charts/balance
     - examples: [{contentType=application/json, example={
  "balance" : 0.8008281904610115,
  "color" : "color",
  "chart" : [ {
    "date" : 0,
    "value" : 6.027456183070403
  }, {
    "date" : 0,
    "value" : 6.027456183070403
  } ]
}}]
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<AccountBalanceChart> 
     */
    open class func getBalanceChartWithRequestBuilder(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getBalanceChart? = nil) -> RequestBuilder<AccountBalanceChart> {
        var path = "/v2.0/follow/{id}/charts/balance"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "MaxPointCount": maxPointCount?.encodeToJSON(), 
            "Currency": currency?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<AccountBalanceChart>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Follow asset details
     
     - parameter id: (path)  
     - parameter authorization: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFollowAssetDetails(id: String, authorization: String? = nil, completion: @escaping ((_ data: ProgramFollowDetailsFull?,_ error: Error?) -> Void)) {
        getFollowAssetDetailsWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Follow asset details
     - GET /v2.0/follow/{id}
     - examples: [{contentType=application/json, example={
  "owner" : {
    "socialLinks" : [ {
      "name" : "name",
      "logo" : "logo",
      "type" : { },
      "value" : "value",
      "url" : "url"
    }, {
      "name" : "name",
      "logo" : "logo",
      "type" : { },
      "value" : "value",
      "url" : "url"
    } ],
    "registrationDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "avatar" : "avatar",
    "url" : "url",
    "username" : "username"
  },
  "programDetails" : {
    "periodDuration" : 2,
    "stopOutLevelCurrent" : 6.84685269835264,
    "successFeeSelected" : 1.2315135367772556,
    "level" : 5,
    "genesisRatio" : 9.301444243932576,
    "entryFeeCurrent" : 7.386281948385884,
    "availableInvestmentLimit" : 1.1730742509559433,
    "entryFeeSelected" : 4.145608029883936,
    "tradesDelay" : { },
    "availableInvestmentBase" : 7.457744773683766,
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "totalAvailableInvestment" : 4.965218492984954,
    "stopOutLevelSelected" : 1.4894159098541704,
    "investmentScale" : 3.616076749251911,
    "successFeeCurrent" : 1.0246457001441578,
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "ageDays" : 7.061401241503109,
    "personalDetails" : {
      "canWithdraw" : true,
      "pendingOutputIsWithdrawAll" : true,
      "subscribedAccounts" : 6,
      "canInvest" : true,
      "showTwoFactorButton" : true,
      "pendingOutput" : 9.018348186070783,
      "hasNotifications" : true,
      "pendingInput" : 8.762042012749001,
      "profitPercent" : 9.369310271410669,
      "isReinvest" : true,
      "migration" : {
        "newBroker" : {
          "leverageMin" : 6,
          "leverageMax" : 1,
          "assets" : "assets",
          "terms" : "terms",
          "fee" : 0.8008281904610115,
          "name" : "name",
          "description" : "description",
          "logo" : "logo",
          "accountTypes" : [ {
            "name" : "name",
            "description" : "description",
            "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "isSignalsAvailable" : true,
            "type" : { },
            "leverages" : [ 5, 5 ],
            "minimumDepositsAmount" : {
              "key" : 5.637376656633329
            },
            "isKycRequired" : true,
            "currencies" : [ "currencies", "currencies" ]
          }, {
            "name" : "name",
            "description" : "description",
            "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "isSignalsAvailable" : true,
            "type" : { },
            "leverages" : [ 5, 5 ],
            "minimumDepositsAmount" : {
              "key" : 5.637376656633329
            },
            "isKycRequired" : true,
            "currencies" : [ "currencies", "currencies" ]
          } ],
          "isKycRequired" : true,
          "tags" : [ {
            "color" : "color",
            "name" : "name"
          }, {
            "color" : "color",
            "name" : "name"
          } ]
        },
        "newLeverage" : 3,
        "dateCreate" : "2000-01-23T04:56:07.000+00:00"
      },
      "value" : 5.025004791520295,
      "profit" : 9.965781217890562,
      "successFeePersonal" : 6.438423552598547,
      "invested" : 6.683562403749608,
      "isFavorite" : true,
      "isInvested" : true,
      "status" : { }
    },
    "volumeScale" : 2.027123023002322,
    "levelProgress" : 5.637376656633329
  },
  "tradingAccountInfo" : {
    "leverageMin" : 0,
    "leverageMax" : 6,
    "balance" : 1.4658129805029452,
    "currency" : "USD",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "login" : "login"
  },
  "publicInfo" : {
    "typeExt" : { },
    "color" : "color",
    "description" : "description",
    "logo" : "logo",
    "isOwnAsset" : true,
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "status" : "status"
  },
  "ownerActions" : {
    "canClose" : true,
    "isEnoughMoneyToCreateProgram" : true,
    "canChangePassword" : true,
    "canEditSignalProviderSettings" : true,
    "canMakeSignalProviderFromPrivateTradingAccount" : true,
    "canMakeSignalProviderFromProgram" : true,
    "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
    "canTransferMoney" : true,
    "canMakeProgramFromPrivateTradingAccount" : true,
    "canClosePeriod" : true,
    "canMakeProgramFromSignalProvider" : true
  },
  "followDetails" : {
    "tradesCount" : 1,
    "signalSettings" : {
      "signalSuccessFee" : 2.8841621266687802,
      "signalVolumeFee" : 6.778324963048013,
      "isActive" : true
    },
    "subscribersCount" : 6,
    "personalDetails" : {
      "guestActions" : {
        "canSubscribeToExternalSignalPrivateAccount" : true,
        "canSubscribeToExternalSignalCommonAccount" : true,
        "canSubscribeToInternalSignal" : true
      },
      "hasNotifications" : true,
      "subscribedAccounts" : 5,
      "isFavorite" : true
    }
  },
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "brokerDetails" : {
    "showCommissionRebateSometime" : true,
    "showCommissionRebate" : true,
    "showSwaps" : true,
    "showTicketsSometime" : true,
    "type" : { },
    "showTickets" : true,
    "isKycRequired" : true,
    "name" : "name",
    "logo" : "logo",
    "showSwapsSometime" : true,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "isSignalsAvailable" : true,
    "isKycRequiredSometime" : true
  },
  "tags" : [ {
    "color" : "color",
    "name" : "name"
  }, {
    "color" : "color",
    "name" : "name"
  } ]
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header)  (optional)

     - returns: RequestBuilder<ProgramFollowDetailsFull> 
     */
    open class func getFollowAssetDetailsWithRequestBuilder(id: String, authorization: String? = nil) -> RequestBuilder<ProgramFollowDetailsFull> {
        var path = "/v2.0/follow/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramFollowDetailsFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_getFollowAssets: String { 
        case byTitleAsc = "ByTitleAsc"
        case byTitleDesc = "ByTitleDesc"
        case bySubscribersAsc = "BySubscribersAsc"
        case bySubscribersDesc = "BySubscribersDesc"
        case byTradesAsc = "ByTradesAsc"
        case byTradesDesc = "ByTradesDesc"
        case byDrawdownAsc = "ByDrawdownAsc"
        case byDrawdownDesc = "ByDrawdownDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byNewAsc = "ByNewAsc"
        case byNewDesc = "ByNewDesc"
    }

    /**
     * enum for parameter showIn
     */
    public enum ShowIn_getFollowAssets: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Follow assets
     
     - parameter authorization: (header)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter tags: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter facetId: (query)  (optional)
     - parameter mask: (query)  (optional)
     - parameter ownerId: (query)  (optional)
     - parameter showFavorites: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFollowAssets(authorization: String? = nil, sorting: Sorting_getFollowAssets? = nil, showIn: ShowIn_getFollowAssets? = nil, tags: [String]? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ItemsViewModelFollowDetailsListItem?,_ error: Error?) -> Void)) {
        getFollowAssetsWithRequestBuilder(authorization: authorization, sorting: sorting, showIn: showIn, tags: tags, dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, facetId: facetId, mask: mask, ownerId: ownerId, showFavorites: showFavorites, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Follow assets
     - GET /v2.0/follow
     - examples: [{contentType=application/json, example={
  "total" : 6,
  "items" : [ {
    "leverageMin" : 1,
    "owner" : {
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "username" : "username"
    },
    "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "color" : "color",
    "isExternal" : true,
    "subscribersCount" : 7,
    "brokerType" : { },
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "tradesCount" : 1,
    "leverageMax" : 1,
    "logo" : "logo",
    "personalDetails" : {
      "isOwnAsset" : true,
      "isFavorite" : true
    },
    "currency" : "USD",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "status"
  }, {
    "leverageMin" : 1,
    "owner" : {
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "username" : "username"
    },
    "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "color" : "color",
    "isExternal" : true,
    "subscribersCount" : 7,
    "brokerType" : { },
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "tradesCount" : 1,
    "leverageMax" : 1,
    "logo" : "logo",
    "personalDetails" : {
      "isOwnAsset" : true,
      "isFavorite" : true
    },
    "currency" : "USD",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "status"
  } ]
}}]
     
     - parameter authorization: (header)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter tags: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter facetId: (query)  (optional)
     - parameter mask: (query)  (optional)
     - parameter ownerId: (query)  (optional)
     - parameter showFavorites: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ItemsViewModelFollowDetailsListItem> 
     */
    open class func getFollowAssetsWithRequestBuilder(authorization: String? = nil, sorting: Sorting_getFollowAssets? = nil, showIn: ShowIn_getFollowAssets? = nil, tags: [String]? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ItemsViewModelFollowDetailsListItem> {
        let path = "/v2.0/follow"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "Sorting": sorting?.rawValue, 
            "ShowIn": showIn?.rawValue, 
            "Tags": tags, 
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
            "FacetId": facetId, 
            "Mask": mask, 
            "OwnerId": ownerId, 
            "ShowFavorites": showFavorites, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ItemsViewModelFollowDetailsListItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get subscriptions to current asset
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter onlyActive: (query)  (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFollowSubscriptionsForAsset(id: UUID, authorization: String, onlyActive: Bool? = nil, completion: @escaping ((_ data: ItemsViewModelSignalSubscription?,_ error: Error?) -> Void)) {
        getFollowSubscriptionsForAssetWithRequestBuilder(id: id, authorization: authorization, onlyActive: onlyActive).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get subscriptions to current asset
     - POST /v2.0/follow/{id}/subscriptions
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "items" : [ {
    "unsubscriptionDate" : "2000-01-23T04:56:07.000+00:00",
    "totalVolume" : 5.637376656633329,
    "hasSignalAccount" : true,
    "isExternal" : true,
    "totalProfit" : 5.962133916683182,
    "fixedCurrency" : "USD",
    "fixedVolume" : 1.4658129805029452,
    "openTolerancePercent" : 6.027456183070403,
    "percent" : 0.8008281904610115,
    "mode" : { },
    "subscriptionDate" : "2000-01-23T04:56:07.000+00:00",
    "subscriberInfo" : {
      "tradingAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "tradingAccountLogin" : "tradingAccountLogin"
    },
    "detachMode" : "None",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "url" : "url",
      "assetType" : { }
    },
    "hasActiveSubscription" : true,
    "status" : "status"
  }, {
    "unsubscriptionDate" : "2000-01-23T04:56:07.000+00:00",
    "totalVolume" : 5.637376656633329,
    "hasSignalAccount" : true,
    "isExternal" : true,
    "totalProfit" : 5.962133916683182,
    "fixedCurrency" : "USD",
    "fixedVolume" : 1.4658129805029452,
    "openTolerancePercent" : 6.027456183070403,
    "percent" : 0.8008281904610115,
    "mode" : { },
    "subscriptionDate" : "2000-01-23T04:56:07.000+00:00",
    "subscriberInfo" : {
      "tradingAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "tradingAccountLogin" : "tradingAccountLogin"
    },
    "detachMode" : "None",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "url" : "url",
      "assetType" : { }
    },
    "hasActiveSubscription" : true,
    "status" : "status"
  } ]
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter onlyActive: (query)  (optional, default to true)

     - returns: RequestBuilder<ItemsViewModelSignalSubscription> 
     */
    open class func getFollowSubscriptionsForAssetWithRequestBuilder(id: UUID, authorization: String, onlyActive: Bool? = nil) -> RequestBuilder<ItemsViewModelSignalSubscription> {
        var path = "/v2.0/follow/{id}/subscriptions"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "onlyActive": onlyActive
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ItemsViewModelSignalSubscription>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get subscriptions for my trading account
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter onlyActive: (query)  (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFollowSubscriptionsForOwnAccount(id: UUID, authorization: String, onlyActive: Bool? = nil, completion: @escaping ((_ data: ItemsViewModelSignalSubscription?,_ error: Error?) -> Void)) {
        getFollowSubscriptionsForOwnAccountWithRequestBuilder(id: id, authorization: authorization, onlyActive: onlyActive).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get subscriptions for my trading account
     - POST /v2.0/follow/account/own/{id}/subscriptions
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "items" : [ {
    "unsubscriptionDate" : "2000-01-23T04:56:07.000+00:00",
    "totalVolume" : 5.637376656633329,
    "hasSignalAccount" : true,
    "isExternal" : true,
    "totalProfit" : 5.962133916683182,
    "fixedCurrency" : "USD",
    "fixedVolume" : 1.4658129805029452,
    "openTolerancePercent" : 6.027456183070403,
    "percent" : 0.8008281904610115,
    "mode" : { },
    "subscriptionDate" : "2000-01-23T04:56:07.000+00:00",
    "subscriberInfo" : {
      "tradingAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "tradingAccountLogin" : "tradingAccountLogin"
    },
    "detachMode" : "None",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "url" : "url",
      "assetType" : { }
    },
    "hasActiveSubscription" : true,
    "status" : "status"
  }, {
    "unsubscriptionDate" : "2000-01-23T04:56:07.000+00:00",
    "totalVolume" : 5.637376656633329,
    "hasSignalAccount" : true,
    "isExternal" : true,
    "totalProfit" : 5.962133916683182,
    "fixedCurrency" : "USD",
    "fixedVolume" : 1.4658129805029452,
    "openTolerancePercent" : 6.027456183070403,
    "percent" : 0.8008281904610115,
    "mode" : { },
    "subscriptionDate" : "2000-01-23T04:56:07.000+00:00",
    "subscriberInfo" : {
      "tradingAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "tradingAccountLogin" : "tradingAccountLogin"
    },
    "detachMode" : "None",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "url" : "url",
      "assetType" : { }
    },
    "hasActiveSubscription" : true,
    "status" : "status"
  } ]
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter onlyActive: (query)  (optional, default to true)

     - returns: RequestBuilder<ItemsViewModelSignalSubscription> 
     */
    open class func getFollowSubscriptionsForOwnAccountWithRequestBuilder(id: UUID, authorization: String, onlyActive: Bool? = nil) -> RequestBuilder<ItemsViewModelSignalSubscription> {
        var path = "/v2.0/follow/account/own/{id}/subscriptions"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "onlyActive": onlyActive
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ItemsViewModelSignalSubscription>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getProfitPercentCharts: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Follow profit percent charts
     
     - parameter id: (path)  
     - parameter authorization: (header)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter currencies: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProfitPercentCharts(id: UUID, authorization: String? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getProfitPercentCharts? = nil, currencies: [String]? = nil, completion: @escaping ((_ data: ProgramProfitPercentCharts?,_ error: Error?) -> Void)) {
        getProfitPercentChartsWithRequestBuilder(id: id, authorization: authorization, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency, currencies: currencies).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Follow profit percent charts
     - GET /v2.0/follow/{id}/charts/profit/percent
     - examples: [{contentType=application/json, example={
  "statistic" : {
    "profitFactor" : 2.3021358869347655,
    "calmarRatio" : 4.145608029883936,
    "subscribers" : 6,
    "trades" : 5,
    "maxDrawdown" : 7.386281948385884,
    "investors" : 0,
    "tradingVolume" : 1.4658129805029452,
    "sortinoRatio" : 2.027123023002322,
    "balance" : 7.061401241503109,
    "profitPercent" : 9.301444243932576,
    "successTradesPercent" : 5.637376656633329,
    "lastPeriodEnds" : "2000-01-23T04:56:07.000+00:00",
    "sharpeRatio" : 3.616076749251911,
    "lastPeriodStarts" : "2000-01-23T04:56:07.000+00:00"
  },
  "charts" : [ {
    "color" : "color",
    "currency" : { },
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  }, {
    "color" : "color",
    "currency" : { },
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  } ]
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter currencies: (query)  (optional)

     - returns: RequestBuilder<ProgramProfitPercentCharts> 
     */
    open class func getProfitPercentChartsWithRequestBuilder(id: UUID, authorization: String? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getProfitPercentCharts? = nil, currencies: [String]? = nil) -> RequestBuilder<ProgramProfitPercentCharts> {
        var path = "/v2.0/follow/{id}/charts/profit/percent"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "MaxPointCount": maxPointCount?.encodeToJSON(), 
            "Currency": currency?.rawValue, 
            "currencies": currencies
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramProfitPercentCharts>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Remove from favorites
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeFromFavorites(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        removeFromFavoritesWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Remove from favorites
     - POST /v2.0/follow/{id}/favorite/remove
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func removeFromFavoritesWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v2.0/follow/{id}/favorite/remove"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
