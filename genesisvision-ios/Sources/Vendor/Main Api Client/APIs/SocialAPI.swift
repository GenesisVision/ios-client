//
// SocialAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SocialAPI {
    /**
     Add post
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addPost(body: NewPost? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add post
     - POST /v2.0/social/feed/add
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func addPostWithRequestBuilder(body: NewPost? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/social/feed/add"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete post
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePost(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deletePostWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete post
     - POST /v2.0/social/feed/{id}/delete
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deletePostWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/social/feed/{id}/delete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Edit post
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func editPost(body: EditPost? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        editPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Edit post
     - POST /v2.0/social/feed/edit
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func editPostWithRequestBuilder(body: EditPost? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/social/feed/edit"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Follow user
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func followUser(userId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        followUserWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Follow user
     - POST /v2.0/social/user/{userId}/follow
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter userId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func followUserWithRequestBuilder(userId: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/social/user/{userId}/follow"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get feed
     - parameter userId: (query)  (optional)     - parameter tagContentId: (query)  (optional)     - parameter tagContentIds: (query)  (optional)     - parameter userMode: (query)  (optional)     - parameter hashTags: (query)  (optional)     - parameter mask: (query)  (optional)     - parameter showTop: (query)  (optional)     - parameter showLiked: (query)  (optional)     - parameter showOnlyUserPosts: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFeed(userId: UUID? = nil, tagContentId: UUID? = nil, tagContentIds: [UUID]? = nil, userMode: UserFeedMode? = nil, hashTags: [String]? = nil, mask: String? = nil, showTop: Bool? = nil, showLiked: Bool? = nil, showOnlyUserPosts: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: PostItemsViewModel?,_ error: Error?) -> Void)) {
        getFeedWithRequestBuilder(userId: userId, tagContentId: tagContentId, tagContentIds: tagContentIds, userMode: userMode, hashTags: hashTags, mask: mask, showTop: showTop, showLiked: showLiked, showOnlyUserPosts: showOnlyUserPosts, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get feed
     - GET /v2.0/social/feed
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "isHighlighted" : true,
    "images" : [ {
      "resizes" : [ {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      }, {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      } ],
      "id" : "id"
    }, {
      "resizes" : [ {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      }, {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      } ],
      "id" : "id"
    } ],
    "comments" : [ null, null ],
    "isPinned" : true,
    "likesUsers" : [ {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    }, {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    } ],
    "url" : "url",
    "tags" : [ {
      "number" : 2,
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "priceCurrency" : "Undefined",
        "change24Percent" : 9.301444243932576,
        "color" : "color",
        "price" : 7.061401241503109,
        "changeState" : "NotChanged",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "assetType" : "None"
      },
      "link" : {
        "title" : "title",
        "url" : "url"
      },
      "platformAssetDetails" : {
        "change24Percent" : 2.027123023002322,
        "color" : "color",
        "provider" : "Undefined",
        "price" : 3.616076749251911,
        "name" : "name",
        "description" : "description",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "asset" : "asset",
        "logoUrl" : "logoUrl",
        "url" : "url"
      },
      "title" : "title",
      "type" : "Undefined",
      "event" : {
        "amount" : 4.145608029883936,
        "title" : "title",
        "percent" : 7.386281948385884,
        "logoUrl" : "logoUrl"
      },
      "userDetails" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      }
    }, {
      "number" : 2,
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "priceCurrency" : "Undefined",
        "change24Percent" : 9.301444243932576,
        "color" : "color",
        "price" : 7.061401241503109,
        "changeState" : "NotChanged",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "assetType" : "None"
      },
      "link" : {
        "title" : "title",
        "url" : "url"
      },
      "platformAssetDetails" : {
        "change24Percent" : 2.027123023002322,
        "color" : "color",
        "provider" : "Undefined",
        "price" : 3.616076749251911,
        "name" : "name",
        "description" : "description",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "asset" : "asset",
        "logoUrl" : "logoUrl",
        "url" : "url"
      },
      "title" : "title",
      "type" : "Undefined",
      "event" : {
        "amount" : 4.145608029883936,
        "title" : "title",
        "percent" : 7.386281948385884,
        "logoUrl" : "logoUrl"
      },
      "userDetails" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      }
    } ],
    "likesCount" : 0,
    "impressionsCount" : 1,
    "isDeleted" : true,
    "rePostsUsers" : [ null, null ],
    "personalDetails" : {
      "canEdit" : true,
      "isLiked" : true,
      "canDelete" : true,
      "canComment" : true,
      "canPin" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "text" : "text",
    "rePostsCount" : 6
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "isHighlighted" : true,
    "images" : [ {
      "resizes" : [ {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      }, {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      } ],
      "id" : "id"
    }, {
      "resizes" : [ {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      }, {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      } ],
      "id" : "id"
    } ],
    "comments" : [ null, null ],
    "isPinned" : true,
    "likesUsers" : [ {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    }, {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    } ],
    "url" : "url",
    "tags" : [ {
      "number" : 2,
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "priceCurrency" : "Undefined",
        "change24Percent" : 9.301444243932576,
        "color" : "color",
        "price" : 7.061401241503109,
        "changeState" : "NotChanged",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "assetType" : "None"
      },
      "link" : {
        "title" : "title",
        "url" : "url"
      },
      "platformAssetDetails" : {
        "change24Percent" : 2.027123023002322,
        "color" : "color",
        "provider" : "Undefined",
        "price" : 3.616076749251911,
        "name" : "name",
        "description" : "description",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "asset" : "asset",
        "logoUrl" : "logoUrl",
        "url" : "url"
      },
      "title" : "title",
      "type" : "Undefined",
      "event" : {
        "amount" : 4.145608029883936,
        "title" : "title",
        "percent" : 7.386281948385884,
        "logoUrl" : "logoUrl"
      },
      "userDetails" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      }
    }, {
      "number" : 2,
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "priceCurrency" : "Undefined",
        "change24Percent" : 9.301444243932576,
        "color" : "color",
        "price" : 7.061401241503109,
        "changeState" : "NotChanged",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "assetType" : "None"
      },
      "link" : {
        "title" : "title",
        "url" : "url"
      },
      "platformAssetDetails" : {
        "change24Percent" : 2.027123023002322,
        "color" : "color",
        "provider" : "Undefined",
        "price" : 3.616076749251911,
        "name" : "name",
        "description" : "description",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "asset" : "asset",
        "logoUrl" : "logoUrl",
        "url" : "url"
      },
      "title" : "title",
      "type" : "Undefined",
      "event" : {
        "amount" : 4.145608029883936,
        "title" : "title",
        "percent" : 7.386281948385884,
        "logoUrl" : "logoUrl"
      },
      "userDetails" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      }
    } ],
    "likesCount" : 0,
    "impressionsCount" : 1,
    "isDeleted" : true,
    "rePostsUsers" : [ null, null ],
    "personalDetails" : {
      "canEdit" : true,
      "isLiked" : true,
      "canDelete" : true,
      "canComment" : true,
      "canPin" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "text" : "text",
    "rePostsCount" : 6
  } ]
}}]
     - parameter userId: (query)  (optional)     - parameter tagContentId: (query)  (optional)     - parameter tagContentIds: (query)  (optional)     - parameter userMode: (query)  (optional)     - parameter hashTags: (query)  (optional)     - parameter mask: (query)  (optional)     - parameter showTop: (query)  (optional)     - parameter showLiked: (query)  (optional)     - parameter showOnlyUserPosts: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<PostItemsViewModel> 
     */
    open class func getFeedWithRequestBuilder(userId: UUID? = nil, tagContentId: UUID? = nil, tagContentIds: [UUID]? = nil, userMode: UserFeedMode? = nil, hashTags: [String]? = nil, mask: String? = nil, showTop: Bool? = nil, showLiked: Bool? = nil, showOnlyUserPosts: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<PostItemsViewModel> {
        let path = "/v2.0/social/feed"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "UserId": userId, 
                        "TagContentId": tagContentId, 
                        "TagContentIds": tagContentIds, 
                        "UserMode": userMode, 
                        "HashTags": hashTags, 
                        "Mask": mask, 
                        "ShowTop": showTop, 
                        "ShowLiked": showLiked, 
                        "ShowOnlyUserPosts": showOnlyUserPosts, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PostItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get original post/comment
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOriginalPost(_id: String, completion: @escaping ((_ data: EditablePost?,_ error: Error?) -> Void)) {
        getOriginalPostWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get original post/comment
     - GET /v2.0/social/feed/{id}/original
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "isHighlighted" : true,
  "images" : [ {
    "resizes" : [ {
      "width" : 5,
      "logoUrl" : "logoUrl",
      "quality" : "Low",
      "height" : 5
    }, {
      "width" : 5,
      "logoUrl" : "logoUrl",
      "quality" : "Low",
      "height" : 5
    } ],
    "id" : "id"
  }, {
    "resizes" : [ {
      "width" : 5,
      "logoUrl" : "logoUrl",
      "quality" : "Low",
      "height" : 5
    }, {
      "width" : 5,
      "logoUrl" : "logoUrl",
      "quality" : "Low",
      "height" : 5
    } ],
    "id" : "id"
  } ],
  "comments" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "isHighlighted" : true,
    "images" : [ {
      "resizes" : [ {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      }, {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      } ],
      "id" : "id"
    }, {
      "resizes" : [ {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      }, {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      } ],
      "id" : "id"
    } ],
    "comments" : [ null, null ],
    "isPinned" : true,
    "likesUsers" : [ {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    }, {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    } ],
    "url" : "url",
    "tags" : [ {
      "number" : 2,
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "priceCurrency" : "Undefined",
        "change24Percent" : 9.301444243932576,
        "color" : "color",
        "price" : 7.061401241503109,
        "changeState" : "NotChanged",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "assetType" : "None"
      },
      "link" : {
        "title" : "title",
        "url" : "url"
      },
      "platformAssetDetails" : {
        "change24Percent" : 2.027123023002322,
        "color" : "color",
        "provider" : "Undefined",
        "price" : 3.616076749251911,
        "name" : "name",
        "description" : "description",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "asset" : "asset",
        "logoUrl" : "logoUrl",
        "url" : "url"
      },
      "title" : "title",
      "type" : "Undefined",
      "event" : {
        "amount" : 4.145608029883936,
        "title" : "title",
        "percent" : 7.386281948385884,
        "logoUrl" : "logoUrl"
      },
      "userDetails" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      }
    }, {
      "number" : 2,
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "priceCurrency" : "Undefined",
        "change24Percent" : 9.301444243932576,
        "color" : "color",
        "price" : 7.061401241503109,
        "changeState" : "NotChanged",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "assetType" : "None"
      },
      "link" : {
        "title" : "title",
        "url" : "url"
      },
      "platformAssetDetails" : {
        "change24Percent" : 2.027123023002322,
        "color" : "color",
        "provider" : "Undefined",
        "price" : 3.616076749251911,
        "name" : "name",
        "description" : "description",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "asset" : "asset",
        "logoUrl" : "logoUrl",
        "url" : "url"
      },
      "title" : "title",
      "type" : "Undefined",
      "event" : {
        "amount" : 4.145608029883936,
        "title" : "title",
        "percent" : 7.386281948385884,
        "logoUrl" : "logoUrl"
      },
      "userDetails" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      }
    } ],
    "likesCount" : 0,
    "impressionsCount" : 1,
    "isDeleted" : true,
    "rePostsUsers" : [ null, null ],
    "personalDetails" : {
      "canEdit" : true,
      "isLiked" : true,
      "canDelete" : true,
      "canComment" : true,
      "canPin" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "text" : "text",
    "rePostsCount" : 6
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "isHighlighted" : true,
    "images" : [ {
      "resizes" : [ {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      }, {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      } ],
      "id" : "id"
    }, {
      "resizes" : [ {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      }, {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      } ],
      "id" : "id"
    } ],
    "comments" : [ null, null ],
    "isPinned" : true,
    "likesUsers" : [ {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    }, {
      "personalDetails" : {
        "isFollow" : true,
        "allowFollow" : true,
        "canCommentPosts" : true,
        "canWritePost" : true
      },
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "logoUrl" : "logoUrl",
      "username" : "username"
    } ],
    "url" : "url",
    "tags" : [ {
      "number" : 2,
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "priceCurrency" : "Undefined",
        "change24Percent" : 9.301444243932576,
        "color" : "color",
        "price" : 7.061401241503109,
        "changeState" : "NotChanged",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "assetType" : "None"
      },
      "link" : {
        "title" : "title",
        "url" : "url"
      },
      "platformAssetDetails" : {
        "change24Percent" : 2.027123023002322,
        "color" : "color",
        "provider" : "Undefined",
        "price" : 3.616076749251911,
        "name" : "name",
        "description" : "description",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "asset" : "asset",
        "logoUrl" : "logoUrl",
        "url" : "url"
      },
      "title" : "title",
      "type" : "Undefined",
      "event" : {
        "amount" : 4.145608029883936,
        "title" : "title",
        "percent" : 7.386281948385884,
        "logoUrl" : "logoUrl"
      },
      "userDetails" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      }
    }, {
      "number" : 2,
      "assetDetails" : {
        "programDetails" : {
          "level" : 0,
          "levelProgress" : 6.027456183070403
        },
        "priceCurrency" : "Undefined",
        "change24Percent" : 9.301444243932576,
        "color" : "color",
        "price" : 7.061401241503109,
        "changeState" : "NotChanged",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "title" : "title",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "assetType" : "None"
      },
      "link" : {
        "title" : "title",
        "url" : "url"
      },
      "platformAssetDetails" : {
        "change24Percent" : 2.027123023002322,
        "color" : "color",
        "provider" : "Undefined",
        "price" : 3.616076749251911,
        "name" : "name",
        "description" : "description",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "asset" : "asset",
        "logoUrl" : "logoUrl",
        "url" : "url"
      },
      "title" : "title",
      "type" : "Undefined",
      "event" : {
        "amount" : 4.145608029883936,
        "title" : "title",
        "percent" : 7.386281948385884,
        "logoUrl" : "logoUrl"
      },
      "userDetails" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      }
    } ],
    "likesCount" : 0,
    "impressionsCount" : 1,
    "isDeleted" : true,
    "rePostsUsers" : [ null, null ],
    "personalDetails" : {
      "canEdit" : true,
      "isLiked" : true,
      "canDelete" : true,
      "canComment" : true,
      "canPin" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "text" : "text",
    "rePostsCount" : 6
  } ],
  "isPinned" : true,
  "author" : {
    "socialLinks" : [ {
      "name" : "name",
      "type" : "Undefined",
      "value" : "value",
      "url" : "url",
      "logoUrl" : "logoUrl"
    }, {
      "name" : "name",
      "type" : "Undefined",
      "value" : "value",
      "url" : "url",
      "logoUrl" : "logoUrl"
    } ],
    "registrationDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "logoUrl" : "logoUrl",
    "url" : "url",
    "username" : "username"
  },
  "textOriginal" : "textOriginal",
  "likesUsers" : [ {
    "personalDetails" : {
      "isFollow" : true,
      "allowFollow" : true,
      "canCommentPosts" : true,
      "canWritePost" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "url" : "url",
    "logoUrl" : "logoUrl",
    "username" : "username"
  }, {
    "personalDetails" : {
      "isFollow" : true,
      "allowFollow" : true,
      "canCommentPosts" : true,
      "canWritePost" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "url" : "url",
    "logoUrl" : "logoUrl",
    "username" : "username"
  } ],
  "url" : "url",
  "tags" : [ {
    "number" : 2,
    "assetDetails" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "priceCurrency" : "Undefined",
      "change24Percent" : 9.301444243932576,
      "color" : "color",
      "price" : 7.061401241503109,
      "changeState" : "NotChanged",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None"
    },
    "link" : {
      "title" : "title",
      "url" : "url"
    },
    "platformAssetDetails" : {
      "change24Percent" : 2.027123023002322,
      "color" : "color",
      "provider" : "Undefined",
      "price" : 3.616076749251911,
      "name" : "name",
      "description" : "description",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "asset" : "asset",
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "title" : "title",
    "type" : "Undefined",
    "event" : {
      "amount" : 4.145608029883936,
      "title" : "title",
      "percent" : 7.386281948385884,
      "logoUrl" : "logoUrl"
    },
    "userDetails" : {
      "socialLinks" : [ {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      }, {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      } ],
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "username" : "username"
    }
  }, {
    "number" : 2,
    "assetDetails" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "priceCurrency" : "Undefined",
      "change24Percent" : 9.301444243932576,
      "color" : "color",
      "price" : 7.061401241503109,
      "changeState" : "NotChanged",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None"
    },
    "link" : {
      "title" : "title",
      "url" : "url"
    },
    "platformAssetDetails" : {
      "change24Percent" : 2.027123023002322,
      "color" : "color",
      "provider" : "Undefined",
      "price" : 3.616076749251911,
      "name" : "name",
      "description" : "description",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "asset" : "asset",
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "title" : "title",
    "type" : "Undefined",
    "event" : {
      "amount" : 4.145608029883936,
      "title" : "title",
      "percent" : 7.386281948385884,
      "logoUrl" : "logoUrl"
    },
    "userDetails" : {
      "socialLinks" : [ {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      }, {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      } ],
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "username" : "username"
    }
  } ],
  "likesCount" : 0,
  "impressionsCount" : 1,
  "isDeleted" : true,
  "rePostsUsers" : [ null, null ],
  "personalDetails" : {
    "canEdit" : true,
    "isLiked" : true,
    "canDelete" : true,
    "canComment" : true,
    "canPin" : true
  },
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "text" : "text",
  "rePostsCount" : 6
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<EditablePost> 
     */
    open class func getOriginalPostWithRequestBuilder(_id: String) -> RequestBuilder<EditablePost> {
        var path = "/v2.0/social/feed/{id}/original"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EditablePost>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get post
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPost(_id: String, completion: @escaping ((_ data: Post?,_ error: Error?) -> Void)) {
        getPostWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get post
     - GET /v2.0/social/feed/{id}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "isHighlighted" : true,
  "images" : [ {
    "resizes" : [ {
      "width" : 5,
      "logoUrl" : "logoUrl",
      "quality" : "Low",
      "height" : 5
    }, {
      "width" : 5,
      "logoUrl" : "logoUrl",
      "quality" : "Low",
      "height" : 5
    } ],
    "id" : "id"
  }, {
    "resizes" : [ {
      "width" : 5,
      "logoUrl" : "logoUrl",
      "quality" : "Low",
      "height" : 5
    }, {
      "width" : 5,
      "logoUrl" : "logoUrl",
      "quality" : "Low",
      "height" : 5
    } ],
    "id" : "id"
  } ],
  "comments" : [ null, null ],
  "isPinned" : true,
  "likesUsers" : [ {
    "personalDetails" : {
      "isFollow" : true,
      "allowFollow" : true,
      "canCommentPosts" : true,
      "canWritePost" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "url" : "url",
    "logoUrl" : "logoUrl",
    "username" : "username"
  }, {
    "personalDetails" : {
      "isFollow" : true,
      "allowFollow" : true,
      "canCommentPosts" : true,
      "canWritePost" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "url" : "url",
    "logoUrl" : "logoUrl",
    "username" : "username"
  } ],
  "url" : "url",
  "tags" : [ {
    "number" : 2,
    "assetDetails" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "priceCurrency" : "Undefined",
      "change24Percent" : 9.301444243932576,
      "color" : "color",
      "price" : 7.061401241503109,
      "changeState" : "NotChanged",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None"
    },
    "link" : {
      "title" : "title",
      "url" : "url"
    },
    "platformAssetDetails" : {
      "change24Percent" : 2.027123023002322,
      "color" : "color",
      "provider" : "Undefined",
      "price" : 3.616076749251911,
      "name" : "name",
      "description" : "description",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "asset" : "asset",
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "title" : "title",
    "type" : "Undefined",
    "event" : {
      "amount" : 4.145608029883936,
      "title" : "title",
      "percent" : 7.386281948385884,
      "logoUrl" : "logoUrl"
    },
    "userDetails" : {
      "socialLinks" : [ {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      }, {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      } ],
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "username" : "username"
    }
  }, {
    "number" : 2,
    "assetDetails" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "priceCurrency" : "Undefined",
      "change24Percent" : 9.301444243932576,
      "color" : "color",
      "price" : 7.061401241503109,
      "changeState" : "NotChanged",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None"
    },
    "link" : {
      "title" : "title",
      "url" : "url"
    },
    "platformAssetDetails" : {
      "change24Percent" : 2.027123023002322,
      "color" : "color",
      "provider" : "Undefined",
      "price" : 3.616076749251911,
      "name" : "name",
      "description" : "description",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "asset" : "asset",
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "title" : "title",
    "type" : "Undefined",
    "event" : {
      "amount" : 4.145608029883936,
      "title" : "title",
      "percent" : 7.386281948385884,
      "logoUrl" : "logoUrl"
    },
    "userDetails" : {
      "socialLinks" : [ {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      }, {
        "name" : "name",
        "type" : "Undefined",
        "value" : "value",
        "url" : "url",
        "logoUrl" : "logoUrl"
      } ],
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "username" : "username"
    }
  } ],
  "likesCount" : 0,
  "impressionsCount" : 1,
  "isDeleted" : true,
  "rePostsUsers" : [ null, null ],
  "personalDetails" : {
    "canEdit" : true,
    "isLiked" : true,
    "canDelete" : true,
    "canComment" : true,
    "canPin" : true
  },
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "text" : "text",
  "rePostsCount" : 6
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<Post> 
     */
    open class func getPostWithRequestBuilder(_id: String) -> RequestBuilder<Post> {
        var path = "/v2.0/social/feed/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Post>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get post/comment likes users
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPostLikesUsers(_id: String, completion: @escaping ((_ data: ProfilePublicShortItemsViewModel?,_ error: Error?) -> Void)) {
        getPostLikesUsersWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get post/comment likes users
     - GET /v2.0/social/feed/{id}/users/likes
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "items" : [ {
    "personalDetails" : {
      "isFollow" : true,
      "allowFollow" : true,
      "canCommentPosts" : true,
      "canWritePost" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "url" : "url",
    "logoUrl" : "logoUrl",
    "username" : "username"
  }, {
    "personalDetails" : {
      "isFollow" : true,
      "allowFollow" : true,
      "canCommentPosts" : true,
      "canWritePost" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "url" : "url",
    "logoUrl" : "logoUrl",
    "username" : "username"
  } ]
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<ProfilePublicShortItemsViewModel> 
     */
    open class func getPostLikesUsersWithRequestBuilder(_id: String) -> RequestBuilder<ProfilePublicShortItemsViewModel> {
        var path = "/v2.0/social/feed/{id}/users/likes"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProfilePublicShortItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get post/comment reposts users
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPostRepostsUsers(_id: String, completion: @escaping ((_ data: ProfilePublicShortItemsViewModel?,_ error: Error?) -> Void)) {
        getPostRepostsUsersWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get post/comment reposts users
     - GET /v2.0/social/feed/{id}/users/reposts
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "items" : [ {
    "personalDetails" : {
      "isFollow" : true,
      "allowFollow" : true,
      "canCommentPosts" : true,
      "canWritePost" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "url" : "url",
    "logoUrl" : "logoUrl",
    "username" : "username"
  }, {
    "personalDetails" : {
      "isFollow" : true,
      "allowFollow" : true,
      "canCommentPosts" : true,
      "canWritePost" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "url" : "url",
    "logoUrl" : "logoUrl",
    "username" : "username"
  } ]
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<ProfilePublicShortItemsViewModel> 
     */
    open class func getPostRepostsUsersWithRequestBuilder(_id: String) -> RequestBuilder<ProfilePublicShortItemsViewModel> {
        var path = "/v2.0/social/feed/{id}/users/reposts"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProfilePublicShortItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get social media
     - parameter mask: (query)  (optional)     - parameter type: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialMedia(mask: String? = nil, type: SocialLinkType? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: MediaPostItemsViewModel?,_ error: Error?) -> Void)) {
        getSocialMediaWithRequestBuilder(mask: mask, type: type, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get social media
     - GET /v2.0/social/feed/media
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "image" : {
      "resizes" : [ {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      }, {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      } ],
      "id" : "id"
    },
    "author" : "author",
    "authorUrl" : "authorUrl",
    "authorLogoUrl" : "authorLogoUrl",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "typeLogoUrl" : "typeLogoUrl",
    "text" : "text",
    "type" : "Undefined",
    "title" : "title",
    "url" : "url"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "image" : {
      "resizes" : [ {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      }, {
        "width" : 5,
        "logoUrl" : "logoUrl",
        "quality" : "Low",
        "height" : 5
      } ],
      "id" : "id"
    },
    "author" : "author",
    "authorUrl" : "authorUrl",
    "authorLogoUrl" : "authorLogoUrl",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "typeLogoUrl" : "typeLogoUrl",
    "text" : "text",
    "type" : "Undefined",
    "title" : "title",
    "url" : "url"
  } ]
}}]
     - parameter mask: (query)  (optional)     - parameter type: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<MediaPostItemsViewModel> 
     */
    open class func getSocialMediaWithRequestBuilder(mask: String? = nil, type: SocialLinkType? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<MediaPostItemsViewModel> {
        let path = "/v2.0/social/feed/media"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "Mask": mask, 
                        "Type": type, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<MediaPostItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get social summary

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialSummary(completion: @escaping ((_ data: SocialSummary?,_ error: Error?) -> Void)) {
        getSocialSummaryWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get social summary
     - GET /v2.0/social/feed/summary
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "hotTopics" : [ {
    "impressionsCount" : 0,
    "discussCount" : 6,
    "hashTag" : "hashTag"
  }, {
    "impressionsCount" : 0,
    "discussCount" : 6,
    "hashTag" : "hashTag"
  } ],
  "topStrategies" : [ {
    "programDetails" : {
      "level" : 0,
      "levelProgress" : 6.027456183070403
    },
    "profitPercent" : 5.637376656633329,
    "color" : "color",
    "subscribersCount" : 5,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "logoUrl" : "logoUrl",
    "url" : "url",
    "investorsCount" : 1,
    "assetType" : "None"
  }, {
    "programDetails" : {
      "level" : 0,
      "levelProgress" : 6.027456183070403
    },
    "profitPercent" : 5.637376656633329,
    "color" : "color",
    "subscribersCount" : 5,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "logoUrl" : "logoUrl",
    "url" : "url",
    "investorsCount" : 1,
    "assetType" : "None"
  } ],
  "topAssets" : [ {
    "color" : "color",
    "description" : "description",
    "logoUrl" : "logoUrl",
    "url" : "url",
    "priceCurrency" : "Undefined",
    "change24Percent" : 7.061401241503109,
    "provider" : "Undefined",
    "price" : 2.3021358869347655,
    "changeState" : "NotChanged",
    "name" : "name",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "asset" : "asset",
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    } ]
  }, {
    "color" : "color",
    "description" : "description",
    "logoUrl" : "logoUrl",
    "url" : "url",
    "priceCurrency" : "Undefined",
    "change24Percent" : 7.061401241503109,
    "provider" : "Undefined",
    "price" : 2.3021358869347655,
    "changeState" : "NotChanged",
    "name" : "name",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "asset" : "asset",
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    } ]
  } ]
}}]

     - returns: RequestBuilder<SocialSummary> 
     */
    open class func getSocialSummaryWithRequestBuilder() -> RequestBuilder<SocialSummary> {
        let path = "/v2.0/social/feed/summary"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SocialSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Like
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func likePost(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        likePostWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Like
     - POST /v2.0/social/feed/{id}/like
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func likePostWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/social/feed/{id}/like"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Pin post
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pinPost(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pinPostWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Pin post
     - POST /v2.0/social/feed/{id}/pin
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func pinPostWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/social/feed/{id}/pin"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     RePost
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rePost(body: RePost? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        rePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     RePost
     - POST /v2.0/social/feed/repost
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func rePostWithRequestBuilder(body: RePost? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/social/feed/repost"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Revert deleting post
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revertDeletingPost(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        revertDeletingPostWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Revert deleting post
     - POST /v2.0/social/feed/{id}/delete/revert
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func revertDeletingPostWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/social/feed/{id}/delete/revert"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Report post/comment
     - parameter _id: (path)       - parameter reason: (query)  (optional)     - parameter text: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func spamReport(_id: String, reason: String? = nil, text: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        spamReportWithRequestBuilder(_id: _id, reason: reason, text: text).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Report post/comment
     - POST /v2.0/social/feed/{id}/report
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter reason: (query)  (optional)     - parameter text: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func spamReportWithRequestBuilder(_id: String, reason: String? = nil, text: String? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/social/feed/{id}/report"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "reason": reason, 
                        "text": text
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unfollow user
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unfollowUser(userId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        unfollowUserWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Unfollow user
     - POST /v2.0/social/user/{userId}/unfollow
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter userId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func unfollowUserWithRequestBuilder(userId: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/social/user/{userId}/unfollow"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unlike
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unlikePost(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        unlikePostWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Unlike
     - POST /v2.0/social/feed/{id}/unlike
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func unlikePostWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/social/feed/{id}/unlike"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unpin post
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unpinPost(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        unpinPostWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Unpin post
     - POST /v2.0/social/feed/{id}/unpin
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func unpinPostWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/social/feed/{id}/unpin"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
