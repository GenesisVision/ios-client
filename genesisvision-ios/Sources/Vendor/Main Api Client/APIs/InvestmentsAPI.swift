//
// InvestmentsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class InvestmentsAPI {
    /**
     Cancel investment request
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelRequest(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        cancelRequestWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Cancel investment request
     - POST /v2.0/investments/requests/{id}/cancel
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func cancelRequestWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/requests/{id}/cancel"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getFundWithdrawInfo: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Data for withdrawal from fund (in selected currency)
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFundWithdrawInfo(id: UUID, authorization: String, currency: Currency_getFundWithdrawInfo? = nil, completion: @escaping ((_ data: FundWithdrawInfo?,_ error: Error?) -> Void)) {
        getFundWithdrawInfoWithRequestBuilder(id: id, authorization: authorization, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Data for withdrawal from fund (in selected currency)
     - GET /v2.0/investments/funds/{id}/withdraw/info
     - examples: [{contentType=application/json, example={
  "exitFee" : 0.8008281904610115,
  "isOwner" : true,
  "withheldInvestment" : 1.4658129805029452,
  "title" : "title",
  "availableToWithdraw" : 6.027456183070403
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<FundWithdrawInfo> 
     */
    open class func getFundWithdrawInfoWithRequestBuilder(id: UUID, authorization: String, currency: Currency_getFundWithdrawInfo? = nil) -> RequestBuilder<FundWithdrawInfo> {
        var path = "/v2.0/investments/funds/{id}/withdraw/info"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currency": currency?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FundWithdrawInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Data for withdrawal from investment program (in program currency)
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProgramWithdrawInfo(id: UUID, authorization: String, completion: @escaping ((_ data: ProgramWithdrawInfo?,_ error: Error?) -> Void)) {
        getProgramWithdrawInfoWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Data for withdrawal from investment program (in program currency)
     - GET /v2.0/investments/programs/{id}/withdraw/info
     - examples: [{contentType=application/json, example={
  "isOwner" : true,
  "periodEnds" : "2000-01-23T04:56:07.000+00:00",
  "withheldInvestment" : 6.027456183070403,
  "title" : "title",
  "availableToWithdraw" : 0.8008281904610115
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProgramWithdrawInfo> 
     */
    open class func getProgramWithdrawInfoWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<ProgramWithdrawInfo> {
        var path = "/v2.0/investments/programs/{id}/withdraw/info"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramWithdrawInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get all requests
     
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRequests(skip: Int, take: Int, authorization: String, completion: @escaping ((_ data: ItemsViewModelAssetInvestmentRequest?,_ error: Error?) -> Void)) {
        getRequestsWithRequestBuilder(skip: skip, take: take, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get all requests
     - GET /v2.0/investments/requests/{skip}/{take}
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "canCancelRequest" : true,
    "assetDetails" : {
      "entryFee" : 6.027456183070403,
      "exitFee" : 1.4658129805029452,
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "successFee" : 5.637376656633329,
      "isWithdrawAll" : true,
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "withdrawPercent" : 5.962133916683182,
      "url" : "url",
      "assetType" : { }
    },
    "amount" : 0.8008281904610115,
    "currency" : { },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : { },
    "status" : { }
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "canCancelRequest" : true,
    "assetDetails" : {
      "entryFee" : 6.027456183070403,
      "exitFee" : 1.4658129805029452,
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "successFee" : 5.637376656633329,
      "isWithdrawAll" : true,
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "withdrawPercent" : 5.962133916683182,
      "url" : "url",
      "assetType" : { }
    },
    "amount" : 0.8008281904610115,
    "currency" : { },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : { },
    "status" : { }
  } ]
}}]
     
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ItemsViewModelAssetInvestmentRequest> 
     */
    open class func getRequestsWithRequestBuilder(skip: Int, take: Int, authorization: String) -> RequestBuilder<ItemsViewModelAssetInvestmentRequest> {
        var path = "/v2.0/investments/requests/{skip}/{take}"
        path = path.replacingOccurrences(of: "{skip}", with: "\(skip)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{take}", with: "\(take)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ItemsViewModelAssetInvestmentRequest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get program/fund requests
     
     - parameter id: (path)  
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRequestsByProgram(id: UUID, skip: Int, take: Int, authorization: String, completion: @escaping ((_ data: ItemsViewModelAssetInvestmentRequest?,_ error: Error?) -> Void)) {
        getRequestsByProgramWithRequestBuilder(id: id, skip: skip, take: take, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get program/fund requests
     - GET /v2.0/investments/requests/{id}/{skip}/{take}
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "canCancelRequest" : true,
    "assetDetails" : {
      "entryFee" : 6.027456183070403,
      "exitFee" : 1.4658129805029452,
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "successFee" : 5.637376656633329,
      "isWithdrawAll" : true,
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "withdrawPercent" : 5.962133916683182,
      "url" : "url",
      "assetType" : { }
    },
    "amount" : 0.8008281904610115,
    "currency" : { },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : { },
    "status" : { }
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "canCancelRequest" : true,
    "assetDetails" : {
      "entryFee" : 6.027456183070403,
      "exitFee" : 1.4658129805029452,
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "successFee" : 5.637376656633329,
      "isWithdrawAll" : true,
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "withdrawPercent" : 5.962133916683182,
      "url" : "url",
      "assetType" : { }
    },
    "amount" : 0.8008281904610115,
    "currency" : { },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : { },
    "status" : { }
  } ]
}}]
     
     - parameter id: (path)  
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ItemsViewModelAssetInvestmentRequest> 
     */
    open class func getRequestsByProgramWithRequestBuilder(id: UUID, skip: Int, take: Int, authorization: String) -> RequestBuilder<ItemsViewModelAssetInvestmentRequest> {
        var path = "/v2.0/investments/requests/{id}/{skip}/{take}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{skip}", with: "\(skip)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{take}", with: "\(take)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ItemsViewModelAssetInvestmentRequest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Investing into the fund
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter amount: (query)  (optional)
     - parameter walletId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func investIntoFund(id: UUID, authorization: String, amount: Double? = nil, walletId: UUID? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        investIntoFundWithRequestBuilder(id: id, authorization: authorization, amount: amount, walletId: walletId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Investing into the fund
     - POST /v2.0/investments/funds/{id}/invest
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter amount: (query)  (optional)
     - parameter walletId: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func investIntoFundWithRequestBuilder(id: UUID, authorization: String, amount: Double? = nil, walletId: UUID? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/funds/{id}/invest"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "amount": amount, 
            "walletId": walletId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Investing into the program
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter amount: (query)  (optional)
     - parameter walletId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func investIntoProgram(id: UUID, authorization: String, amount: Double? = nil, walletId: UUID? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        investIntoProgramWithRequestBuilder(id: id, authorization: authorization, amount: amount, walletId: walletId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Investing into the program
     - POST /v2.0/investments/programs/{id}/invest
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter amount: (query)  (optional)
     - parameter walletId: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func investIntoProgramWithRequestBuilder(id: UUID, authorization: String, amount: Double? = nil, walletId: UUID? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/programs/{id}/invest"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "amount": amount, 
            "walletId": walletId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Disable reinvesting
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func switchReinvestOff(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        switchReinvestOffWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Disable reinvesting
     - POST /v2.0/investments/programs/{id}/reinvest/off
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func switchReinvestOffWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/programs/{id}/reinvest/off"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Enable reinvesting
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func switchReinvestOn(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        switchReinvestOnWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Enable reinvesting
     - POST /v2.0/investments/programs/{id}/reinvest/on
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func switchReinvestOnWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/programs/{id}/reinvest/on"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_withdrawFromFund: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Withdraw from fund. Percent is % of manager total money
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter percent: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func withdrawFromFund(id: UUID, authorization: String, percent: Double? = nil, currency: Currency_withdrawFromFund? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        withdrawFromFundWithRequestBuilder(id: id, authorization: authorization, percent: percent, currency: currency).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Withdraw from fund. Percent is % of manager total money
     - POST /v2.0/investments/funds/{id}/withdraw
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter percent: (query)  (optional)
     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func withdrawFromFundWithRequestBuilder(id: UUID, authorization: String, percent: Double? = nil, currency: Currency_withdrawFromFund? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/funds/{id}/withdraw"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "percent": percent, 
            "currency": currency?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Withdrawal from program
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter amount: (query)  (optional)
     - parameter withdrawAll: (query)  (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func withdrawFromProgram(id: UUID, authorization: String, amount: Double? = nil, withdrawAll: Bool? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        withdrawFromProgramWithRequestBuilder(id: id, authorization: authorization, amount: amount, withdrawAll: withdrawAll).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Withdrawal from program
     - POST /v2.0/investments/programs/{id}/withdraw
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter amount: (query)  (optional)
     - parameter withdrawAll: (query)  (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    open class func withdrawFromProgramWithRequestBuilder(id: UUID, authorization: String, amount: Double? = nil, withdrawAll: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/programs/{id}/withdraw"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "amount": amount, 
            "withdrawAll": withdrawAll
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
