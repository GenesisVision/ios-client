//
// InvestmentsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class InvestmentsAPI {
    /**
     Cancel investment request
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelRequest(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        cancelRequestWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Cancel investment request
     - POST /v2.0/investments/requests/{id}/cancel
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func cancelRequestWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/requests/{id}/cancel"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Data for withdrawal from fund (in selected currency)
     - parameter _id: (path)       - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFundWithdrawInfo(_id: UUID, currency: Currency? = nil, completion: @escaping ((_ data: FundWithdrawInfo?,_ error: Error?) -> Void)) {
        getFundWithdrawInfoWithRequestBuilder(_id: _id, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Data for withdrawal from fund (in selected currency)
     - GET /v2.0/investments/funds/{id}/withdraw/info
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "exitFee" : 0.8008281904610115,
  "isOwner" : true,
  "withheldInvestment" : 1.4658129805029452,
  "title" : "title",
  "availableToWithdraw" : 6.027456183070403
}}]
     - parameter _id: (path)       - parameter currency: (query)  (optional)

     - returns: RequestBuilder<FundWithdrawInfo> 
     */
    open class func getFundWithdrawInfoWithRequestBuilder(_id: UUID, currency: Currency? = nil) -> RequestBuilder<FundWithdrawInfo> {
        var path = "/v2.0/investments/funds/{id}/withdraw/info"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "currency": currency
        ])

        let requestBuilder: RequestBuilder<FundWithdrawInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Data for withdrawal from investment program (in program currency)
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProgramWithdrawInfo(_id: UUID, completion: @escaping ((_ data: ProgramWithdrawInfo?,_ error: Error?) -> Void)) {
        getProgramWithdrawInfoWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Data for withdrawal from investment program (in program currency)
     - GET /v2.0/investments/programs/{id}/withdraw/info
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "isOwner" : true,
  "periodEnds" : "2000-01-23T04:56:07.000+00:00",
  "withheldInvestment" : 6.027456183070403,
  "title" : "title",
  "availableToWithdraw" : 0.8008281904610115
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<ProgramWithdrawInfo> 
     */
    open class func getProgramWithdrawInfoWithRequestBuilder(_id: UUID) -> RequestBuilder<ProgramWithdrawInfo> {
        var path = "/v2.0/investments/programs/{id}/withdraw/info"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProgramWithdrawInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all requests
     - parameter skip: (path)       - parameter take: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRequests(skip: Int, take: Int, completion: @escaping ((_ data: AssetInvestmentRequestItemsViewModel?,_ error: Error?) -> Void)) {
        getRequestsWithRequestBuilder(skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all requests
     - GET /v2.0/investments/requests/{skip}/{take}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 7,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "canCancelRequest" : true,
    "assetDetails" : {
      "entryFee" : 6.027456183070403,
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "successFee" : 2.3021358869347655,
      "isWithdrawAll" : true,
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None",
      "exitFee" : 5.962133916683182,
      "managementFee" : 1.4658129805029452,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "withdrawPercent" : 5.637376656633329
    },
    "amount" : 0.8008281904610115,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Invest",
    "status" : "New"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "canCancelRequest" : true,
    "assetDetails" : {
      "entryFee" : 6.027456183070403,
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "successFee" : 2.3021358869347655,
      "isWithdrawAll" : true,
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None",
      "exitFee" : 5.962133916683182,
      "managementFee" : 1.4658129805029452,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "withdrawPercent" : 5.637376656633329
    },
    "amount" : 0.8008281904610115,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Invest",
    "status" : "New"
  } ]
}}]
     - parameter skip: (path)       - parameter take: (path)  

     - returns: RequestBuilder<AssetInvestmentRequestItemsViewModel> 
     */
    open class func getRequestsWithRequestBuilder(skip: Int, take: Int) -> RequestBuilder<AssetInvestmentRequestItemsViewModel> {
        var path = "/v2.0/investments/requests/{skip}/{take}"
        let skipPreEscape = "\(skip)"
        let skipPostEscape = skipPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skip}", with: skipPostEscape, options: .literal, range: nil)
        let takePreEscape = "\(take)"
        let takePostEscape = takePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{take}", with: takePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AssetInvestmentRequestItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get program/fund requests
     - parameter _id: (path)       - parameter skip: (path)       - parameter take: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRequestsByProgram(_id: UUID, skip: Int, take: Int, completion: @escaping ((_ data: AssetInvestmentRequestItemsViewModel?,_ error: Error?) -> Void)) {
        getRequestsByProgramWithRequestBuilder(_id: _id, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get program/fund requests
     - GET /v2.0/investments/requests/{id}/{skip}/{take}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 7,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "canCancelRequest" : true,
    "assetDetails" : {
      "entryFee" : 6.027456183070403,
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "successFee" : 2.3021358869347655,
      "isWithdrawAll" : true,
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None",
      "exitFee" : 5.962133916683182,
      "managementFee" : 1.4658129805029452,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "withdrawPercent" : 5.637376656633329
    },
    "amount" : 0.8008281904610115,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Invest",
    "status" : "New"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "canCancelRequest" : true,
    "assetDetails" : {
      "entryFee" : 6.027456183070403,
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "successFee" : 2.3021358869347655,
      "isWithdrawAll" : true,
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None",
      "exitFee" : 5.962133916683182,
      "managementFee" : 1.4658129805029452,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "withdrawPercent" : 5.637376656633329
    },
    "amount" : 0.8008281904610115,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Invest",
    "status" : "New"
  } ]
}}]
     - parameter _id: (path)       - parameter skip: (path)       - parameter take: (path)  

     - returns: RequestBuilder<AssetInvestmentRequestItemsViewModel> 
     */
    open class func getRequestsByProgramWithRequestBuilder(_id: UUID, skip: Int, take: Int) -> RequestBuilder<AssetInvestmentRequestItemsViewModel> {
        var path = "/v2.0/investments/requests/{id}/{skip}/{take}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let skipPreEscape = "\(skip)"
        let skipPostEscape = skipPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skip}", with: skipPostEscape, options: .literal, range: nil)
        let takePreEscape = "\(take)"
        let takePostEscape = takePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{take}", with: takePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AssetInvestmentRequestItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Investing into the fund
     - parameter _id: (path)       - parameter amount: (query)  (optional)     - parameter walletId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func investIntoFund(_id: UUID, amount: Double? = nil, walletId: UUID? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        investIntoFundWithRequestBuilder(_id: _id, amount: amount, walletId: walletId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Investing into the fund
     - POST /v2.0/investments/funds/{id}/invest
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter amount: (query)  (optional)     - parameter walletId: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func investIntoFundWithRequestBuilder(_id: UUID, amount: Double? = nil, walletId: UUID? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/funds/{id}/invest"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "amount": amount, 
                        "walletId": walletId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Investing into the program
     - parameter _id: (path)       - parameter amount: (query)  (optional)     - parameter walletId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func investIntoProgram(_id: UUID, amount: Double? = nil, walletId: UUID? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        investIntoProgramWithRequestBuilder(_id: _id, amount: amount, walletId: walletId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Investing into the program
     - POST /v2.0/investments/programs/{id}/invest
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter amount: (query)  (optional)     - parameter walletId: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func investIntoProgramWithRequestBuilder(_id: UUID, amount: Double? = nil, walletId: UUID? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/programs/{id}/invest"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "amount": amount, 
                        "walletId": walletId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable autojoin
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func switchAutoJoinOff(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        switchAutoJoinOffWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Disable autojoin
     - POST /v2.0/investments/programs/{id}/autojoin/off
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func switchAutoJoinOffWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/programs/{id}/autojoin/off"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable autojoin
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func switchAutoJoinOn(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        switchAutoJoinOnWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Enable autojoin
     - POST /v2.0/investments/programs/{id}/autojoin/on
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func switchAutoJoinOnWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/programs/{id}/autojoin/on"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable reinvesting
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func switchReinvestOff(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        switchReinvestOffWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Disable reinvesting
     - POST /v2.0/investments/programs/{id}/reinvest/off
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func switchReinvestOffWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/programs/{id}/reinvest/off"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable reinvesting
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func switchReinvestOn(_id: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        switchReinvestOnWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Enable reinvesting
     - POST /v2.0/investments/programs/{id}/reinvest/on
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func switchReinvestOnWithRequestBuilder(_id: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/programs/{id}/reinvest/on"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Withdraw from fund. Percent is % of manager total money
     - parameter _id: (path)       - parameter percent: (query)  (optional)     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func withdrawFromFund(_id: UUID, percent: Double? = nil, currency: Currency? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        withdrawFromFundWithRequestBuilder(_id: _id, percent: percent, currency: currency).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Withdraw from fund. Percent is % of manager total money
     - POST /v2.0/investments/funds/{id}/withdraw
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter percent: (query)  (optional)     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func withdrawFromFundWithRequestBuilder(_id: UUID, percent: Double? = nil, currency: Currency? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/funds/{id}/withdraw"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "percent": percent, 
                        "currency": currency
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Withdrawal from program
     - parameter _id: (path)       - parameter amount: (query)  (optional)     - parameter withdrawAll: (query)  (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func withdrawFromProgram(_id: UUID, amount: Double? = nil, withdrawAll: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        withdrawFromProgramWithRequestBuilder(_id: _id, amount: amount, withdrawAll: withdrawAll).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Withdrawal from program
     - POST /v2.0/investments/programs/{id}/withdraw
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter amount: (query)  (optional)     - parameter withdrawAll: (query)  (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    open class func withdrawFromProgramWithRequestBuilder(_id: UUID, amount: Double? = nil, withdrawAll: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/investments/programs/{id}/withdraw"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "amount": amount, 
                        "withdrawAll": withdrawAll
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
