//
// TradingplatformAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TradingplatformAPI {
    /**
     Add account favorite symbol
     - parameter _id: (path)       - parameter symbol: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addFavoriteSymbol(_id: UUID, symbol: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addFavoriteSymbolWithRequestBuilder(_id: _id, symbol: symbol).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add account favorite symbol
     - POST /v2.0/tradingplatform/accounts/{id}/symbols/favorite/{symbol}/add
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter symbol: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func addFavoriteSymbolWithRequestBuilder(_id: UUID, symbol: String) -> RequestBuilder<Void> {
        var path = "/v2.0/tradingplatform/accounts/{id}/symbols/favorite/{symbol}/add"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let symbolPreEscape = "\(symbol)"
        let symbolPostEscape = symbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol}", with: symbolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Cancel all orders
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelAllOrders(accountId: UUID? = nil, symbol: String? = nil, completion: @escaping ((_ data: [BinanceRawCancelOrderId]?,_ error: Error?) -> Void)) {
        cancelAllOrdersWithRequestBuilder(accountId: accountId, symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancel all orders
     - POST /v2.0/tradingplatform/binance/spot/orders/cancel/all
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "ocoOrder" : true,
  "clientOrderId" : "clientOrderId",
  "id" : "id"
}, {
  "ocoOrder" : true,
  "clientOrderId" : "clientOrderId",
  "id" : "id"
} ]}]
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawCancelOrderId]> 
     */
    open class func cancelAllOrdersWithRequestBuilder(accountId: UUID? = nil, symbol: String? = nil) -> RequestBuilder<[BinanceRawCancelOrderId]> {
        let path = "/v2.0/tradingplatform/binance/spot/orders/cancel/all"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<[BinanceRawCancelOrderId]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Cancel order
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter orderId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelOrder(accountId: UUID? = nil, symbol: String? = nil, orderId: String? = nil, completion: @escaping ((_ data: BinanceRawCancelOrder?,_ error: Error?) -> Void)) {
        cancelOrderWithRequestBuilder(accountId: accountId, symbol: symbol, orderId: orderId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancel order
     - POST /v2.0/tradingplatform/binance/spot/orders/cancel
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "symbol" : "symbol",
  "side" : "Buy",
  "orderListId" : 6,
  "quantity" : 5.637376656633329,
  "orderId" : 0,
  "clientOrderId" : "clientOrderId",
  "type" : "Limit",
  "quantityFilled" : 2.3021358869347655,
  "originalClientOrderId" : "originalClientOrderId",
  "price" : 5.962133916683182,
  "timeInForce" : "GoodTillCancel",
  "quoteQuantity" : 1.4658129805029452,
  "quoteQuantityFilled" : 7.061401241503109,
  "status" : "New"
}}]
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter orderId: (query)  (optional)

     - returns: RequestBuilder<BinanceRawCancelOrder> 
     */
    open class func cancelOrderWithRequestBuilder(accountId: UUID? = nil, symbol: String? = nil, orderId: String? = nil) -> RequestBuilder<BinanceRawCancelOrder> {
        let path = "/v2.0/tradingplatform/binance/spot/orders/cancel"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "symbol": symbol, 
                        "orderId": orderId
        ])

        let requestBuilder: RequestBuilder<BinanceRawCancelOrder>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter leverage: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changeFuturesInitialLeverageAsync(accountId: UUID? = nil, symbol: String? = nil, leverage: Int? = nil, completion: @escaping ((_ data: BinanceRawFuturesInitialLeverageChangeResult?,_ error: Error?) -> Void)) {
        changeFuturesInitialLeverageAsyncWithRequestBuilder(accountId: accountId, symbol: symbol, leverage: leverage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v2.0/tradingplatform/binance/account/futures/leverage/initial
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "leverage" : 0,
  "symbol" : "symbol",
  "maxNotionalValue" : "maxNotionalValue"
}}]
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter leverage: (query)  (optional)

     - returns: RequestBuilder<BinanceRawFuturesInitialLeverageChangeResult> 
     */
    open class func changeFuturesInitialLeverageAsyncWithRequestBuilder(accountId: UUID? = nil, symbol: String? = nil, leverage: Int? = nil) -> RequestBuilder<BinanceRawFuturesInitialLeverageChangeResult> {
        let path = "/v2.0/tradingplatform/binance/account/futures/leverage/initial"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "symbol": symbol, 
                        "leverage": leverage?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<BinanceRawFuturesInitialLeverageChangeResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter marginType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changeFuturesMarginType(accountId: UUID? = nil, symbol: String? = nil, marginType: BinanceFuturesMarginType? = nil, completion: @escaping ((_ data: BinanceRawFuturesChangeMarginTypeResult?,_ error: Error?) -> Void)) {
        changeFuturesMarginTypeWithRequestBuilder(accountId: accountId, symbol: symbol, marginType: marginType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v2.0/tradingplatform/binance/account/futures/margin/type
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message"
}}]
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter marginType: (query)  (optional)

     - returns: RequestBuilder<BinanceRawFuturesChangeMarginTypeResult> 
     */
    open class func changeFuturesMarginTypeWithRequestBuilder(accountId: UUID? = nil, symbol: String? = nil, marginType: BinanceFuturesMarginType? = nil) -> RequestBuilder<BinanceRawFuturesChangeMarginTypeResult> {
        let path = "/v2.0/tradingplatform/binance/account/futures/margin/type"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "symbol": symbol, 
                        "marginType": marginType
        ])

        let requestBuilder: RequestBuilder<BinanceRawFuturesChangeMarginTypeResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Cancel all futures orders
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func futuresCancelAllOpenOrders(accountId: UUID? = nil, symbol: String? = nil, completion: @escaping ((_ data: BinanceRawFuturesCancelAllOrders?,_ error: Error?) -> Void)) {
        futuresCancelAllOpenOrdersWithRequestBuilder(accountId: accountId, symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancel all futures orders
     - POST /v2.0/tradingplatform/binance/futures/orders/cancel/all
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message"
}}]
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)

     - returns: RequestBuilder<BinanceRawFuturesCancelAllOrders> 
     */
    open class func futuresCancelAllOpenOrdersWithRequestBuilder(accountId: UUID? = nil, symbol: String? = nil) -> RequestBuilder<BinanceRawFuturesCancelAllOrders> {
        let path = "/v2.0/tradingplatform/binance/futures/orders/cancel/all"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<BinanceRawFuturesCancelAllOrders>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Cancel futures order
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter orderId: (query)  (optional)     - parameter origClientOrderId: (query)  (optional)     - parameter newClientOrderId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func futuresCancelOrder(accountId: UUID? = nil, symbol: String? = nil, orderId: Int64? = nil, origClientOrderId: String? = nil, newClientOrderId: String? = nil, completion: @escaping ((_ data: BinanceRawFuturesCancelOrder?,_ error: Error?) -> Void)) {
        futuresCancelOrderWithRequestBuilder(accountId: accountId, symbol: symbol, orderId: orderId, origClientOrderId: origClientOrderId, newClientOrderId: newClientOrderId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancel futures order
     - POST /v2.0/tradingplatform/binance/futures/orders/cancel
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "symbol" : "symbol",
  "cumulativeQuoteQuantity" : 5.962133916683182,
  "executedQuantity" : 5.637376656633329,
  "side" : "Buy",
  "priceRate" : 3.616076749251911,
  "originalType" : "Limit",
  "orderId" : 0,
  "originalQuantity" : 2.3021358869347655,
  "clientOrderId" : "clientOrderId",
  "positionSide" : "Short",
  "activatePrice" : 9.301444243932576,
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "closePosition" : true,
  "cumulativeQuantity" : 1.4658129805029452,
  "stopPrice" : 7.061401241503109,
  "reduceOnly" : true,
  "price" : 6.027456183070403,
  "timeInForce" : "GoodTillCancel",
  "workingType" : "Mark",
  "status" : "New"
}}]
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter orderId: (query)  (optional)     - parameter origClientOrderId: (query)  (optional)     - parameter newClientOrderId: (query)  (optional)

     - returns: RequestBuilder<BinanceRawFuturesCancelOrder> 
     */
    open class func futuresCancelOrderWithRequestBuilder(accountId: UUID? = nil, symbol: String? = nil, orderId: Int64? = nil, origClientOrderId: String? = nil, newClientOrderId: String? = nil) -> RequestBuilder<BinanceRawFuturesCancelOrder> {
        let path = "/v2.0/tradingplatform/binance/futures/orders/cancel"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "symbol": symbol, 
                        "orderId": orderId?.encodeToJSON(), 
                        "origClientOrderId": origClientOrderId, 
                        "newClientOrderId": newClientOrderId
        ])

        let requestBuilder: RequestBuilder<BinanceRawFuturesCancelOrder>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Ping futures account stream
     - parameter accountId: (query)  (optional)     - parameter listenKey: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func futuresKeepAliveAccountStream(accountId: UUID? = nil, listenKey: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        futuresKeepAliveAccountStreamWithRequestBuilder(accountId: accountId, listenKey: listenKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Ping futures account stream
     - POST /v2.0/tradingplatform/binance/futures/stream/ping
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter accountId: (query)  (optional)     - parameter listenKey: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func futuresKeepAliveAccountStreamWithRequestBuilder(accountId: UUID? = nil, listenKey: String? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/tradingplatform/binance/futures/stream/ping"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "listenKey": listenKey
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Place futures order
     - parameter body: (body)  (optional)     - parameter accountId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func futuresPlaceOrder(body: BinanceRawFuturesPlaceOrder? = nil, accountId: UUID? = nil, completion: @escaping ((_ data: BinanceRawFuturesPlacedOrder?,_ error: Error?) -> Void)) {
        futuresPlaceOrderWithRequestBuilder(body: body, accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Place futures order
     - POST /v2.0/tradingplatform/binance/futures/orders/place
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "symbol" : "symbol",
  "cumulativeQuoteQuantity" : 5.637376656633329,
  "executedQuantity" : 2.3021358869347655,
  "side" : "Buy",
  "priceRate" : 2.027123023002322,
  "orderId" : 0,
  "avgPrice" : 1.4658129805029452,
  "originalQuantity" : 7.061401241503109,
  "clientOrderId" : "clientOrderId",
  "positionSide" : "Short",
  "activatePrice" : 3.616076749251911,
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "type" : "Limit",
  "closePosition" : true,
  "cumulativeQuantity" : 5.962133916683182,
  "stopPrice" : 9.301444243932576,
  "reduceOnly" : true,
  "price" : 6.027456183070403,
  "timeInForce" : "GoodTillCancel",
  "workingType" : "Mark",
  "status" : "New"
}}]
     - parameter body: (body)  (optional)     - parameter accountId: (query)  (optional)

     - returns: RequestBuilder<BinanceRawFuturesPlacedOrder> 
     */
    open class func futuresPlaceOrderWithRequestBuilder(body: BinanceRawFuturesPlaceOrder? = nil, accountId: UUID? = nil) -> RequestBuilder<BinanceRawFuturesPlacedOrder> {
        let path = "/v2.0/tradingplatform/binance/futures/orders/place"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId
        ])

        let requestBuilder: RequestBuilder<BinanceRawFuturesPlacedOrder>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Start futures account stream
     - parameter accountId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func futuresStartAccountStream(accountId: UUID? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        futuresStartAccountStreamWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Start futures account stream
     - POST /v2.0/tradingplatform/binance/futures/stream/start
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter accountId: (query)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func futuresStartAccountStreamWithRequestBuilder(accountId: UUID? = nil) -> RequestBuilder<String> {
        let path = "/v2.0/tradingplatform/binance/futures/stream/start"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId
        ])

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Stop futures account stream
     - parameter accountId: (query)  (optional)     - parameter listenKey: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func futuresStopAccountStream(accountId: UUID? = nil, listenKey: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        futuresStopAccountStreamWithRequestBuilder(accountId: accountId, listenKey: listenKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Stop futures account stream
     - POST /v2.0/tradingplatform/binance/futures/stream/stop
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter accountId: (query)  (optional)     - parameter listenKey: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func futuresStopAccountStreamWithRequestBuilder(accountId: UUID? = nil, listenKey: String? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/tradingplatform/binance/futures/stream/stop"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "listenKey": listenKey
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 24H price
     - parameter symbol: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func get24HPrice(symbol: String, completion: @escaping ((_ data: BinanceRaw24HPrice?,_ error: Error?) -> Void)) {
        get24HPriceWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 24H price
     - GET /v2.0/tradingplatform/binance/market/{symbol}/ticker/24hr
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "priceChange" : 0.8008281904610115,
  "symbol" : "symbol",
  "bidQuantity" : 6.84685269835264,
  "askPrice" : 7.457744773683766,
  "weightedAveragePrice" : 1.4658129805029452,
  "firstTradeId" : 4,
  "lastTradeId" : 7,
  "askQuantity" : 1.1730742509559433,
  "openPrice" : 2.3021358869347655,
  "totalTrades" : 1,
  "quoteVolume" : 2.027123023002322,
  "bidPrice" : 1.4894159098541704,
  "lowPrice" : 9.301444243932576,
  "highPrice" : 7.061401241503109,
  "closeTime" : "2000-01-23T04:56:07.000+00:00",
  "baseVolume" : 3.616076749251911,
  "openTime" : "2000-01-23T04:56:07.000+00:00",
  "lastQuantity" : 5.637376656633329,
  "priceChangePercent" : 6.027456183070403,
  "prevDayClosePrice" : 1.0246457001441578,
  "lastPrice" : 5.962133916683182
}}]
     - parameter symbol: (path)  

     - returns: RequestBuilder<BinanceRaw24HPrice> 
     */
    open class func get24HPriceWithRequestBuilder(symbol: String) -> RequestBuilder<BinanceRaw24HPrice> {
        var path = "/v2.0/tradingplatform/binance/market/{symbol}/ticker/24hr"
        let symbolPreEscape = "\(symbol)"
        let symbolPostEscape = symbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol}", with: symbolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BinanceRaw24HPrice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 24H prices

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func get24HPrices(completion: @escaping ((_ data: [BinanceRaw24HPrice]?,_ error: Error?) -> Void)) {
        get24HPricesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 24H prices
     - GET /v2.0/tradingplatform/binance/market/ticker/24hr
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "priceChange" : 0.8008281904610115,
  "symbol" : "symbol",
  "bidQuantity" : 6.84685269835264,
  "askPrice" : 7.457744773683766,
  "weightedAveragePrice" : 1.4658129805029452,
  "firstTradeId" : 4,
  "lastTradeId" : 7,
  "askQuantity" : 1.1730742509559433,
  "openPrice" : 2.3021358869347655,
  "totalTrades" : 1,
  "quoteVolume" : 2.027123023002322,
  "bidPrice" : 1.4894159098541704,
  "lowPrice" : 9.301444243932576,
  "highPrice" : 7.061401241503109,
  "closeTime" : "2000-01-23T04:56:07.000+00:00",
  "baseVolume" : 3.616076749251911,
  "openTime" : "2000-01-23T04:56:07.000+00:00",
  "lastQuantity" : 5.637376656633329,
  "priceChangePercent" : 6.027456183070403,
  "prevDayClosePrice" : 1.0246457001441578,
  "lastPrice" : 5.962133916683182
}, {
  "priceChange" : 0.8008281904610115,
  "symbol" : "symbol",
  "bidQuantity" : 6.84685269835264,
  "askPrice" : 7.457744773683766,
  "weightedAveragePrice" : 1.4658129805029452,
  "firstTradeId" : 4,
  "lastTradeId" : 7,
  "askQuantity" : 1.1730742509559433,
  "openPrice" : 2.3021358869347655,
  "totalTrades" : 1,
  "quoteVolume" : 2.027123023002322,
  "bidPrice" : 1.4894159098541704,
  "lowPrice" : 9.301444243932576,
  "highPrice" : 7.061401241503109,
  "closeTime" : "2000-01-23T04:56:07.000+00:00",
  "baseVolume" : 3.616076749251911,
  "openTime" : "2000-01-23T04:56:07.000+00:00",
  "lastQuantity" : 5.637376656633329,
  "priceChangePercent" : 6.027456183070403,
  "prevDayClosePrice" : 1.0246457001441578,
  "lastPrice" : 5.962133916683182
} ]}]

     - returns: RequestBuilder<[BinanceRaw24HPrice]> 
     */
    open class func get24HPricesWithRequestBuilder() -> RequestBuilder<[BinanceRaw24HPrice]> {
        let path = "/v2.0/tradingplatform/binance/market/ticker/24hr"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[BinanceRaw24HPrice]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter accountId: (query)  (optional)     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountInfo(accountId: UUID? = nil, currency: Currency? = nil, completion: @escaping ((_ data: BinanceRawAccountInfo?,_ error: Error?) -> Void)) {
        getAccountInfoWithRequestBuilder(accountId: accountId, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/tradingplatform/binance/account
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "balances" : [ {
    "total" : 7.061401241503109,
    "asset" : "asset",
    "free" : 5.637376656633329,
    "locked" : 2.3021358869347655,
    "amountInCurrency" : 9.301444243932576
  }, {
    "total" : 7.061401241503109,
    "asset" : "asset",
    "free" : 5.637376656633329,
    "locked" : 2.3021358869347655,
    "amountInCurrency" : 9.301444243932576
  } ],
  "makerCommission" : 0.8008281904610115,
  "buyerCommission" : 1.4658129805029452,
  "canWithdraw" : true,
  "permissions" : [ null, null ],
  "accountType" : "Spot",
  "sellerCommission" : 5.962133916683182,
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "canDeposit" : true,
  "takerCommission" : 6.027456183070403,
  "canTrade" : true
}}]
     - parameter accountId: (query)  (optional)     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<BinanceRawAccountInfo> 
     */
    open class func getAccountInfoWithRequestBuilder(accountId: UUID? = nil, currency: Currency? = nil) -> RequestBuilder<BinanceRawAccountInfo> {
        let path = "/v2.0/tradingplatform/binance/account"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "currency": currency
        ])

        let requestBuilder: RequestBuilder<BinanceRawAccountInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get leveraged tokens klines
     - parameter symbol: (query)  (optional)     - parameter interval: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBlvtKlines(symbol: String? = nil, interval: BinanceRawKlineInterval? = nil, startTime: Date? = nil, endTime: Date? = nil, limit: Int? = nil, completion: @escaping ((_ data: BinanceRawBlvtKlineItemsViewModel?,_ error: Error?) -> Void)) {
        getBlvtKlinesWithRequestBuilder(symbol: symbol, interval: interval, startTime: startTime, endTime: endTime, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get leveraged tokens klines
     - GET /v2.0/tradingplatform/binance/blvt/market/klines
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 7,
  "items" : [ {
    "navUpdates" : 2,
    "high" : 6.027456183070403,
    "realLeverage" : 5.637376656633329,
    "low" : 1.4658129805029452,
    "closeTime" : "2000-01-23T04:56:07.000+00:00",
    "openTime" : "2000-01-23T04:56:07.000+00:00",
    "close" : 5.962133916683182,
    "open" : 0.8008281904610115
  }, {
    "navUpdates" : 2,
    "high" : 6.027456183070403,
    "realLeverage" : 5.637376656633329,
    "low" : 1.4658129805029452,
    "closeTime" : "2000-01-23T04:56:07.000+00:00",
    "openTime" : "2000-01-23T04:56:07.000+00:00",
    "close" : 5.962133916683182,
    "open" : 0.8008281904610115
  } ]
}}]
     - parameter symbol: (query)  (optional)     - parameter interval: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<BinanceRawBlvtKlineItemsViewModel> 
     */
    open class func getBlvtKlinesWithRequestBuilder(symbol: String? = nil, interval: BinanceRawKlineInterval? = nil, startTime: Date? = nil, endTime: Date? = nil, limit: Int? = nil) -> RequestBuilder<BinanceRawBlvtKlineItemsViewModel> {
        let path = "/v2.0/tradingplatform/binance/blvt/market/klines"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol, 
                        "interval": interval, 
                        "startTime": startTime?.encodeToJSON(), 
                        "endTime": endTime?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<BinanceRawBlvtKlineItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Exchange info

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExchangeInfo(completion: @escaping ((_ data: BinanceRawExchangeInfo?,_ error: Error?) -> Void)) {
        getExchangeInfoWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Exchange info
     - GET /v2.0/tradingplatform/binance/server/info
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "rateLimits" : [ {
    "intervalNumber" : 0,
    "limit" : 6,
    "interval" : "Second",
    "type" : "RequestWeight"
  }, {
    "intervalNumber" : 0,
    "limit" : 6,
    "interval" : "Second",
    "type" : "RequestWeight"
  } ],
  "timeZone" : "timeZone",
  "serverTime" : "2000-01-23T04:56:07.000+00:00",
  "symbols" : [ {
    "maxAlgorithmicOrdersFilter" : {
      "maxNumberAlgorithmicOrders" : 1
    },
    "iceBergAllowed" : true,
    "quoteOrderQuantityMarketAllowed" : true,
    "maxPositionFilter" : {
      "maxPosition" : 9.369310271410669
    },
    "lotSizeFilter" : {
      "minQuantity" : 2.3021358869347655,
      "maxQuantity" : 7.061401241503109,
      "stepSize" : 9.301444243932576
    },
    "iceBergPartsFilter" : {
      "limit" : 5,
      "filterType" : "Unknown"
    },
    "priceFilter" : {
      "minPrice" : 6.84685269835264,
      "maxPrice" : 7.457744773683766,
      "tickSize" : 1.1730742509559433
    },
    "baseAsset" : "baseAsset",
    "baseAssetPrecision" : 0,
    "isSpotTradingAllowed" : true,
    "marketLotSizeFilter" : {
      "minQuantity" : 3.616076749251911,
      "maxQuantity" : 2.027123023002322,
      "stepSize" : 4.145608029883936
    },
    "quoteAssetPrecision" : 6,
    "quoteCommissionPrecision" : 5,
    "ocoAllowed" : true,
    "minNotionalFilter" : {
      "applyToMarketOrders" : true,
      "averagePriceMinutes" : 1,
      "minNotional" : 1.0246457001441578
    },
    "orderTypes" : [ "Limit", "Limit" ],
    "permissions" : [ "Spot", "Spot" ],
    "name" : "name",
    "pricePercentFilter" : {
      "multiplierDown" : 5.025004791520295,
      "averagePriceMinutes" : 9,
      "multiplierUp" : 4.965218492984954
    },
    "maxOrdersFilter" : {
      "maxNumberOrders" : 7
    },
    "isMarginTradingAllowed" : true,
    "quoteAsset" : "quoteAsset",
    "baseCommissionPrecision" : 1,
    "status" : "PreTrading"
  }, {
    "maxAlgorithmicOrdersFilter" : {
      "maxNumberAlgorithmicOrders" : 1
    },
    "iceBergAllowed" : true,
    "quoteOrderQuantityMarketAllowed" : true,
    "maxPositionFilter" : {
      "maxPosition" : 9.369310271410669
    },
    "lotSizeFilter" : {
      "minQuantity" : 2.3021358869347655,
      "maxQuantity" : 7.061401241503109,
      "stepSize" : 9.301444243932576
    },
    "iceBergPartsFilter" : {
      "limit" : 5,
      "filterType" : "Unknown"
    },
    "priceFilter" : {
      "minPrice" : 6.84685269835264,
      "maxPrice" : 7.457744773683766,
      "tickSize" : 1.1730742509559433
    },
    "baseAsset" : "baseAsset",
    "baseAssetPrecision" : 0,
    "isSpotTradingAllowed" : true,
    "marketLotSizeFilter" : {
      "minQuantity" : 3.616076749251911,
      "maxQuantity" : 2.027123023002322,
      "stepSize" : 4.145608029883936
    },
    "quoteAssetPrecision" : 6,
    "quoteCommissionPrecision" : 5,
    "ocoAllowed" : true,
    "minNotionalFilter" : {
      "applyToMarketOrders" : true,
      "averagePriceMinutes" : 1,
      "minNotional" : 1.0246457001441578
    },
    "orderTypes" : [ "Limit", "Limit" ],
    "permissions" : [ "Spot", "Spot" ],
    "name" : "name",
    "pricePercentFilter" : {
      "multiplierDown" : 5.025004791520295,
      "averagePriceMinutes" : 9,
      "multiplierUp" : 4.965218492984954
    },
    "maxOrdersFilter" : {
      "maxNumberOrders" : 7
    },
    "isMarginTradingAllowed" : true,
    "quoteAsset" : "quoteAsset",
    "baseCommissionPrecision" : 1,
    "status" : "PreTrading"
  } ]
}}]

     - returns: RequestBuilder<BinanceRawExchangeInfo> 
     */
    open class func getExchangeInfoWithRequestBuilder() -> RequestBuilder<BinanceRawExchangeInfo> {
        let path = "/v2.0/tradingplatform/binance/server/info"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BinanceRawExchangeInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Server time

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExchangeTime(completion: @escaping ((_ data: TimestampDate?,_ error: Error?) -> Void)) {
        getExchangeTimeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Server time
     - GET /v2.0/tradingplatform/binance/server/time
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "date" : 0
}}]

     - returns: RequestBuilder<TimestampDate> 
     */
    open class func getExchangeTimeWithRequestBuilder() -> RequestBuilder<TimestampDate> {
        let path = "/v2.0/tradingplatform/binance/server/time"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimestampDate>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get account favorite symbols
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFavoriteSymbols(_id: UUID, completion: @escaping ((_ data: StringItemsViewModel?,_ error: Error?) -> Void)) {
        getFavoriteSymbolsWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get account favorite symbols
     - GET /v2.0/tradingplatform/accounts/{id}/symbols/favorite
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "items" : [ "items", "items" ]
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<StringItemsViewModel> 
     */
    open class func getFavoriteSymbolsWithRequestBuilder(_id: UUID) -> RequestBuilder<StringItemsViewModel> {
        var path = "/v2.0/tradingplatform/accounts/{id}/symbols/favorite"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<StringItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get futures 24H prices
     - parameter symbol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFutures24HPrices(symbol: String? = nil, completion: @escaping ((_ data: [BinanceRawFutures24HPrice]?,_ error: Error?) -> Void)) {
        getFutures24HPricesWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get futures 24H prices
     - GET /v2.0/tradingplatform/binance/futures/market/ticker/24hr
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "priceChange" : 7.061401241503109,
  "symbol" : "symbol",
  "weightedAveragePrice" : 3.616076749251911,
  "firstTradeId" : 4,
  "lastTradeId" : 7,
  "openPrice" : 6.027456183070403,
  "totalTrades" : 1,
  "quoteVolume" : 2.3021358869347655,
  "lowPrice" : 5.962133916683182,
  "highPrice" : 1.4658129805029452,
  "closeTime" : "2000-01-23T04:56:07.000+00:00",
  "baseVolume" : 5.637376656633329,
  "openTime" : "2000-01-23T04:56:07.000+00:00",
  "lastQuantity" : 2.027123023002322,
  "priceChangePercent" : 9.301444243932576,
  "lastPrice" : 0.8008281904610115
}, {
  "priceChange" : 7.061401241503109,
  "symbol" : "symbol",
  "weightedAveragePrice" : 3.616076749251911,
  "firstTradeId" : 4,
  "lastTradeId" : 7,
  "openPrice" : 6.027456183070403,
  "totalTrades" : 1,
  "quoteVolume" : 2.3021358869347655,
  "lowPrice" : 5.962133916683182,
  "highPrice" : 1.4658129805029452,
  "closeTime" : "2000-01-23T04:56:07.000+00:00",
  "baseVolume" : 5.637376656633329,
  "openTime" : "2000-01-23T04:56:07.000+00:00",
  "lastQuantity" : 2.027123023002322,
  "priceChangePercent" : 9.301444243932576,
  "lastPrice" : 0.8008281904610115
} ]}]
     - parameter symbol: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawFutures24HPrice]> 
     */
    open class func getFutures24HPricesWithRequestBuilder(symbol: String? = nil) -> RequestBuilder<[BinanceRawFutures24HPrice]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/ticker/24hr"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<[BinanceRawFutures24HPrice]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter accountId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesAccountInfo(accountId: UUID? = nil, completion: @escaping ((_ data: BinanceRawFuturesAccountInfo?,_ error: Error?) -> Void)) {
        getFuturesAccountInfoWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/tradingplatform/binance/account/futures
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "totalOpenOrderInitialMargin" : 2.3021358869347655,
  "totalMaintMargin" : 5.962133916683182,
  "totalPositionInitialMargin" : 7.061401241503109,
  "feeTier" : 0,
  "totalInitialMargin" : 1.4658129805029452,
  "canWithdraw" : true,
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "positions" : [ {
    "entryPrice" : 2.8841621266687802,
    "leverage" : 8,
    "symbol" : "symbol",
    "maxNotional" : 6.778324963048013,
    "maintMargin" : 6.438423552598547,
    "openOrderInitialMargin" : 3.5571952270680973,
    "positionInitialMargin" : 6.965117697638846,
    "positionSide" : "Short",
    "isolated" : true,
    "unrealizedProfit" : 1.284659006116532,
    "positionAmount" : 6.878052220127876,
    "initialMargin" : 9.018348186070783
  }, {
    "entryPrice" : 2.8841621266687802,
    "leverage" : 8,
    "symbol" : "symbol",
    "maxNotional" : 6.778324963048013,
    "maintMargin" : 6.438423552598547,
    "openOrderInitialMargin" : 3.5571952270680973,
    "positionInitialMargin" : 6.965117697638846,
    "positionSide" : "Short",
    "isolated" : true,
    "unrealizedProfit" : 1.284659006116532,
    "positionAmount" : 6.878052220127876,
    "initialMargin" : 9.018348186070783
  } ],
  "canTrade" : true,
  "availableBalance" : 7.386281948385884,
  "maxWithdrawAmount" : 6.027456183070403,
  "assets" : [ {
    "maxWithdrawAmount" : 6.84685269835264,
    "maintMargin" : 1.0246457001441578,
    "openOrderInitialMargin" : 7.457744773683766,
    "walletBalance" : 5.025004791520295,
    "crossWalletBalance" : 9.965781217890562,
    "positionInitialMargin" : 1.1730742509559433,
    "crossUnPnl" : 9.369310271410669,
    "unrealizedProfit" : 4.965218492984954,
    "asset" : "asset",
    "initialMargin" : 1.2315135367772556,
    "marginBalance" : 1.4894159098541704,
    "availableBalance" : 6.683562403749608
  }, {
    "maxWithdrawAmount" : 6.84685269835264,
    "maintMargin" : 1.0246457001441578,
    "openOrderInitialMargin" : 7.457744773683766,
    "walletBalance" : 5.025004791520295,
    "crossWalletBalance" : 9.965781217890562,
    "positionInitialMargin" : 1.1730742509559433,
    "crossUnPnl" : 9.369310271410669,
    "unrealizedProfit" : 4.965218492984954,
    "asset" : "asset",
    "initialMargin" : 1.2315135367772556,
    "marginBalance" : 1.4894159098541704,
    "availableBalance" : 6.683562403749608
  } ],
  "totalCrossWalletBalance" : 2.027123023002322,
  "totalMarginBalance" : 5.637376656633329,
  "totalUnrealizedProfit" : 9.301444243932576,
  "totalCrossUnPnl" : 4.145608029883936,
  "totalWalletBalance" : 3.616076749251911,
  "canDeposit" : true
}}]
     - parameter accountId: (query)  (optional)

     - returns: RequestBuilder<BinanceRawFuturesAccountInfo> 
     */
    open class func getFuturesAccountInfoWithRequestBuilder(accountId: UUID? = nil) -> RequestBuilder<BinanceRawFuturesAccountInfo> {
        let path = "/v2.0/tradingplatform/binance/account/futures"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId
        ])

        let requestBuilder: RequestBuilder<BinanceRawFuturesAccountInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get futures book prices
     - parameter symbol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesBookPrices(symbol: String? = nil, completion: @escaping ((_ data: [BinanceRawBookPrice]?,_ error: Error?) -> Void)) {
        getFuturesBookPricesWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get futures book prices
     - GET /v2.0/tradingplatform/binance/futures/market/ticker/book
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "symbol" : "symbol",
  "bestAskQuantity" : 5.962133916683182,
  "bestBidPrice" : 0.8008281904610115,
  "bestBidQuantity" : 6.027456183070403,
  "bestAskPrice" : 1.4658129805029452,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "symbol" : "symbol",
  "bestAskQuantity" : 5.962133916683182,
  "bestBidPrice" : 0.8008281904610115,
  "bestBidQuantity" : 6.027456183070403,
  "bestAskPrice" : 1.4658129805029452,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter symbol: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawBookPrice]> 
     */
    open class func getFuturesBookPricesWithRequestBuilder(symbol: String? = nil) -> RequestBuilder<[BinanceRawBookPrice]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/ticker/book"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<[BinanceRawBookPrice]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get notional and leverage brackets
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesBrackets(accountId: UUID? = nil, symbol: String? = nil, completion: @escaping ((_ data: [BinanceRawFuturesSymbolBracket]?,_ error: Error?) -> Void)) {
        getFuturesBracketsWithRequestBuilder(accountId: accountId, symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get notional and leverage brackets
     - GET /v2.0/tradingplatform/binance/account/futures/symbols/brackets
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "symbolOrPair" : "symbolOrPair",
  "brackets" : [ {
    "cap" : 1,
    "maintenanceMarginRatio" : 5.637376656633329,
    "bracket" : 0,
    "floor" : 5,
    "initialLeverage" : 6
  }, {
    "cap" : 1,
    "maintenanceMarginRatio" : 5.637376656633329,
    "bracket" : 0,
    "floor" : 5,
    "initialLeverage" : 6
  } ]
}, {
  "symbolOrPair" : "symbolOrPair",
  "brackets" : [ {
    "cap" : 1,
    "maintenanceMarginRatio" : 5.637376656633329,
    "bracket" : 0,
    "floor" : 5,
    "initialLeverage" : 6
  }, {
    "cap" : 1,
    "maintenanceMarginRatio" : 5.637376656633329,
    "bracket" : 0,
    "floor" : 5,
    "initialLeverage" : 6
  } ]
} ]}]
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawFuturesSymbolBracket]> 
     */
    open class func getFuturesBracketsWithRequestBuilder(accountId: UUID? = nil, symbol: String? = nil) -> RequestBuilder<[BinanceRawFuturesSymbolBracket]> {
        let path = "/v2.0/tradingplatform/binance/account/futures/symbols/brackets"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<[BinanceRawFuturesSymbolBracket]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets composite index info
     - parameter symbol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesCompositeIndexInfo(symbol: String? = nil, completion: @escaping ((_ data: [BinanceRawFuturesCompositeIndexInfo]?,_ error: Error?) -> Void)) {
        getFuturesCompositeIndexInfoWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets composite index info
     - GET /v2.0/tradingplatform/binance/futures/market/index/composite/info
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "symbol" : "symbol",
  "baseAssets" : [ {
    "weightInPercentage" : 6.027456183070403,
    "baseAsset" : "baseAsset",
    "weightInQuantity" : 0.8008281904610115
  }, {
    "weightInPercentage" : 6.027456183070403,
    "baseAsset" : "baseAsset",
    "weightInQuantity" : 0.8008281904610115
  } ],
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "symbol" : "symbol",
  "baseAssets" : [ {
    "weightInPercentage" : 6.027456183070403,
    "baseAsset" : "baseAsset",
    "weightInQuantity" : 0.8008281904610115
  }, {
    "weightInPercentage" : 6.027456183070403,
    "baseAsset" : "baseAsset",
    "weightInQuantity" : 0.8008281904610115
  } ],
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter symbol: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawFuturesCompositeIndexInfo]> 
     */
    open class func getFuturesCompositeIndexInfoWithRequestBuilder(symbol: String? = nil) -> RequestBuilder<[BinanceRawFuturesCompositeIndexInfo]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/index/composite/info"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<[BinanceRawFuturesCompositeIndexInfo]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Exchange futures info

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesExchangeInfo(completion: @escaping ((_ data: BinanceRawFuturesUsdtExchangeInfo?,_ error: Error?) -> Void)) {
        getFuturesExchangeInfoWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Exchange futures info
     - GET /v2.0/tradingplatform/binance/futures/server/info
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "rateLimits" : [ {
    "intervalNumber" : 0,
    "limit" : 6,
    "interval" : "Second",
    "type" : "RequestWeight"
  }, {
    "intervalNumber" : 0,
    "limit" : 6,
    "interval" : "Second",
    "type" : "RequestWeight"
  } ],
  "timeZone" : "timeZone",
  "serverTime" : "2000-01-23T04:56:07.000+00:00",
  "symbols" : [ {
    "quantityPrecision" : 5,
    "pricePrecision" : 5,
    "requiredMarginPercent" : 2.3021358869347655,
    "maxAlgoOrdersFilter" : {
      "maxNumberAlgorithmicOrders" : 4
    },
    "lotSizeFilter" : {
      "minQuantity" : 7.386281948385884,
      "maxQuantity" : 1.2315135367772556,
      "stepSize" : 1.0246457001441578
    },
    "priceFilter" : {
      "minPrice" : 3.616076749251911,
      "maxPrice" : 2.027123023002322,
      "filterType" : "Unknown",
      "tickSize" : 4.145608029883936
    },
    "baseAsset" : "baseAsset",
    "baseAssetPrecision" : 7,
    "marketLotSizeFilter" : {
      "minQuantity" : 1.4894159098541704,
      "maxQuantity" : 6.84685269835264,
      "stepSize" : 7.457744773683766
    },
    "marginAsset" : "marginAsset",
    "quoteAssetPrecision" : 9,
    "orderTypes" : [ "Limit", "Limit" ],
    "name" : "name",
    "pricePercentFilter" : {
      "multiplierDown" : 9.965781217890562,
      "multiplierUp" : 5.025004791520295,
      "multiplierDecimal" : 9
    },
    "maxOrdersFilter" : {
      "maxNumberOrders" : 1
    },
    "timeInForce" : [ "GoodTillCancel", "GoodTillCancel" ],
    "maintenanceMarginPercent" : 1.4658129805029452,
    "quoteAsset" : "quoteAsset",
    "status" : "PreTrading"
  }, {
    "quantityPrecision" : 5,
    "pricePrecision" : 5,
    "requiredMarginPercent" : 2.3021358869347655,
    "maxAlgoOrdersFilter" : {
      "maxNumberAlgorithmicOrders" : 4
    },
    "lotSizeFilter" : {
      "minQuantity" : 7.386281948385884,
      "maxQuantity" : 1.2315135367772556,
      "stepSize" : 1.0246457001441578
    },
    "priceFilter" : {
      "minPrice" : 3.616076749251911,
      "maxPrice" : 2.027123023002322,
      "filterType" : "Unknown",
      "tickSize" : 4.145608029883936
    },
    "baseAsset" : "baseAsset",
    "baseAssetPrecision" : 7,
    "marketLotSizeFilter" : {
      "minQuantity" : 1.4894159098541704,
      "maxQuantity" : 6.84685269835264,
      "stepSize" : 7.457744773683766
    },
    "marginAsset" : "marginAsset",
    "quoteAssetPrecision" : 9,
    "orderTypes" : [ "Limit", "Limit" ],
    "name" : "name",
    "pricePercentFilter" : {
      "multiplierDown" : 9.965781217890562,
      "multiplierUp" : 5.025004791520295,
      "multiplierDecimal" : 9
    },
    "maxOrdersFilter" : {
      "maxNumberOrders" : 1
    },
    "timeInForce" : [ "GoodTillCancel", "GoodTillCancel" ],
    "maintenanceMarginPercent" : 1.4658129805029452,
    "quoteAsset" : "quoteAsset",
    "status" : "PreTrading"
  } ]
}}]

     - returns: RequestBuilder<BinanceRawFuturesUsdtExchangeInfo> 
     */
    open class func getFuturesExchangeInfoWithRequestBuilder() -> RequestBuilder<BinanceRawFuturesUsdtExchangeInfo> {
        let path = "/v2.0/tradingplatform/binance/futures/server/info"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BinanceRawFuturesUsdtExchangeInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get futures funding rate history
     - parameter symbol: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesFundingRates(symbol: String? = nil, startTime: Date? = nil, endTime: Date? = nil, limit: Int? = nil, completion: @escaping ((_ data: [BinanceRawFuturesFundingRateHistory]?,_ error: Error?) -> Void)) {
        getFuturesFundingRatesWithRequestBuilder(symbol: symbol, startTime: startTime, endTime: endTime, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get futures funding rate history
     - GET /v2.0/tradingplatform/binance/futures/market/rates/funding
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "symbol" : "symbol",
  "fundingTime" : "2000-01-23T04:56:07.000+00:00",
  "fundingRate" : 0.8008281904610115
}, {
  "symbol" : "symbol",
  "fundingTime" : "2000-01-23T04:56:07.000+00:00",
  "fundingRate" : 0.8008281904610115
} ]}]
     - parameter symbol: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawFuturesFundingRateHistory]> 
     */
    open class func getFuturesFundingRatesWithRequestBuilder(symbol: String? = nil, startTime: Date? = nil, endTime: Date? = nil, limit: Int? = nil) -> RequestBuilder<[BinanceRawFuturesFundingRateHistory]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/rates/funding"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol, 
                        "startTime": startTime?.encodeToJSON(), 
                        "endTime": endTime?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BinanceRawFuturesFundingRateHistory]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get long/short ratio
     - parameter symbol: (query)  (optional)     - parameter period: (query)  (optional)     - parameter limit: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesGlobalLongShortAccountRatio(symbol: String? = nil, period: BinancePeriodInterval? = nil, limit: Int? = nil, startTime: Date? = nil, endTime: Date? = nil, completion: @escaping ((_ data: [BinanceRawFuturesLongShortRatio]?,_ error: Error?) -> Void)) {
        getFuturesGlobalLongShortAccountRatioWithRequestBuilder(symbol: symbol, period: period, limit: limit, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get long/short ratio
     - GET /v2.0/tradingplatform/binance/futures/market/ratio/longshort/global/account
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "symbol" : "symbol",
  "longAccount" : 6.027456183070403,
  "longShortRatio" : 0.8008281904610115,
  "shortAccount" : 1.4658129805029452,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "symbol" : "symbol",
  "longAccount" : 6.027456183070403,
  "longShortRatio" : 0.8008281904610115,
  "shortAccount" : 1.4658129805029452,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter symbol: (query)  (optional)     - parameter period: (query)  (optional)     - parameter limit: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawFuturesLongShortRatio]> 
     */
    open class func getFuturesGlobalLongShortAccountRatioWithRequestBuilder(symbol: String? = nil, period: BinancePeriodInterval? = nil, limit: Int? = nil, startTime: Date? = nil, endTime: Date? = nil) -> RequestBuilder<[BinanceRawFuturesLongShortRatio]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/ratio/longshort/global/account"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol, 
                        "period": period, 
                        "limit": limit?.encodeToJSON(), 
                        "startTime": startTime?.encodeToJSON(), 
                        "endTime": endTime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BinanceRawFuturesLongShortRatio]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get futures klines
     - parameter symbol: (query)  (optional)     - parameter interval: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesKlines(symbol: String? = nil, interval: BinanceRawKlineInterval? = nil, startTime: Date? = nil, endTime: Date? = nil, limit: Int? = nil, completion: @escaping ((_ data: BinanceRawKlineItemsViewModel?,_ error: Error?) -> Void)) {
        getFuturesKlinesWithRequestBuilder(symbol: symbol, interval: interval, startTime: startTime, endTime: endTime, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get futures klines
     - GET /v2.0/tradingplatform/binance/futures/market/klines
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "items" : [ {
    "takerBuyQuoteVolume" : 3.616076749251911,
    "high" : 6.027456183070403,
    "tradeCount" : 7,
    "low" : 1.4658129805029452,
    "closeTime" : "2000-01-23T04:56:07.000+00:00",
    "takerBuyBaseVolume" : 9.301444243932576,
    "quoteVolume" : 2.3021358869347655,
    "openTime" : "2000-01-23T04:56:07.000+00:00",
    "baseVolume" : 5.637376656633329,
    "close" : 5.962133916683182,
    "open" : 0.8008281904610115
  }, {
    "takerBuyQuoteVolume" : 3.616076749251911,
    "high" : 6.027456183070403,
    "tradeCount" : 7,
    "low" : 1.4658129805029452,
    "closeTime" : "2000-01-23T04:56:07.000+00:00",
    "takerBuyBaseVolume" : 9.301444243932576,
    "quoteVolume" : 2.3021358869347655,
    "openTime" : "2000-01-23T04:56:07.000+00:00",
    "baseVolume" : 5.637376656633329,
    "close" : 5.962133916683182,
    "open" : 0.8008281904610115
  } ]
}}]
     - parameter symbol: (query)  (optional)     - parameter interval: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<BinanceRawKlineItemsViewModel> 
     */
    open class func getFuturesKlinesWithRequestBuilder(symbol: String? = nil, interval: BinanceRawKlineInterval? = nil, startTime: Date? = nil, endTime: Date? = nil, limit: Int? = nil) -> RequestBuilder<BinanceRawKlineItemsViewModel> {
        let path = "/v2.0/tradingplatform/binance/futures/market/klines"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol, 
                        "interval": interval, 
                        "startTime": startTime?.encodeToJSON(), 
                        "endTime": endTime?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<BinanceRawKlineItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get futures liquidation orders
     - parameter symbol: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesLiquidationOrders(symbol: String? = nil, startTime: Date? = nil, endTime: Date? = nil, limit: Int? = nil, completion: @escaping ((_ data: [BinanceRawFuturesLiquidation]?,_ error: Error?) -> Void)) {
        getFuturesLiquidationOrdersWithRequestBuilder(symbol: symbol, startTime: startTime, endTime: endTime, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get futures liquidation orders
     - GET /v2.0/tradingplatform/binance/futures/market/orders/liquidation
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "quantityFilled" : 1.4658129805029452,
  "symbol" : "symbol",
  "side" : "Buy",
  "price" : 0.8008281904610115,
  "averagePrice" : 5.962133916683182,
  "time" : "2000-01-23T04:56:07.000+00:00",
  "lastQuantityFilled" : 6.027456183070403,
  "type" : "Limit",
  "timeInForce" : "GoodTillCancel",
  "status" : "New"
}, {
  "quantityFilled" : 1.4658129805029452,
  "symbol" : "symbol",
  "side" : "Buy",
  "price" : 0.8008281904610115,
  "averagePrice" : 5.962133916683182,
  "time" : "2000-01-23T04:56:07.000+00:00",
  "lastQuantityFilled" : 6.027456183070403,
  "type" : "Limit",
  "timeInForce" : "GoodTillCancel",
  "status" : "New"
} ]}]
     - parameter symbol: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawFuturesLiquidation]> 
     */
    open class func getFuturesLiquidationOrdersWithRequestBuilder(symbol: String? = nil, startTime: Date? = nil, endTime: Date? = nil, limit: Int? = nil) -> RequestBuilder<[BinanceRawFuturesLiquidation]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/orders/liquidation"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol, 
                        "startTime": startTime?.encodeToJSON(), 
                        "endTime": endTime?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BinanceRawFuturesLiquidation]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get futures mark prices
     - parameter symbol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesMarkPrices(symbol: String? = nil, completion: @escaping ((_ data: [BinanceRawFuturesMarkPrice]?,_ error: Error?) -> Void)) {
        getFuturesMarkPricesWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get futures mark prices
     - GET /v2.0/tradingplatform/binance/futures/market/prices/mark
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "symbol" : "symbol",
  "markPrice" : 0.8008281904610115,
  "nextFundingTime" : "2000-01-23T04:56:07.000+00:00",
  "time" : "2000-01-23T04:56:07.000+00:00",
  "fundingRate" : 6.027456183070403
}, {
  "symbol" : "symbol",
  "markPrice" : 0.8008281904610115,
  "nextFundingTime" : "2000-01-23T04:56:07.000+00:00",
  "time" : "2000-01-23T04:56:07.000+00:00",
  "fundingRate" : 6.027456183070403
} ]}]
     - parameter symbol: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawFuturesMarkPrice]> 
     */
    open class func getFuturesMarkPricesWithRequestBuilder(symbol: String? = nil) -> RequestBuilder<[BinanceRawFuturesMarkPrice]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/prices/mark"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<[BinanceRawFuturesMarkPrice]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get present open interest of a specific symbol
     - parameter symbol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesOpenInterest(symbol: String? = nil, completion: @escaping ((_ data: BinanceRawFuturesOpenInterest?,_ error: Error?) -> Void)) {
        getFuturesOpenInterestWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get present open interest of a specific symbol
     - GET /v2.0/tradingplatform/binance/futures/market/rates/interest
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "symbol" : "symbol",
  "openInterest" : 0.8008281904610115,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter symbol: (query)  (optional)

     - returns: RequestBuilder<BinanceRawFuturesOpenInterest> 
     */
    open class func getFuturesOpenInterestWithRequestBuilder(symbol: String? = nil) -> RequestBuilder<BinanceRawFuturesOpenInterest> {
        let path = "/v2.0/tradingplatform/binance/futures/market/rates/interest"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<BinanceRawFuturesOpenInterest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get open interest history
     - parameter symbol: (query)  (optional)     - parameter period: (query)  (optional)     - parameter limit: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesOpenInterestHistory(symbol: String? = nil, period: BinancePeriodInterval? = nil, limit: Int? = nil, startTime: Date? = nil, endTime: Date? = nil, completion: @escaping ((_ data: [BinanceRawFuturesOpenInterestHistory]?,_ error: Error?) -> Void)) {
        getFuturesOpenInterestHistoryWithRequestBuilder(symbol: symbol, period: period, limit: limit, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get open interest history
     - GET /v2.0/tradingplatform/binance/futures/market/rates/interest/history
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "symbol" : "symbol",
  "sumOpenInterest" : 0.8008281904610115,
  "sumOpenInterestValue" : 6.027456183070403,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "symbol" : "symbol",
  "sumOpenInterest" : 0.8008281904610115,
  "sumOpenInterestValue" : 6.027456183070403,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter symbol: (query)  (optional)     - parameter period: (query)  (optional)     - parameter limit: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawFuturesOpenInterestHistory]> 
     */
    open class func getFuturesOpenInterestHistoryWithRequestBuilder(symbol: String? = nil, period: BinancePeriodInterval? = nil, limit: Int? = nil, startTime: Date? = nil, endTime: Date? = nil) -> RequestBuilder<[BinanceRawFuturesOpenInterestHistory]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/rates/interest/history"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol, 
                        "period": period, 
                        "limit": limit?.encodeToJSON(), 
                        "startTime": startTime?.encodeToJSON(), 
                        "endTime": endTime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BinanceRawFuturesOpenInterestHistory]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Futures open positions
     - parameter accountId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesOpenOrders(accountId: UUID? = nil, completion: @escaping ((_ data: BinanceRawFuturesOrderItemsViewModel?,_ error: Error?) -> Void)) {
        getFuturesOpenOrdersWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Futures open positions
     - GET /v2.0/tradingplatform/binance/futures/usdt/orders
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 4,
  "items" : [ {
    "symbol" : "symbol",
    "cumulativeQuoteQuantity" : 5.637376656633329,
    "executedQuantity" : 2.3021358869347655,
    "side" : "Buy",
    "priceRate" : 2.027123023002322,
    "originalType" : "Limit",
    "orderId" : 0,
    "avgPrice" : 1.4658129805029452,
    "originalQuantity" : 7.061401241503109,
    "clientOrderId" : "clientOrderId",
    "positionSide" : "Short",
    "activatePrice" : 3.616076749251911,
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "closePosition" : true,
    "accountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "cumulativeQuantity" : 5.962133916683182,
    "stopPrice" : 9.301444243932576,
    "reduceOnly" : true,
    "price" : 6.027456183070403,
    "createdTime" : "2000-01-23T04:56:07.000+00:00",
    "timeInForce" : "GoodTillCancel",
    "workingType" : "Mark",
    "status" : "New"
  }, {
    "symbol" : "symbol",
    "cumulativeQuoteQuantity" : 5.637376656633329,
    "executedQuantity" : 2.3021358869347655,
    "side" : "Buy",
    "priceRate" : 2.027123023002322,
    "originalType" : "Limit",
    "orderId" : 0,
    "avgPrice" : 1.4658129805029452,
    "originalQuantity" : 7.061401241503109,
    "clientOrderId" : "clientOrderId",
    "positionSide" : "Short",
    "activatePrice" : 3.616076749251911,
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "closePosition" : true,
    "accountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "cumulativeQuantity" : 5.962133916683182,
    "stopPrice" : 9.301444243932576,
    "reduceOnly" : true,
    "price" : 6.027456183070403,
    "createdTime" : "2000-01-23T04:56:07.000+00:00",
    "timeInForce" : "GoodTillCancel",
    "workingType" : "Mark",
    "status" : "New"
  } ]
}}]
     - parameter accountId: (query)  (optional)

     - returns: RequestBuilder<BinanceRawFuturesOrderItemsViewModel> 
     */
    open class func getFuturesOpenOrdersWithRequestBuilder(accountId: UUID? = nil) -> RequestBuilder<BinanceRawFuturesOrderItemsViewModel> {
        let path = "/v2.0/tradingplatform/binance/futures/usdt/orders"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId
        ])

        let requestBuilder: RequestBuilder<BinanceRawFuturesOrderItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get futures order book
     - parameter symbol: (query)  (optional)     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesOrderBook(symbol: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: BinanceRawOrderBook?,_ error: Error?) -> Void)) {
        getFuturesOrderBookWithRequestBuilder(symbol: symbol, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get futures order book
     - GET /v2.0/tradingplatform/binance/futures/market/depth
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "symbol" : "symbol",
  "lastUpdateId" : 0,
  "asks" : [ null, null ],
  "bids" : [ {
    "quantity" : 5.962133916683182,
    "price" : 1.4658129805029452
  }, {
    "quantity" : 5.962133916683182,
    "price" : 1.4658129805029452
  } ],
  "firstUpdateId" : 6
}}]
     - parameter symbol: (query)  (optional)     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<BinanceRawOrderBook> 
     */
    open class func getFuturesOrderBookWithRequestBuilder(symbol: String? = nil, limit: Int? = nil) -> RequestBuilder<BinanceRawOrderBook> {
        let path = "/v2.0/tradingplatform/binance/futures/market/depth"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol, 
                        "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<BinanceRawOrderBook>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets position information
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesPositionInformation(accountId: UUID? = nil, symbol: String? = nil, completion: @escaping ((_ data: [BinanceRawFuturesPosition]?,_ error: Error?) -> Void)) {
        getFuturesPositionInformationWithRequestBuilder(accountId: accountId, symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets position information
     - GET /v2.0/tradingplatform/binance/account/futures/position/risk
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "entryPrice" : 0.8008281904610115,
  "leverage" : 1,
  "symbol" : "symbol",
  "isAutoAddMargin" : true,
  "markPrice" : 5.637376656633329,
  "quantity" : 2.3021358869347655,
  "isolatedMargin" : 6.027456183070403,
  "marginType" : "Isolated",
  "unrealizedPnL" : 7.061401241503109,
  "positionSide" : "Short",
  "liquidationPrice" : 5.962133916683182,
  "maxNotionalValue" : "maxNotionalValue"
}, {
  "entryPrice" : 0.8008281904610115,
  "leverage" : 1,
  "symbol" : "symbol",
  "isAutoAddMargin" : true,
  "markPrice" : 5.637376656633329,
  "quantity" : 2.3021358869347655,
  "isolatedMargin" : 6.027456183070403,
  "marginType" : "Isolated",
  "unrealizedPnL" : 7.061401241503109,
  "positionSide" : "Short",
  "liquidationPrice" : 5.962133916683182,
  "maxNotionalValue" : "maxNotionalValue"
} ]}]
     - parameter accountId: (query)  (optional)     - parameter symbol: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawFuturesPosition]> 
     */
    open class func getFuturesPositionInformationWithRequestBuilder(accountId: UUID? = nil, symbol: String? = nil) -> RequestBuilder<[BinanceRawFuturesPosition]> {
        let path = "/v2.0/tradingplatform/binance/account/futures/position/risk"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<[BinanceRawFuturesPosition]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter accountId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesPositionMode(accountId: UUID? = nil, completion: @escaping ((_ data: BinanceRawFuturesPositionMode?,_ error: Error?) -> Void)) {
        getFuturesPositionModeWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/tradingplatform/binance/account/futures/position/mode
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "positionMode" : "Hedge"
}}]
     - parameter accountId: (query)  (optional)

     - returns: RequestBuilder<BinanceRawFuturesPositionMode> 
     */
    open class func getFuturesPositionModeWithRequestBuilder(accountId: UUID? = nil) -> RequestBuilder<BinanceRawFuturesPositionMode> {
        let path = "/v2.0/tradingplatform/binance/account/futures/position/mode"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId
        ])

        let requestBuilder: RequestBuilder<BinanceRawFuturesPositionMode>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get futures symbol aggregated trades
     - parameter symbol: (query)  (optional)     - parameter fromId: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesSymbolAggregatedTrades(symbol: String? = nil, fromId: Int64? = nil, startTime: Date? = nil, endTime: Date? = nil, limit: Int? = nil, completion: @escaping ((_ data: [BinanceRawAggregatedTrade]?,_ error: Error?) -> Void)) {
        getFuturesSymbolAggregatedTradesWithRequestBuilder(symbol: symbol, fromId: fromId, startTime: startTime, endTime: endTime, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get futures symbol aggregated trades
     - GET /v2.0/tradingplatform/binance/futures/market/trades/aggregated
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "tradeTime" : "2000-01-23T04:56:07.000+00:00",
  "aggregateTradeId" : 0,
  "quantity" : 1.4658129805029452,
  "buyerIsMaker" : true,
  "price" : 6.027456183070403,
  "firstTradeId" : 5,
  "lastTradeId" : 5,
  "wasBestPriceMatch" : true
}, {
  "tradeTime" : "2000-01-23T04:56:07.000+00:00",
  "aggregateTradeId" : 0,
  "quantity" : 1.4658129805029452,
  "buyerIsMaker" : true,
  "price" : 6.027456183070403,
  "firstTradeId" : 5,
  "lastTradeId" : 5,
  "wasBestPriceMatch" : true
} ]}]
     - parameter symbol: (query)  (optional)     - parameter fromId: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawAggregatedTrade]> 
     */
    open class func getFuturesSymbolAggregatedTradesWithRequestBuilder(symbol: String? = nil, fromId: Int64? = nil, startTime: Date? = nil, endTime: Date? = nil, limit: Int? = nil) -> RequestBuilder<[BinanceRawAggregatedTrade]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/trades/aggregated"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol, 
                        "fromId": fromId?.encodeToJSON(), 
                        "startTime": startTime?.encodeToJSON(), 
                        "endTime": endTime?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BinanceRawAggregatedTrade]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get futures symbol historical trades
     - parameter symbol: (query)  (optional)     - parameter limit: (query)  (optional)     - parameter fromId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesSymbolHistoricalTrades(symbol: String? = nil, limit: Int? = nil, fromId: Int64? = nil, completion: @escaping ((_ data: [BinanceRawRecentTrade]?,_ error: Error?) -> Void)) {
        getFuturesSymbolHistoricalTradesWithRequestBuilder(symbol: symbol, limit: limit, fromId: fromId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get futures symbol historical trades
     - GET /v2.0/tradingplatform/binance/futures/market/trades/historical
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "tradeTime" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 0,
  "baseQuantity" : 1.4658129805029452,
  "buyerIsMaker" : true,
  "price" : 6.027456183070403,
  "isBestMatch" : true,
  "quoteQuantity" : 5.962133916683182
}, {
  "tradeTime" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 0,
  "baseQuantity" : 1.4658129805029452,
  "buyerIsMaker" : true,
  "price" : 6.027456183070403,
  "isBestMatch" : true,
  "quoteQuantity" : 5.962133916683182
} ]}]
     - parameter symbol: (query)  (optional)     - parameter limit: (query)  (optional)     - parameter fromId: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawRecentTrade]> 
     */
    open class func getFuturesSymbolHistoricalTradesWithRequestBuilder(symbol: String? = nil, limit: Int? = nil, fromId: Int64? = nil) -> RequestBuilder<[BinanceRawRecentTrade]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/trades/historical"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol, 
                        "limit": limit?.encodeToJSON(), 
                        "fromId": fromId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BinanceRawRecentTrade]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get futures symbol recent trades
     - parameter symbol: (query)  (optional)     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesSymbolRecentTrades(symbol: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: [BinanceRawRecentTrade]?,_ error: Error?) -> Void)) {
        getFuturesSymbolRecentTradesWithRequestBuilder(symbol: symbol, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get futures symbol recent trades
     - GET /v2.0/tradingplatform/binance/futures/market/trades/recent
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "tradeTime" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 0,
  "baseQuantity" : 1.4658129805029452,
  "buyerIsMaker" : true,
  "price" : 6.027456183070403,
  "isBestMatch" : true,
  "quoteQuantity" : 5.962133916683182
}, {
  "tradeTime" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 0,
  "baseQuantity" : 1.4658129805029452,
  "buyerIsMaker" : true,
  "price" : 6.027456183070403,
  "isBestMatch" : true,
  "quoteQuantity" : 5.962133916683182
} ]}]
     - parameter symbol: (query)  (optional)     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawRecentTrade]> 
     */
    open class func getFuturesSymbolRecentTradesWithRequestBuilder(symbol: String? = nil, limit: Int? = nil) -> RequestBuilder<[BinanceRawRecentTrade]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/trades/recent"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol, 
                        "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BinanceRawRecentTrade]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get taker buy/sell volume ratio
     - parameter symbol: (query)  (optional)     - parameter period: (query)  (optional)     - parameter limit: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesTakerBuySellVolumeRatio(symbol: String? = nil, period: BinancePeriodInterval? = nil, limit: Int? = nil, startTime: Date? = nil, endTime: Date? = nil, completion: @escaping ((_ data: [BinanceRawFuturesBuySellVolumeRatio]?,_ error: Error?) -> Void)) {
        getFuturesTakerBuySellVolumeRatioWithRequestBuilder(symbol: symbol, period: period, limit: limit, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get taker buy/sell volume ratio
     - GET /v2.0/tradingplatform/binance/futures/market/ratio/buysell/volume/taker
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "sellVolume" : 1.4658129805029452,
  "buySellRatio" : 0.8008281904610115,
  "buyVolume" : 6.027456183070403,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "sellVolume" : 1.4658129805029452,
  "buySellRatio" : 0.8008281904610115,
  "buyVolume" : 6.027456183070403,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter symbol: (query)  (optional)     - parameter period: (query)  (optional)     - parameter limit: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawFuturesBuySellVolumeRatio]> 
     */
    open class func getFuturesTakerBuySellVolumeRatioWithRequestBuilder(symbol: String? = nil, period: BinancePeriodInterval? = nil, limit: Int? = nil, startTime: Date? = nil, endTime: Date? = nil) -> RequestBuilder<[BinanceRawFuturesBuySellVolumeRatio]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/ratio/buysell/volume/taker"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol, 
                        "period": period, 
                        "limit": limit?.encodeToJSON(), 
                        "startTime": startTime?.encodeToJSON(), 
                        "endTime": endTime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BinanceRawFuturesBuySellVolumeRatio]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get futures symbol price
     - parameter symbol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesTickerPrices(symbol: String? = nil, completion: @escaping ((_ data: BinanceRawPrice?,_ error: Error?) -> Void)) {
        getFuturesTickerPricesWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get futures symbol price
     - GET /v2.0/tradingplatform/binance/futures/market/ticker/price
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "symbol" : "symbol",
  "price" : 0.8008281904610115,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter symbol: (query)  (optional)

     - returns: RequestBuilder<BinanceRawPrice> 
     */
    open class func getFuturesTickerPricesWithRequestBuilder(symbol: String? = nil) -> RequestBuilder<BinanceRawPrice> {
        let path = "/v2.0/tradingplatform/binance/futures/market/ticker/price"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<BinanceRawPrice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get top trader long/short ratio (Accounts)
     - parameter symbol: (query)  (optional)     - parameter period: (query)  (optional)     - parameter limit: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesTopLongShortAccountRatio(symbol: String? = nil, period: BinancePeriodInterval? = nil, limit: Int? = nil, startTime: Date? = nil, endTime: Date? = nil, completion: @escaping ((_ data: [BinanceRawFuturesLongShortRatio]?,_ error: Error?) -> Void)) {
        getFuturesTopLongShortAccountRatioWithRequestBuilder(symbol: symbol, period: period, limit: limit, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get top trader long/short ratio (Accounts)
     - GET /v2.0/tradingplatform/binance/futures/market/ratio/longshort/top/account
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "symbol" : "symbol",
  "longAccount" : 6.027456183070403,
  "longShortRatio" : 0.8008281904610115,
  "shortAccount" : 1.4658129805029452,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "symbol" : "symbol",
  "longAccount" : 6.027456183070403,
  "longShortRatio" : 0.8008281904610115,
  "shortAccount" : 1.4658129805029452,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter symbol: (query)  (optional)     - parameter period: (query)  (optional)     - parameter limit: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawFuturesLongShortRatio]> 
     */
    open class func getFuturesTopLongShortAccountRatioWithRequestBuilder(symbol: String? = nil, period: BinancePeriodInterval? = nil, limit: Int? = nil, startTime: Date? = nil, endTime: Date? = nil) -> RequestBuilder<[BinanceRawFuturesLongShortRatio]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/ratio/longshort/top/account"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol, 
                        "period": period, 
                        "limit": limit?.encodeToJSON(), 
                        "startTime": startTime?.encodeToJSON(), 
                        "endTime": endTime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BinanceRawFuturesLongShortRatio]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get top trader long/short ratio (Positions)
     - parameter symbol: (query)  (optional)     - parameter period: (query)  (optional)     - parameter limit: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFuturesTopLongShortPositionRatio(symbol: String? = nil, period: BinancePeriodInterval? = nil, limit: Int? = nil, startTime: Date? = nil, endTime: Date? = nil, completion: @escaping ((_ data: [BinanceRawFuturesLongShortRatio]?,_ error: Error?) -> Void)) {
        getFuturesTopLongShortPositionRatioWithRequestBuilder(symbol: symbol, period: period, limit: limit, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get top trader long/short ratio (Positions)
     - GET /v2.0/tradingplatform/binance/futures/market/ratio/longshort/top/position
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "symbol" : "symbol",
  "longAccount" : 6.027456183070403,
  "longShortRatio" : 0.8008281904610115,
  "shortAccount" : 1.4658129805029452,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "symbol" : "symbol",
  "longAccount" : 6.027456183070403,
  "longShortRatio" : 0.8008281904610115,
  "shortAccount" : 1.4658129805029452,
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter symbol: (query)  (optional)     - parameter period: (query)  (optional)     - parameter limit: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawFuturesLongShortRatio]> 
     */
    open class func getFuturesTopLongShortPositionRatioWithRequestBuilder(symbol: String? = nil, period: BinancePeriodInterval? = nil, limit: Int? = nil, startTime: Date? = nil, endTime: Date? = nil) -> RequestBuilder<[BinanceRawFuturesLongShortRatio]> {
        let path = "/v2.0/tradingplatform/binance/futures/market/ratio/longshort/top/position"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "symbol": symbol, 
                        "period": period, 
                        "limit": limit?.encodeToJSON(), 
                        "startTime": startTime?.encodeToJSON(), 
                        "endTime": endTime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BinanceRawFuturesLongShortRatio]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get klines
     - parameter symbol: (path)       - parameter interval: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKlines(symbol: String, interval: BinanceRawKlineInterval? = nil, startTime: Date? = nil, endTime: Date? = nil, limit: Int? = nil, completion: @escaping ((_ data: BinanceRawKlineItemsViewModel?,_ error: Error?) -> Void)) {
        getKlinesWithRequestBuilder(symbol: symbol, interval: interval, startTime: startTime, endTime: endTime, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get klines
     - GET /v2.0/tradingplatform/binance/market/{symbol}/klines
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "items" : [ {
    "takerBuyQuoteVolume" : 3.616076749251911,
    "high" : 6.027456183070403,
    "tradeCount" : 7,
    "low" : 1.4658129805029452,
    "closeTime" : "2000-01-23T04:56:07.000+00:00",
    "takerBuyBaseVolume" : 9.301444243932576,
    "quoteVolume" : 2.3021358869347655,
    "openTime" : "2000-01-23T04:56:07.000+00:00",
    "baseVolume" : 5.637376656633329,
    "close" : 5.962133916683182,
    "open" : 0.8008281904610115
  }, {
    "takerBuyQuoteVolume" : 3.616076749251911,
    "high" : 6.027456183070403,
    "tradeCount" : 7,
    "low" : 1.4658129805029452,
    "closeTime" : "2000-01-23T04:56:07.000+00:00",
    "takerBuyBaseVolume" : 9.301444243932576,
    "quoteVolume" : 2.3021358869347655,
    "openTime" : "2000-01-23T04:56:07.000+00:00",
    "baseVolume" : 5.637376656633329,
    "close" : 5.962133916683182,
    "open" : 0.8008281904610115
  } ]
}}]
     - parameter symbol: (path)       - parameter interval: (query)  (optional)     - parameter startTime: (query)  (optional)     - parameter endTime: (query)  (optional)     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<BinanceRawKlineItemsViewModel> 
     */
    open class func getKlinesWithRequestBuilder(symbol: String, interval: BinanceRawKlineInterval? = nil, startTime: Date? = nil, endTime: Date? = nil, limit: Int? = nil) -> RequestBuilder<BinanceRawKlineItemsViewModel> {
        var path = "/v2.0/tradingplatform/binance/market/{symbol}/klines"
        let symbolPreEscape = "\(symbol)"
        let symbolPostEscape = symbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol}", with: symbolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "interval": interval, 
                        "startTime": startTime?.encodeToJSON(), 
                        "endTime": endTime?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<BinanceRawKlineItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Open positions
     - parameter accountId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOpenOrders(accountId: UUID? = nil, completion: @escaping ((_ data: BinanceRawOrderItemsViewModel?,_ error: Error?) -> Void)) {
        getOpenOrdersWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Open positions
     - GET /v2.0/tradingplatform/binance/spot/orders
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "items" : [ {
    "symbol" : "symbol",
    "orderId" : 5,
    "executionType" : "New",
    "type" : "Limit",
    "originalClientOrderId" : "originalClientOrderId",
    "rejectReason" : "None",
    "buyerIsMaker" : true,
    "price" : 6.027456183070403,
    "commission" : 3.616076749251911,
    "lastQuantityFilled" : 2.3021358869347655,
    "timeInForce" : "GoodTillCancel",
    "icebergQuantity" : 5.962133916683182,
    "quoteQuantity" : 7.386281948385884,
    "lastPriceFilled" : 9.301444243932576,
    "quoteQuantityFilled" : 4.145608029883936,
    "side" : "Buy",
    "quantity" : 0.8008281904610115,
    "orderListId" : 1,
    "lastQuoteQuantity" : 1.2315135367772556,
    "clientOrderId" : "clientOrderId",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "commissionAsset" : "commissionAsset",
    "quantityFilled" : 7.061401241503109,
    "accountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "stopPrice" : 1.4658129805029452,
    "createTime" : "2000-01-23T04:56:07.000+00:00",
    "tradeId" : 2,
    "isWorking" : true,
    "status" : "New"
  }, {
    "symbol" : "symbol",
    "orderId" : 5,
    "executionType" : "New",
    "type" : "Limit",
    "originalClientOrderId" : "originalClientOrderId",
    "rejectReason" : "None",
    "buyerIsMaker" : true,
    "price" : 6.027456183070403,
    "commission" : 3.616076749251911,
    "lastQuantityFilled" : 2.3021358869347655,
    "timeInForce" : "GoodTillCancel",
    "icebergQuantity" : 5.962133916683182,
    "quoteQuantity" : 7.386281948385884,
    "lastPriceFilled" : 9.301444243932576,
    "quoteQuantityFilled" : 4.145608029883936,
    "side" : "Buy",
    "quantity" : 0.8008281904610115,
    "orderListId" : 1,
    "lastQuoteQuantity" : 1.2315135367772556,
    "clientOrderId" : "clientOrderId",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "commissionAsset" : "commissionAsset",
    "quantityFilled" : 7.061401241503109,
    "accountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "stopPrice" : 1.4658129805029452,
    "createTime" : "2000-01-23T04:56:07.000+00:00",
    "tradeId" : 2,
    "isWorking" : true,
    "status" : "New"
  } ]
}}]
     - parameter accountId: (query)  (optional)

     - returns: RequestBuilder<BinanceRawOrderItemsViewModel> 
     */
    open class func getOpenOrdersWithRequestBuilder(accountId: UUID? = nil) -> RequestBuilder<BinanceRawOrderItemsViewModel> {
        let path = "/v2.0/tradingplatform/binance/spot/orders"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId
        ])

        let requestBuilder: RequestBuilder<BinanceRawOrderItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get order book
     - parameter symbol: (path)       - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrderBook(symbol: String, limit: Int? = nil, completion: @escaping ((_ data: BinanceRawOrderBook?,_ error: Error?) -> Void)) {
        getOrderBookWithRequestBuilder(symbol: symbol, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get order book
     - GET /v2.0/tradingplatform/binance/market/{symbol}/depth
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "symbol" : "symbol",
  "lastUpdateId" : 0,
  "asks" : [ null, null ],
  "bids" : [ {
    "quantity" : 5.962133916683182,
    "price" : 1.4658129805029452
  }, {
    "quantity" : 5.962133916683182,
    "price" : 1.4658129805029452
  } ],
  "firstUpdateId" : 6
}}]
     - parameter symbol: (path)       - parameter limit: (query)  (optional)

     - returns: RequestBuilder<BinanceRawOrderBook> 
     */
    open class func getOrderBookWithRequestBuilder(symbol: String, limit: Int? = nil) -> RequestBuilder<BinanceRawOrderBook> {
        var path = "/v2.0/tradingplatform/binance/market/{symbol}/depth"
        let symbolPreEscape = "\(symbol)"
        let symbolPostEscape = symbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol}", with: symbolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<BinanceRawOrderBook>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get symbol recent trades
     - parameter symbol: (path)       - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSymbolRecentTrades(symbol: String, limit: Int? = nil, completion: @escaping ((_ data: [BinanceRawRecentTrade]?,_ error: Error?) -> Void)) {
        getSymbolRecentTradesWithRequestBuilder(symbol: symbol, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get symbol recent trades
     - GET /v2.0/tradingplatform/binance/market/{symbol}/trades/recent
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "tradeTime" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 0,
  "baseQuantity" : 1.4658129805029452,
  "buyerIsMaker" : true,
  "price" : 6.027456183070403,
  "isBestMatch" : true,
  "quoteQuantity" : 5.962133916683182
}, {
  "tradeTime" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 0,
  "baseQuantity" : 1.4658129805029452,
  "buyerIsMaker" : true,
  "price" : 6.027456183070403,
  "isBestMatch" : true,
  "quoteQuantity" : 5.962133916683182
} ]}]
     - parameter symbol: (path)       - parameter limit: (query)  (optional)

     - returns: RequestBuilder<[BinanceRawRecentTrade]> 
     */
    open class func getSymbolRecentTradesWithRequestBuilder(symbol: String, limit: Int? = nil) -> RequestBuilder<[BinanceRawRecentTrade]> {
        var path = "/v2.0/tradingplatform/binance/market/{symbol}/trades/recent"
        let symbolPreEscape = "\(symbol)"
        let symbolPostEscape = symbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol}", with: symbolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BinanceRawRecentTrade]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Account history
     - parameter accountId: (query)  (optional)     - parameter mode: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTradesHistory(accountId: UUID? = nil, mode: TradingPlatformBinanceOrdersMode? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: BinanceRawOrderItemsViewModel?,_ error: Error?) -> Void)) {
        getTradesHistoryWithRequestBuilder(accountId: accountId, mode: mode, dateFrom: dateFrom, dateTo: dateTo, symbol: symbol, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Account history
     - GET /v2.0/tradingplatform/binance/spot/trades
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "items" : [ {
    "symbol" : "symbol",
    "orderId" : 5,
    "executionType" : "New",
    "type" : "Limit",
    "originalClientOrderId" : "originalClientOrderId",
    "rejectReason" : "None",
    "buyerIsMaker" : true,
    "price" : 6.027456183070403,
    "commission" : 3.616076749251911,
    "lastQuantityFilled" : 2.3021358869347655,
    "timeInForce" : "GoodTillCancel",
    "icebergQuantity" : 5.962133916683182,
    "quoteQuantity" : 7.386281948385884,
    "lastPriceFilled" : 9.301444243932576,
    "quoteQuantityFilled" : 4.145608029883936,
    "side" : "Buy",
    "quantity" : 0.8008281904610115,
    "orderListId" : 1,
    "lastQuoteQuantity" : 1.2315135367772556,
    "clientOrderId" : "clientOrderId",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "commissionAsset" : "commissionAsset",
    "quantityFilled" : 7.061401241503109,
    "accountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "stopPrice" : 1.4658129805029452,
    "createTime" : "2000-01-23T04:56:07.000+00:00",
    "tradeId" : 2,
    "isWorking" : true,
    "status" : "New"
  }, {
    "symbol" : "symbol",
    "orderId" : 5,
    "executionType" : "New",
    "type" : "Limit",
    "originalClientOrderId" : "originalClientOrderId",
    "rejectReason" : "None",
    "buyerIsMaker" : true,
    "price" : 6.027456183070403,
    "commission" : 3.616076749251911,
    "lastQuantityFilled" : 2.3021358869347655,
    "timeInForce" : "GoodTillCancel",
    "icebergQuantity" : 5.962133916683182,
    "quoteQuantity" : 7.386281948385884,
    "lastPriceFilled" : 9.301444243932576,
    "quoteQuantityFilled" : 4.145608029883936,
    "side" : "Buy",
    "quantity" : 0.8008281904610115,
    "orderListId" : 1,
    "lastQuoteQuantity" : 1.2315135367772556,
    "clientOrderId" : "clientOrderId",
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "commissionAsset" : "commissionAsset",
    "quantityFilled" : 7.061401241503109,
    "accountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "stopPrice" : 1.4658129805029452,
    "createTime" : "2000-01-23T04:56:07.000+00:00",
    "tradeId" : 2,
    "isWorking" : true,
    "status" : "New"
  } ]
}}]
     - parameter accountId: (query)  (optional)     - parameter mode: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<BinanceRawOrderItemsViewModel> 
     */
    open class func getTradesHistoryWithRequestBuilder(accountId: UUID? = nil, mode: TradingPlatformBinanceOrdersMode? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<BinanceRawOrderItemsViewModel> {
        let path = "/v2.0/tradingplatform/binance/spot/trades"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "AccountId": accountId, 
                        "Mode": mode, 
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "Symbol": symbol, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<BinanceRawOrderItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Ping account stream
     - parameter accountId: (query)  (optional)     - parameter listenKey: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func keepAliveAccountStream(accountId: UUID? = nil, listenKey: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        keepAliveAccountStreamWithRequestBuilder(accountId: accountId, listenKey: listenKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Ping account stream
     - POST /v2.0/tradingplatform/binance/spot/stream/ping
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter accountId: (query)  (optional)     - parameter listenKey: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func keepAliveAccountStreamWithRequestBuilder(accountId: UUID? = nil, listenKey: String? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/tradingplatform/binance/spot/stream/ping"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "listenKey": listenKey
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Place order
     - parameter body: (body)  (optional)     - parameter accountId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func placeOrder(body: BinanceRawPlaceOrder? = nil, accountId: UUID? = nil, completion: @escaping ((_ data: BinanceRawPlacedOrder?,_ error: Error?) -> Void)) {
        placeOrderWithRequestBuilder(body: body, accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Place order
     - POST /v2.0/tradingplatform/binance/spot/orders/place
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "marginBuyBorrowAmount" : 1.2315135367772556,
  "symbol" : "symbol",
  "side" : "Buy",
  "orderListId" : 6,
  "quantity" : 5.962133916683182,
  "orderId" : 0,
  "marginBuyBorrowAsset" : "marginBuyBorrowAsset",
  "clientOrderId" : "clientOrderId",
  "type" : "Limit",
  "quantityFilled" : 5.637376656633329,
  "stopPrice" : 7.386281948385884,
  "originalClientOrderId" : "originalClientOrderId",
  "createTime" : "2000-01-23T04:56:07.000+00:00",
  "price" : 1.4658129805029452,
  "timeInForce" : "GoodTillCancel",
  "quoteQuantity" : 7.061401241503109,
  "fills" : [ {
    "quantity" : 2.027123023002322,
    "price" : 3.616076749251911,
    "commission" : 4.145608029883936,
    "commissionAsset" : "commissionAsset",
    "tradeId" : 9
  }, {
    "quantity" : 2.027123023002322,
    "price" : 3.616076749251911,
    "commission" : 4.145608029883936,
    "commissionAsset" : "commissionAsset",
    "tradeId" : 9
  } ],
  "quoteQuantityFilled" : 2.3021358869347655,
  "status" : "New"
}}]
     - parameter body: (body)  (optional)     - parameter accountId: (query)  (optional)

     - returns: RequestBuilder<BinanceRawPlacedOrder> 
     */
    open class func placeOrderWithRequestBuilder(body: BinanceRawPlaceOrder? = nil, accountId: UUID? = nil) -> RequestBuilder<BinanceRawPlacedOrder> {
        let path = "/v2.0/tradingplatform/binance/spot/orders/place"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId
        ])

        let requestBuilder: RequestBuilder<BinanceRawPlacedOrder>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove account favorite symbol
     - parameter _id: (path)       - parameter symbol: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeFavoriteSymbol(_id: UUID, symbol: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        removeFavoriteSymbolWithRequestBuilder(_id: _id, symbol: symbol).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove account favorite symbol
     - POST /v2.0/tradingplatform/accounts/{id}/symbols/favorite/{symbol}/remove
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter symbol: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func removeFavoriteSymbolWithRequestBuilder(_id: UUID, symbol: String) -> RequestBuilder<Void> {
        var path = "/v2.0/tradingplatform/accounts/{id}/symbols/favorite/{symbol}/remove"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let symbolPreEscape = "\(symbol)"
        let symbolPostEscape = symbolPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{symbol}", with: symbolPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter accountId: (query)  (optional)     - parameter mode: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setFuturesPositionMode(accountId: UUID? = nil, mode: BinancePositionMode? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        setFuturesPositionModeWithRequestBuilder(accountId: accountId, mode: mode).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v2.0/tradingplatform/binance/account/futures/position/mode
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter accountId: (query)  (optional)     - parameter mode: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func setFuturesPositionModeWithRequestBuilder(accountId: UUID? = nil, mode: BinancePositionMode? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/tradingplatform/binance/account/futures/position/mode"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "mode": mode
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Start account stream
     - parameter accountId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func startAccountStream(accountId: UUID? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        startAccountStreamWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Start account stream
     - POST /v2.0/tradingplatform/binance/spot/stream/start
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter accountId: (query)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func startAccountStreamWithRequestBuilder(accountId: UUID? = nil) -> RequestBuilder<String> {
        let path = "/v2.0/tradingplatform/binance/spot/stream/start"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId
        ])

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Stop account stream
     - parameter accountId: (query)  (optional)     - parameter listenKey: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopAccountStream(accountId: UUID? = nil, listenKey: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        stopAccountStreamWithRequestBuilder(accountId: accountId, listenKey: listenKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Stop account stream
     - POST /v2.0/tradingplatform/binance/spot/stream/stop
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter accountId: (query)  (optional)     - parameter listenKey: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func stopAccountStreamWithRequestBuilder(accountId: UUID? = nil, listenKey: String? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/tradingplatform/binance/spot/stream/stop"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "accountId": accountId, 
                        "listenKey": listenKey
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
