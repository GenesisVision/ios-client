//
// ManagerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ManagerAPI {
    /**
     Manager assets list
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerAssetsGet(authorization: String, completion: @escaping ((_ data: ManagerAssets?,_ error: Error?) -> Void)) {
        v10ManagerAssetsGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Manager assets list
     - GET /v1.0/manager/assets
     - examples: [{contentType=application/json, example={
  "funds" : [ {
    "color" : "color",
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "url" : "url"
  }, {
    "color" : "color",
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "url" : "url"
  } ],
  "programs" : [ {
    "color" : "color",
    "level" : 0,
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "url" : "url",
    "levelProgress" : 6.027456183070403
  }, {
    "color" : "color",
    "level" : 0,
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "url" : "url",
    "levelProgress" : 6.027456183070403
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ManagerAssets> 
     */
    open class func v10ManagerAssetsGetWithRequestBuilder(authorization: String) -> RequestBuilder<ManagerAssets> {
        let path = "/v1.0/manager/assets"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ManagerAssets>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Manager details
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerByIdDetailsGet(id: String, completion: @escaping ((_ data: ManagerProfileDetails?,_ error: Error?) -> Void)) {
        v10ManagerByIdDetailsGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Manager details
     - GET /v1.0/manager/{id}/details
     - examples: [{contentType=application/json, example={
  "overview" : { },
  "managerProfile" : {
    "socialLinks" : [ {
      "name" : "name",
      "logo" : "logo",
      "type" : "Twitter",
      "value" : "value",
      "url" : "url"
    }, {
      "name" : "name",
      "logo" : "logo",
      "type" : "Twitter",
      "value" : "value",
      "url" : "url"
    } ],
    "assets" : [ "assets", "assets" ],
    "about" : "about",
    "regDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "avatar" : "avatar",
    "url" : "url",
    "username" : "username"
  },
  "programsCount" : 0,
  "fundsCount" : 6
}}]
     
     - parameter id: (path)  

     - returns: RequestBuilder<ManagerProfileDetails> 
     */
    open class func v10ManagerByIdDetailsGetWithRequestBuilder(id: String) -> RequestBuilder<ManagerProfileDetails> {
        var path = "/v1.0/manager/{id}/details"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ManagerProfileDetails>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Manager profile
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerByIdGet(id: String, completion: @escaping ((_ data: ManagerProfile?,_ error: Error?) -> Void)) {
        v10ManagerByIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Manager profile
     - GET /v1.0/manager/{id}
     - examples: [{contentType=application/json, example={
  "socialLinks" : [ {
    "name" : "name",
    "logo" : "logo",
    "type" : "Twitter",
    "value" : "value",
    "url" : "url"
  }, {
    "name" : "name",
    "logo" : "logo",
    "type" : "Twitter",
    "value" : "value",
    "url" : "url"
  } ],
  "assets" : [ "assets", "assets" ],
  "about" : "about",
  "regDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "avatar" : "avatar",
  "url" : "url",
  "username" : "username"
}}]
     
     - parameter id: (path)  

     - returns: RequestBuilder<ManagerProfile> 
     */
    open class func v10ManagerByIdGetWithRequestBuilder(id: String) -> RequestBuilder<ManagerProfile> {
        var path = "/v1.0/manager/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ManagerProfile>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_v10ManagerEventsGet: String { 
        case all = "All"
        case assetStarted = "AssetStarted"
        case programPeriodStarts = "ProgramPeriodStarts"
        case programPeriodEnds = "ProgramPeriodEnds"
        case investorInvest = "InvestorInvest"
        case investorWithdraw = "InvestorWithdraw"
        case managerInvest = "ManagerInvest"
        case managerWithdraw = "ManagerWithdraw"
        case assetFinished = "AssetFinished"
        case entranceFee = "EntranceFee"
        case exitFee = "ExitFee"
        case programStopOut = "ProgramStopOut"
        case programManagerTradingFeeAccrual = "ProgramManagerTradingFeeAccrual"
        case programSignalSubscribe = "ProgramSignalSubscribe"
        case programBrokerChanged = "ProgramBrokerChanged"
    }

    /**
     * enum for parameter assetType
     */
    public enum AssetType_v10ManagerEventsGet: String { 
        case all = "All"
        case program = "Program"
        case fund = "Fund"
        case signal = "Signal"
    }

    /**
     Manager events
     
     - parameter authorization: (header) JWT access token 
     - parameter assetId: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter assetType: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerEventsGet(authorization: String, assetId: UUID? = nil, from: Date? = nil, to: Date? = nil, type: ModelType_v10ManagerEventsGet? = nil, assetType: AssetType_v10ManagerEventsGet? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ManagerPortfolioEvents?,_ error: Error?) -> Void)) {
        v10ManagerEventsGetWithRequestBuilder(authorization: authorization, assetId: assetId, from: from, to: to, type: type, assetType: assetType, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Manager events
     - GET /v1.0/manager/events
     - examples: [{contentType=application/json, example={
  "total" : 7,
  "events" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "programType" : "Program",
    "periodNumber" : 2,
    "color" : "color",
    "description" : "description",
    "title" : "title",
    "type" : "All",
    "url" : "url",
    "profitPercent" : 5.637376656633329,
    "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "logo" : "logo",
    "currency" : "Undefined",
    "feeValue" : 5.962133916683182,
    "value" : 1.4658129805029452
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "programType" : "Program",
    "periodNumber" : 2,
    "color" : "color",
    "description" : "description",
    "title" : "title",
    "type" : "All",
    "url" : "url",
    "profitPercent" : 5.637376656633329,
    "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "logo" : "logo",
    "currency" : "Undefined",
    "feeValue" : 5.962133916683182,
    "value" : 1.4658129805029452
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter assetId: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter assetType: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ManagerPortfolioEvents> 
     */
    open class func v10ManagerEventsGetWithRequestBuilder(authorization: String, assetId: UUID? = nil, from: Date? = nil, to: Date? = nil, type: ModelType_v10ManagerEventsGet? = nil, assetType: AssetType_v10ManagerEventsGet? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ManagerPortfolioEvents> {
        let path = "/v1.0/manager/events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "AssetId": assetId, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "Type": type?.rawValue, 
            "AssetType": assetType?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ManagerPortfolioEvents>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update fund assets parts
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter assets: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerFundsByIdAssetsUpdatePost(id: UUID, authorization: String, assets: [FundAssetPart]? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerFundsByIdAssetsUpdatePostWithRequestBuilder(id: id, authorization: authorization, assets: assets).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update fund assets parts
     - POST /v1.0/manager/funds/{id}/assets/update
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter assets: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerFundsByIdAssetsUpdatePostWithRequestBuilder(id: UUID, authorization: String, assets: [FundAssetPart]? = nil) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/funds/{id}/assets/update"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assets)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Close existing fund
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter twoFactorCode: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerFundsByIdClosePost(id: UUID, authorization: String, twoFactorCode: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerFundsByIdClosePostWithRequestBuilder(id: id, authorization: authorization, twoFactorCode: twoFactorCode).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Close existing fund
     - POST /v1.0/manager/funds/{id}/close
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter twoFactorCode: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerFundsByIdClosePostWithRequestBuilder(id: UUID, authorization: String, twoFactorCode: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/funds/{id}/close"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "twoFactorCode": twoFactorCode
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10ManagerFundsByIdInvestByAmountPost: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Deposit.  Invest in GVT if currency is empty
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerFundsByIdInvestByAmountPost(id: UUID, amount: Double, authorization: String, currency: Currency_v10ManagerFundsByIdInvestByAmountPost? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerFundsByIdInvestByAmountPostWithRequestBuilder(id: id, amount: amount, authorization: authorization, currency: currency).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Deposit.  Invest in GVT if currency is empty
     - POST /v1.0/manager/funds/{id}/invest/{amount}
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional, default to 100)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerFundsByIdInvestByAmountPostWithRequestBuilder(id: UUID, amount: Double, authorization: String, currency: Currency_v10ManagerFundsByIdInvestByAmountPost? = nil) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/funds/{id}/invest/{amount}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{amount}", with: "\(amount)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currency": currency?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10ManagerFundsByIdInvestInfoByCurrencyGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Data for investing into the fund
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerFundsByIdInvestInfoByCurrencyGet(id: UUID, currency: Currency_v10ManagerFundsByIdInvestInfoByCurrencyGet, authorization: String, completion: @escaping ((_ data: FundInvestInfo?,_ error: Error?) -> Void)) {
        v10ManagerFundsByIdInvestInfoByCurrencyGetWithRequestBuilder(id: id, currency: currency, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Data for investing into the fund
     - GET /v1.0/manager/funds/{id}/invest/info/{currency}
     - examples: [{contentType=application/json, example={
  "programCurrencyMinInvestment" : 1.4658129805029452,
  "entryFee" : 5.962133916683182,
  "availableInWallet" : 0.8008281904610115,
  "isOwnProgram" : true,
  "rate" : 2.3021358869347655,
  "title" : "title",
  "minInvestmentAmount" : 6.027456183070403,
  "gvCommission" : 5.637376656633329
}}]
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<FundInvestInfo> 
     */
    open class func v10ManagerFundsByIdInvestInfoByCurrencyGetWithRequestBuilder(id: UUID, currency: Currency_v10ManagerFundsByIdInvestInfoByCurrencyGet, authorization: String) -> RequestBuilder<FundInvestInfo> {
        var path = "/v1.0/manager/funds/{id}/invest/info/{currency}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{currency}", with: "\(currency.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FundInvestInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get investment program/fund requests
     
     - parameter id: (path)  
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerFundsByIdRequestsBySkipByTakeGet(id: UUID, skip: Int, take: Int, authorization: String, completion: @escaping ((_ data: ProgramRequests?,_ error: Error?) -> Void)) {
        v10ManagerFundsByIdRequestsBySkipByTakeGetWithRequestBuilder(id: id, skip: skip, take: take, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get investment program/fund requests
     - GET /v1.0/manager/funds/{id}/requests/{skip}/{take}
     - examples: [{contentType=application/json, example={
  "totalValue" : 7.058770351582356,
  "total" : 0,
  "requests" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeExit" : 3.0937452626664474,
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "valueGvt" : 6.704019297950036,
    "withdrawAll" : true,
    "fundWithdrawPercent" : 7.143538047012306,
    "feeEntry" : 3.353193347011243,
    "type" : "Invest",
    "title" : "title",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "value" : 5.944895607614016,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeExit" : 3.0937452626664474,
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "valueGvt" : 6.704019297950036,
    "withdrawAll" : true,
    "fundWithdrawPercent" : 7.143538047012306,
    "feeEntry" : 3.353193347011243,
    "type" : "Invest",
    "title" : "title",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "value" : 5.944895607614016,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  } ]
}}]
     
     - parameter id: (path)  
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProgramRequests> 
     */
    open class func v10ManagerFundsByIdRequestsBySkipByTakeGetWithRequestBuilder(id: UUID, skip: Int, take: Int, authorization: String) -> RequestBuilder<ProgramRequests> {
        var path = "/v1.0/manager/funds/{id}/requests/{skip}/{take}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{skip}", with: "\(skip)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{take}", with: "\(take)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramRequests>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update investment program/fund details
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerFundsByIdUpdatePost(id: UUID, authorization: String, model: ProgramUpdate? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerFundsByIdUpdatePostWithRequestBuilder(id: id, authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update investment program/fund details
     - POST /v1.0/manager/funds/{id}/update
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerFundsByIdUpdatePostWithRequestBuilder(id: UUID, authorization: String, model: ProgramUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/funds/{id}/update"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10ManagerFundsByIdWithdrawByPercentPost: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Withdraw from fund. Percent is % of manager total money.  Withdraw in GVT if currency is empty
     
     - parameter id: (path)  
     - parameter percent: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerFundsByIdWithdrawByPercentPost(id: UUID, percent: Double, authorization: String, currency: Currency_v10ManagerFundsByIdWithdrawByPercentPost? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerFundsByIdWithdrawByPercentPostWithRequestBuilder(id: id, percent: percent, authorization: authorization, currency: currency).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Withdraw from fund. Percent is % of manager total money.  Withdraw in GVT if currency is empty
     - POST /v1.0/manager/funds/{id}/withdraw/{percent}
     
     - parameter id: (path)  
     - parameter percent: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional, default to 100)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerFundsByIdWithdrawByPercentPostWithRequestBuilder(id: UUID, percent: Double, authorization: String, currency: Currency_v10ManagerFundsByIdWithdrawByPercentPost? = nil) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/funds/{id}/withdraw/{percent}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{percent}", with: "\(percent)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currency": currency?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10ManagerFundsByIdWithdrawInfoByCurrencyGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Data for withdrawal from fund
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: UUID, currency: Currency_v10ManagerFundsByIdWithdrawInfoByCurrencyGet, authorization: String, completion: @escaping ((_ data: ManagerFundWithdrawInfo?,_ error: Error?) -> Void)) {
        v10ManagerFundsByIdWithdrawInfoByCurrencyGetWithRequestBuilder(id: id, currency: currency, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Data for withdrawal from fund
     - GET /v1.0/manager/funds/{id}/withdraw/info/{currency}
     - examples: [{contentType=application/json, example={
  "exitFee" : 6.027456183070403,
  "rate" : 5.962133916683182,
  "withheldInvestment" : 0.8008281904610115,
  "title" : "title",
  "availableToWithdraw" : 1.4658129805029452
}}]
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ManagerFundWithdrawInfo> 
     */
    open class func v10ManagerFundsByIdWithdrawInfoByCurrencyGetWithRequestBuilder(id: UUID, currency: Currency_v10ManagerFundsByIdWithdrawInfoByCurrencyGet, authorization: String) -> RequestBuilder<ManagerFundWithdrawInfo> {
        var path = "/v1.0/manager/funds/{id}/withdraw/info/{currency}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{currency}", with: "\(currency.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ManagerFundWithdrawInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Create fund
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerFundsCreatePost(authorization: String, request: NewFundRequest? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerFundsCreatePostWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Create fund
     - POST /v1.0/manager/funds/create
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerFundsCreatePostWithRequestBuilder(authorization: String, request: NewFundRequest? = nil) -> RequestBuilder<Void> {
        let path = "/v1.0/manager/funds/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_v10ManagerFundsGet: String { 
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byDrawdownAsc = "ByDrawdownAsc"
        case byDrawdownDesc = "ByDrawdownDesc"
        case byInvestorsAsc = "ByInvestorsAsc"
        case byInvestorsDesc = "ByInvestorsDesc"
        case byNewAsc = "ByNewAsc"
        case byNewDesc = "ByNewDesc"
        case byTitleAsc = "ByTitleAsc"
        case byTitleDesc = "ByTitleDesc"
        case byBalanceAsc = "ByBalanceAsc"
        case byBalanceDesc = "ByBalanceDesc"
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10ManagerFundsGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     * enum for parameter currencySecondary
     */
    public enum CurrencySecondary_v10ManagerFundsGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     * enum for parameter actionStatus
     */
    public enum ActionStatus_v10ManagerFundsGet: String { 
        case pending = "Pending"
        case active = "Active"
        case investing = "Investing"
        case withdrawing = "Withdrawing"
        case ended = "Ended"
    }

    /**
     * enum for parameter dashboardActionStatus
     */
    public enum DashboardActionStatus_v10ManagerFundsGet: String { 
        case all = "All"
        case active = "Active"
    }

    /**
     Manager funds
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter currencySecondary: (query)  (optional)
     - parameter actionStatus: (query)  (optional)
     - parameter dashboardActionStatus: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerFundsGet(authorization: String, sorting: Sorting_v10ManagerFundsGet? = nil, currency: Currency_v10ManagerFundsGet? = nil, from: Date? = nil, to: Date? = nil, chartPointsCount: Int? = nil, currencySecondary: CurrencySecondary_v10ManagerFundsGet? = nil, actionStatus: ActionStatus_v10ManagerFundsGet? = nil, dashboardActionStatus: DashboardActionStatus_v10ManagerFundsGet? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: FundsList?,_ error: Error?) -> Void)) {
        v10ManagerFundsGetWithRequestBuilder(authorization: authorization, sorting: sorting, currency: currency, from: from, to: to, chartPointsCount: chartPointsCount, currencySecondary: currencySecondary, actionStatus: actionStatus, dashboardActionStatus: dashboardActionStatus, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Manager funds
     - GET /v1.0/manager/funds
     - examples: [{contentType=application/json, example={
  "total" : 7,
  "funds" : [ {
    "totalAssetsCount" : 3,
    "statistic" : {
      "balanceGVT" : {
        "amount" : 3.616076749251911,
        "currency" : "Undefined"
      },
      "balance" : {
        "amount" : 3.616076749251911,
        "currency" : "Undefined"
      },
      "profitPercent" : 1.284659006116532,
      "drawdownPercent" : 2.8841621266687802,
      "balanceSecondary" : {
        "amount" : 3.616076749251911,
        "currency" : "Undefined"
      },
      "investorsCount" : 6
    },
    "color" : "color",
    "manager" : {
      "socialLinks" : [ {
        "name" : "name",
        "logo" : "logo",
        "type" : "Twitter",
        "value" : "value",
        "url" : "url"
      }, {
        "name" : "name",
        "logo" : "logo",
        "type" : "Twitter",
        "value" : "value",
        "url" : "url"
      } ],
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    },
    "topFundAssets" : [ {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 6.965117697638846
    }, {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 6.965117697638846
    } ],
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "dashboardAssetsDetails" : {
      "share" : 9.301444243932576
    },
    "personalDetails" : {
      "canCloseAsset" : true,
      "canCloseProgram" : true,
      "canWithdraw" : true,
      "pendingOutputIsWithdrawAll" : true,
      "nextReallocationPercents" : "2000-01-23T04:56:07.000+00:00",
      "canInvest" : true,
      "canClosePeriod" : true,
      "canReallocate" : true,
      "pendingOutput" : 0.8851374739011653,
      "hasNotifications" : true,
      "pendingInput" : 7.143538047012306,
      "isOwnProgram" : true,
      "availableReallocationPercents" : 5,
      "isFinishing" : true,
      "value" : 6.704019297950036,
      "profit" : 3.353193347011243,
      "withdrawPercent" : 6.878052220127876,
      "invested" : 3.0937452626664474,
      "isFavorite" : true,
      "isInvested" : true,
      "status" : "Pending"
    },
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    } ],
    "status" : "None"
  }, {
    "totalAssetsCount" : 3,
    "statistic" : {
      "balanceGVT" : {
        "amount" : 3.616076749251911,
        "currency" : "Undefined"
      },
      "balance" : {
        "amount" : 3.616076749251911,
        "currency" : "Undefined"
      },
      "profitPercent" : 1.284659006116532,
      "drawdownPercent" : 2.8841621266687802,
      "balanceSecondary" : {
        "amount" : 3.616076749251911,
        "currency" : "Undefined"
      },
      "investorsCount" : 6
    },
    "color" : "color",
    "manager" : {
      "socialLinks" : [ {
        "name" : "name",
        "logo" : "logo",
        "type" : "Twitter",
        "value" : "value",
        "url" : "url"
      }, {
        "name" : "name",
        "logo" : "logo",
        "type" : "Twitter",
        "value" : "value",
        "url" : "url"
      } ],
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    },
    "topFundAssets" : [ {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 6.965117697638846
    }, {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 6.965117697638846
    } ],
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "dashboardAssetsDetails" : {
      "share" : 9.301444243932576
    },
    "personalDetails" : {
      "canCloseAsset" : true,
      "canCloseProgram" : true,
      "canWithdraw" : true,
      "pendingOutputIsWithdrawAll" : true,
      "nextReallocationPercents" : "2000-01-23T04:56:07.000+00:00",
      "canInvest" : true,
      "canClosePeriod" : true,
      "canReallocate" : true,
      "pendingOutput" : 0.8851374739011653,
      "hasNotifications" : true,
      "pendingInput" : 7.143538047012306,
      "isOwnProgram" : true,
      "availableReallocationPercents" : 5,
      "isFinishing" : true,
      "value" : 6.704019297950036,
      "profit" : 3.353193347011243,
      "withdrawPercent" : 6.878052220127876,
      "invested" : 3.0937452626664474,
      "isFavorite" : true,
      "isInvested" : true,
      "status" : "Pending"
    },
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    } ],
    "status" : "None"
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter currencySecondary: (query)  (optional)
     - parameter actionStatus: (query)  (optional)
     - parameter dashboardActionStatus: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<FundsList> 
     */
    open class func v10ManagerFundsGetWithRequestBuilder(authorization: String, sorting: Sorting_v10ManagerFundsGet? = nil, currency: Currency_v10ManagerFundsGet? = nil, from: Date? = nil, to: Date? = nil, chartPointsCount: Int? = nil, currencySecondary: CurrencySecondary_v10ManagerFundsGet? = nil, actionStatus: ActionStatus_v10ManagerFundsGet? = nil, dashboardActionStatus: DashboardActionStatus_v10ManagerFundsGet? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<FundsList> {
        let path = "/v1.0/manager/funds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "Sorting": sorting?.rawValue, 
            "Currency": currency?.rawValue, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
            "CurrencySecondary": currencySecondary?.rawValue, 
            "ActionStatus": actionStatus?.rawValue, 
            "DashboardActionStatus": dashboardActionStatus?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FundsList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get GVT investment to create fund
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerFundsInvestmentAmountGet(authorization: String, completion: @escaping ((_ data: Double?,_ error: Error?) -> Void)) {
        v10ManagerFundsInvestmentAmountGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get GVT investment to create fund
     - GET /v1.0/manager/funds/investment/amount
     - examples: [{contentType=application/json, example=0.8008281904610115}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Double> 
     */
    open class func v10ManagerFundsInvestmentAmountGetWithRequestBuilder(authorization: String) -> RequestBuilder<Double> {
        let path = "/v1.0/manager/funds/investment/amount"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Double>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Cancel investment program/fund request
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerFundsRequestsByIdCancelPost(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerFundsRequestsByIdCancelPostWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Cancel investment program/fund request
     - POST /v1.0/manager/funds/requests/{id}/cancel
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerFundsRequestsByIdCancelPostWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/funds/requests/{id}/cancel"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_v10ManagerGet: String { 
        case all = "All"
        case assetStarted = "AssetStarted"
        case programPeriodStarts = "ProgramPeriodStarts"
        case programPeriodEnds = "ProgramPeriodEnds"
        case investorInvest = "InvestorInvest"
        case investorWithdraw = "InvestorWithdraw"
        case managerInvest = "ManagerInvest"
        case managerWithdraw = "ManagerWithdraw"
        case assetFinished = "AssetFinished"
        case entranceFee = "EntranceFee"
        case exitFee = "ExitFee"
        case programStopOut = "ProgramStopOut"
        case programManagerTradingFeeAccrual = "ProgramManagerTradingFeeAccrual"
        case programSignalSubscribe = "ProgramSignalSubscribe"
        case programBrokerChanged = "ProgramBrokerChanged"
    }

    /**
     * enum for parameter assetType
     */
    public enum AssetType_v10ManagerGet: String { 
        case all = "All"
        case program = "Program"
        case fund = "Fund"
        case signal = "Signal"
    }

    /**
     Manager dashboard
     
     - parameter authorization: (header) JWT access token 
     - parameter assetId: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter assetType: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerGet(authorization: String, assetId: UUID? = nil, from: Date? = nil, to: Date? = nil, type: ModelType_v10ManagerGet? = nil, assetType: AssetType_v10ManagerGet? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ManagerDashboard?,_ error: Error?) -> Void)) {
        v10ManagerGetWithRequestBuilder(authorization: authorization, assetId: assetId, from: from, to: to, type: type, assetType: assetType, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Manager dashboard
     - GET /v1.0/manager
     - examples: [{contentType=application/json, example={
  "profile" : {
    "overview" : { },
    "managerProfile" : {
      "socialLinks" : [ {
        "name" : "name",
        "logo" : "logo",
        "type" : "Twitter",
        "value" : "value",
        "url" : "url"
      }, {
        "name" : "name",
        "logo" : "logo",
        "type" : "Twitter",
        "value" : "value",
        "url" : "url"
      } ],
      "assets" : [ "assets", "assets" ],
      "about" : "about",
      "regDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    },
    "programsCount" : 0,
    "fundsCount" : 6
  },
  "allAssets" : [ {
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "type" : "Program"
  }, {
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "type" : "Program"
  } ],
  "fundChart" : {
    "profitChangePercent" : 6.878052220127876,
    "calmarRatio" : 3.353193347011243,
    "timeframeGvtProfit" : 0.8851374739011653,
    "timeframeUsdProfit" : 9.018348186070783,
    "maxDrawdown" : 3.0937452626664474,
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "equityChart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    } ],
    "investors" : 6,
    "totalGvtProfit" : 7.143538047012306,
    "sortinoRatio" : 6.704019297950036,
    "rebalances" : 6,
    "profitPercent" : 3.5571952270680973,
    "assetsStates" : [ {
      "otherPercent" : 1.284659006116532,
      "assets" : [ {
        "color" : "color",
        "icon" : "icon",
        "name" : "name",
        "asset" : "asset",
        "percent" : 6.965117697638846
      }, {
        "color" : "color",
        "icon" : "icon",
        "name" : "name",
        "asset" : "asset",
        "percent" : 6.965117697638846
      } ],
      "dateFrom" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "otherPercent" : 1.284659006116532,
      "assets" : [ {
        "color" : "color",
        "icon" : "icon",
        "name" : "name",
        "asset" : "asset",
        "percent" : 6.965117697638846
      }, {
        "color" : "color",
        "icon" : "icon",
        "name" : "name",
        "asset" : "asset",
        "percent" : 6.965117697638846
      } ],
      "dateFrom" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "balance" : 2.8841621266687802,
    "rate" : 7.058770351582356,
    "totalUsdProfit" : 8.762042012749001,
    "sharpeRatio" : 5.944895607614016
  },
  "requests" : {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeExit" : 3.0937452626664474,
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "valueGvt" : 6.704019297950036,
    "withdrawAll" : true,
    "fundWithdrawPercent" : 7.143538047012306,
    "feeEntry" : 3.353193347011243,
    "type" : "Invest",
    "title" : "title",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "value" : 5.944895607614016,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  },
  "events" : {
    "total" : 7,
    "events" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "programType" : "Program",
      "periodNumber" : 2,
      "color" : "color",
      "description" : "description",
      "title" : "title",
      "type" : "All",
      "url" : "url",
      "profitPercent" : 5.637376656633329,
      "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "logo" : "logo",
      "currency" : "Undefined",
      "feeValue" : 5.962133916683182,
      "value" : 1.4658129805029452
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "programType" : "Program",
      "periodNumber" : 2,
      "color" : "color",
      "description" : "description",
      "title" : "title",
      "type" : "All",
      "url" : "url",
      "profitPercent" : 5.637376656633329,
      "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "logo" : "logo",
      "currency" : "Undefined",
      "feeValue" : 5.962133916683182,
      "value" : 1.4658129805029452
    } ]
  },
  "programChart" : {
    "profitFactor" : 7.386281948385884,
    "profitChangePercent" : 6.84685269835264,
    "calmarRatio" : 4.965218492984954,
    "timeframeGvtProfit" : 9.369310271410669,
    "timeframeProgramCurrencyProfit" : 3.616076749251911,
    "trades" : 2,
    "maxDrawdown" : 5.025004791520295,
    "equityChart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    } ],
    "tradingVolume" : 1.2315135367772556,
    "investors" : 1,
    "totalGvtProfit" : 9.965781217890562,
    "sortinoRatio" : 1.1730742509559433,
    "pnLChart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    } ],
    "balance" : 1.0246457001441578,
    "programCurrency" : "Undefined",
    "rate" : 6.683562403749608,
    "totalProgramCurrencyProfit" : 9.301444243932576,
    "successTradesPercent" : 4.145608029883936,
    "lastPeriodEnds" : "2000-01-23T04:56:07.000+00:00",
    "periods" : [ {
      "dateTo" : "2000-01-23T04:56:07.000+00:00",
      "dateFrom" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "dateTo" : "2000-01-23T04:56:07.000+00:00",
      "dateFrom" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "sharpeRatio" : 7.457744773683766,
    "lastPeriodStarts" : "2000-01-23T04:56:07.000+00:00"
  }
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter assetId: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter assetType: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ManagerDashboard> 
     */
    open class func v10ManagerGetWithRequestBuilder(authorization: String, assetId: UUID? = nil, from: Date? = nil, to: Date? = nil, type: ModelType_v10ManagerGet? = nil, assetType: AssetType_v10ManagerGet? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ManagerDashboard> {
        let path = "/v1.0/manager"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "AssetId": assetId, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "Type": type?.rawValue, 
            "AssetType": assetType?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ManagerDashboard>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter eventLocation
     */
    public enum EventLocation_v10ManagerInvestmentsEventsGet: String { 
        case asset = "Asset"
        case dashboard = "Dashboard"
        case eventsAll = "EventsAll"
    }

    /**
     * enum for parameter eventType
     */
    public enum EventType_v10ManagerInvestmentsEventsGet: String { 
        case all = "All"
        case assetStarted = "AssetStarted"
        case assetFinished = "AssetFinished"
        case assetPeriodStarted = "AssetPeriodStarted"
        case assetPeriodEnded = "AssetPeriodEnded"
        case assetPeriodEndedDueToStopOut = "AssetPeriodEndedDueToStopOut"
        case assetBrokerChanged = "AssetBrokerChanged"
        case assetInvestByInvestor = "AssetInvestByInvestor"
        case assetWithdrawalByInvestor = "AssetWithdrawalByInvestor"
        case assetInvestByManager = "AssetInvestByManager"
        case assetWithdrawalByManager = "AssetWithdrawalByManager"
        case assetPeriodProcessed = "AssetPeriodProcessed"
        case assetReallocation = "AssetReallocation"
        case assetSubscribeByInvestor = "AssetSubscribeByInvestor"
        case assetUnsubscribeByInvestor = "AssetUnsubscribeByInvestor"
        case assetTradeOpen = "AssetTradeOpen"
        case assetTradeClosed = "AssetTradeClosed"
        case assetSubscriptionEdit = "AssetSubscriptionEdit"
    }

    /**
     * enum for parameter assetType
     */
    public enum AssetType_v10ManagerInvestmentsEventsGet: String { 
        case all = "All"
        case program = "Program"
        case fund = "Fund"
        case signal = "Signal"
    }

    /**
     Events
     
     - parameter authorization: (header) JWT access token 
     - parameter eventLocation: (query)  (optional)
     - parameter assetId: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter eventType: (query)  (optional)
     - parameter assetType: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerInvestmentsEventsGet(authorization: String, eventLocation: EventLocation_v10ManagerInvestmentsEventsGet? = nil, assetId: UUID? = nil, from: Date? = nil, to: Date? = nil, eventType: EventType_v10ManagerInvestmentsEventsGet? = nil, assetType: AssetType_v10ManagerInvestmentsEventsGet? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: InvestmentEventViewModels?,_ error: Error?) -> Void)) {
        v10ManagerInvestmentsEventsGetWithRequestBuilder(authorization: authorization, eventLocation: eventLocation, assetId: assetId, from: from, to: to, eventType: eventType, assetType: assetType, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Events
     - GET /v1.0/manager/investments/events
     - examples: [{contentType=application/json, example={
  "total" : 5,
  "events" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "assetDetails" : {
      "color" : "color",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "url" : "url",
      "assetType" : "None"
    },
    "amount" : 0.8008281904610115,
    "feesInfo" : [ {
      "amount" : 1.4658129805029452,
      "description" : "description",
      "currency" : "Undefined",
      "title" : "title",
      "type" : "Undefined"
    }, {
      "amount" : 1.4658129805029452,
      "description" : "description",
      "currency" : "Undefined",
      "title" : "title",
      "type" : "Undefined"
    } ],
    "icon" : "icon",
    "changeState" : "Increased",
    "extendedInfo" : [ {
      "amount" : 6.027456183070403,
      "currency" : "Undefined",
      "title" : "title"
    }, {
      "amount" : 6.027456183070403,
      "currency" : "Undefined",
      "title" : "title"
    } ],
    "currency" : "Undefined",
    "title" : "title",
    "totalFeesCurrency" : "Undefined",
    "totalFeesAmount" : 5.962133916683182
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "assetDetails" : {
      "color" : "color",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "url" : "url",
      "assetType" : "None"
    },
    "amount" : 0.8008281904610115,
    "feesInfo" : [ {
      "amount" : 1.4658129805029452,
      "description" : "description",
      "currency" : "Undefined",
      "title" : "title",
      "type" : "Undefined"
    }, {
      "amount" : 1.4658129805029452,
      "description" : "description",
      "currency" : "Undefined",
      "title" : "title",
      "type" : "Undefined"
    } ],
    "icon" : "icon",
    "changeState" : "Increased",
    "extendedInfo" : [ {
      "amount" : 6.027456183070403,
      "currency" : "Undefined",
      "title" : "title"
    }, {
      "amount" : 6.027456183070403,
      "currency" : "Undefined",
      "title" : "title"
    } ],
    "currency" : "Undefined",
    "title" : "title",
    "totalFeesCurrency" : "Undefined",
    "totalFeesAmount" : 5.962133916683182
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter eventLocation: (query)  (optional)
     - parameter assetId: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter eventType: (query)  (optional)
     - parameter assetType: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<InvestmentEventViewModels> 
     */
    open class func v10ManagerInvestmentsEventsGetWithRequestBuilder(authorization: String, eventLocation: EventLocation_v10ManagerInvestmentsEventsGet? = nil, assetId: UUID? = nil, from: Date? = nil, to: Date? = nil, eventType: EventType_v10ManagerInvestmentsEventsGet? = nil, assetType: AssetType_v10ManagerInvestmentsEventsGet? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<InvestmentEventViewModels> {
        let path = "/v1.0/manager/investments/events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "EventLocation": eventLocation?.rawValue, 
            "AssetId": assetId, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "EventType": eventType?.rawValue, 
            "AssetType": assetType?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InvestmentEventViewModels>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Confirm 2FA for program if required (for brokers like Huobi)
     
     - parameter authorization: (header) JWT access token 
     - parameter programId: (query)  (optional)
     - parameter code: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerPrograms2faConfirmPost(authorization: String, programId: UUID? = nil, code: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerPrograms2faConfirmPostWithRequestBuilder(authorization: authorization, programId: programId, code: code).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Confirm 2FA for program if required (for brokers like Huobi)
     - POST /v1.0/manager/programs/2fa/confirm
     
     - parameter authorization: (header) JWT access token 
     - parameter programId: (query)  (optional)
     - parameter code: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerPrograms2faConfirmPostWithRequestBuilder(authorization: String, programId: UUID? = nil, code: String? = nil) -> RequestBuilder<Void> {
        let path = "/v1.0/manager/programs/2fa/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "programId": programId, 
            "code": code
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get 2FA for program if needed
     
     - parameter authorization: (header) JWT access token 
     - parameter programId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerPrograms2faGetGet(authorization: String, programId: UUID? = nil, completion: @escaping ((_ data: TwoFactorAuthenticator?,_ error: Error?) -> Void)) {
        v10ManagerPrograms2faGetGetWithRequestBuilder(authorization: authorization, programId: programId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get 2FA for program if needed
     - GET /v1.0/manager/programs/2fa/get
     - examples: [{contentType=application/json, example={
  "sharedKey" : "sharedKey",
  "authenticatorUri" : "authenticatorUri"
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter programId: (query)  (optional)

     - returns: RequestBuilder<TwoFactorAuthenticator> 
     */
    open class func v10ManagerPrograms2faGetGetWithRequestBuilder(authorization: String, programId: UUID? = nil) -> RequestBuilder<TwoFactorAuthenticator> {
        let path = "/v1.0/manager/programs/2fa/get"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "programId": programId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TwoFactorAuthenticator>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Cancel changing broker in existing program
     
     - parameter authorization: (header) JWT access token 
     - parameter programId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsBrokerChangeCancelPost(authorization: String, programId: UUID? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerProgramsBrokerChangeCancelPostWithRequestBuilder(authorization: authorization, programId: programId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Cancel changing broker in existing program
     - POST /v1.0/manager/programs/broker/change/cancel
     
     - parameter authorization: (header) JWT access token 
     - parameter programId: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerProgramsBrokerChangeCancelPostWithRequestBuilder(authorization: String, programId: UUID? = nil) -> RequestBuilder<Void> {
        let path = "/v1.0/manager/programs/broker/change/cancel"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "programId": programId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Change broker in existing program
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsBrokerChangePost(authorization: String, request: ChangeBrokerProgramRequest? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerProgramsBrokerChangePostWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Change broker in existing program
     - POST /v1.0/manager/programs/broker/change
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerProgramsBrokerChangePostWithRequestBuilder(authorization: String, request: ChangeBrokerProgramRequest? = nil) -> RequestBuilder<Void> {
        let path = "/v1.0/manager/programs/broker/change"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Close existing investment program
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter twoFactorCode: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsByIdClosePost(id: UUID, authorization: String, twoFactorCode: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerProgramsByIdClosePostWithRequestBuilder(id: id, authorization: authorization, twoFactorCode: twoFactorCode).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Close existing investment program
     - POST /v1.0/manager/programs/{id}/close
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter twoFactorCode: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerProgramsByIdClosePostWithRequestBuilder(id: UUID, authorization: String, twoFactorCode: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/programs/{id}/close"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "twoFactorCode": twoFactorCode
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10ManagerProgramsByIdInvestByAmountPost: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Deposit  Invest in GVT if currency is empty
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsByIdInvestByAmountPost(id: UUID, amount: Double, authorization: String, currency: Currency_v10ManagerProgramsByIdInvestByAmountPost? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerProgramsByIdInvestByAmountPostWithRequestBuilder(id: id, amount: amount, authorization: authorization, currency: currency).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Deposit  Invest in GVT if currency is empty
     - POST /v1.0/manager/programs/{id}/invest/{amount}
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter currency: (query)  (optional, default to 100)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerProgramsByIdInvestByAmountPostWithRequestBuilder(id: UUID, amount: Double, authorization: String, currency: Currency_v10ManagerProgramsByIdInvestByAmountPost? = nil) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/programs/{id}/invest/{amount}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{amount}", with: "\(amount)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currency": currency?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10ManagerProgramsByIdInvestInfoByCurrencyGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Data for investing into the program
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: UUID, currency: Currency_v10ManagerProgramsByIdInvestInfoByCurrencyGet, authorization: String, completion: @escaping ((_ data: ProgramInvestInfo?,_ error: Error?) -> Void)) {
        v10ManagerProgramsByIdInvestInfoByCurrencyGetWithRequestBuilder(id: id, currency: currency, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Data for investing into the program
     - GET /v1.0/manager/programs/{id}/invest/info/{currency}
     - examples: [{contentType=application/json, example={
  "programCurrencyMinInvestment" : 5.637376656633329,
  "entryFee" : 2.3021358869347655,
  "availableInWallet" : 1.4658129805029452,
  "isOwnProgram" : true,
  "availableToInvestBase" : 6.027456183070403,
  "rate" : 9.301444243932576,
  "periodEnds" : "2000-01-23T04:56:07.000+00:00",
  "availableToInvest" : 0.8008281904610115,
  "title" : "title",
  "minInvestmentAmount" : 5.962133916683182,
  "gvCommission" : 7.061401241503109
}}]
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProgramInvestInfo> 
     */
    open class func v10ManagerProgramsByIdInvestInfoByCurrencyGetWithRequestBuilder(id: UUID, currency: Currency_v10ManagerProgramsByIdInvestInfoByCurrencyGet, authorization: String) -> RequestBuilder<ProgramInvestInfo> {
        var path = "/v1.0/manager/programs/{id}/invest/info/{currency}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{currency}", with: "\(currency.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramInvestInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get program data for levels calculator
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsByIdLevelsInfoGet(id: UUID, authorization: String, completion: @escaping ((_ data: ProgramLevelInfo?,_ error: Error?) -> Void)) {
        v10ManagerProgramsByIdLevelsInfoGetWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get program data for levels calculator
     - GET /v1.0/manager/programs/{id}/levels/info
     - examples: [{contentType=application/json, example={
  "weightedVolumeScale" : 5.637376656633329,
  "isKycPassed" : true,
  "investmentScale" : 7.061401241503109,
  "level" : 0,
  "levelProgressPercent" : 6.027456183070403,
  "genesisRatio" : 1.4658129805029452,
  "programAge" : 5.962133916683182,
  "managerBalance" : 2.3021358869347655,
  "totalAvailableToInvest" : 9.301444243932576
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProgramLevelInfo> 
     */
    open class func v10ManagerProgramsByIdLevelsInfoGetWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<ProgramLevelInfo> {
        var path = "/v1.0/manager/programs/{id}/levels/info"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramLevelInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Change program password
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsByIdPasswordChangePost(id: UUID, authorization: String, model: ProgramPwdUpdate? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerProgramsByIdPasswordChangePostWithRequestBuilder(id: id, authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Change program password
     - POST /v1.0/manager/programs/{id}/password/change
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerProgramsByIdPasswordChangePostWithRequestBuilder(id: UUID, authorization: String, model: ProgramPwdUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/programs/{id}/password/change"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Close current period
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsByIdPeriodClosePost(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerProgramsByIdPeriodClosePostWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Close current period
     - POST /v1.0/manager/programs/{id}/period/close
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerProgramsByIdPeriodClosePostWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/programs/{id}/period/close"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get investment program/fund requests
     
     - parameter id: (path)  
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: UUID, skip: Int, take: Int, authorization: String, completion: @escaping ((_ data: ProgramRequests?,_ error: Error?) -> Void)) {
        v10ManagerProgramsByIdRequestsBySkipByTakeGetWithRequestBuilder(id: id, skip: skip, take: take, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get investment program/fund requests
     - GET /v1.0/manager/programs/{id}/requests/{skip}/{take}
     - examples: [{contentType=application/json, example={
  "totalValue" : 7.058770351582356,
  "total" : 0,
  "requests" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeExit" : 3.0937452626664474,
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "valueGvt" : 6.704019297950036,
    "withdrawAll" : true,
    "fundWithdrawPercent" : 7.143538047012306,
    "feeEntry" : 3.353193347011243,
    "type" : "Invest",
    "title" : "title",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "value" : 5.944895607614016,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeExit" : 3.0937452626664474,
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "valueGvt" : 6.704019297950036,
    "withdrawAll" : true,
    "fundWithdrawPercent" : 7.143538047012306,
    "feeEntry" : 3.353193347011243,
    "type" : "Invest",
    "title" : "title",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "value" : 5.944895607614016,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  } ]
}}]
     
     - parameter id: (path)  
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProgramRequests> 
     */
    open class func v10ManagerProgramsByIdRequestsBySkipByTakeGetWithRequestBuilder(id: UUID, skip: Int, take: Int, authorization: String) -> RequestBuilder<ProgramRequests> {
        var path = "/v1.0/manager/programs/{id}/requests/{skip}/{take}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{skip}", with: "\(skip)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{take}", with: "\(take)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramRequests>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update investment program/fund details
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsByIdUpdatePost(id: UUID, authorization: String, model: ProgramUpdate? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerProgramsByIdUpdatePostWithRequestBuilder(id: id, authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update investment program/fund details
     - POST /v1.0/manager/programs/{id}/update
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerProgramsByIdUpdatePostWithRequestBuilder(id: UUID, authorization: String, model: ProgramUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/programs/{id}/update"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Withdraw from investment program in GVT
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsByIdWithdrawByAmountPost(id: UUID, amount: Double, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerProgramsByIdWithdrawByAmountPostWithRequestBuilder(id: id, amount: amount, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Withdraw from investment program in GVT
     - POST /v1.0/manager/programs/{id}/withdraw/{amount}
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerProgramsByIdWithdrawByAmountPostWithRequestBuilder(id: UUID, amount: Double, authorization: String) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/programs/{id}/withdraw/{amount}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{amount}", with: "\(amount)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_v10ManagerProgramsByIdWithdrawInfoByCurrencyGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     Data for withdrawal from investment program
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: UUID, currency: Currency_v10ManagerProgramsByIdWithdrawInfoByCurrencyGet, authorization: String, completion: @escaping ((_ data: ManagerProgramWithdrawInfo?,_ error: Error?) -> Void)) {
        v10ManagerProgramsByIdWithdrawInfoByCurrencyGetWithRequestBuilder(id: id, currency: currency, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Data for withdrawal from investment program
     - GET /v1.0/manager/programs/{id}/withdraw/info/{currency}
     - examples: [{contentType=application/json, example={
  "rate" : 1.4658129805029452,
  "withheldInvestment" : 0.8008281904610115,
  "periodEnds" : "2000-01-23T04:56:07.000+00:00",
  "title" : "title",
  "availableToWithdraw" : 6.027456183070403
}}]
     
     - parameter id: (path)  
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ManagerProgramWithdrawInfo> 
     */
    open class func v10ManagerProgramsByIdWithdrawInfoByCurrencyGetWithRequestBuilder(id: UUID, currency: Currency_v10ManagerProgramsByIdWithdrawInfoByCurrencyGet, authorization: String) -> RequestBuilder<ManagerProgramWithdrawInfo> {
        var path = "/v1.0/manager/programs/{id}/withdraw/info/{currency}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{currency}", with: "\(currency.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ManagerProgramWithdrawInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Withdraw from investment program in program currency
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsByIdWithdrawMultiByAmountPost(id: UUID, amount: Double, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerProgramsByIdWithdrawMultiByAmountPostWithRequestBuilder(id: id, amount: amount, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Withdraw from investment program in program currency
     - POST /v1.0/manager/programs/{id}/withdraw/multi/{amount}
     
     - parameter id: (path)  
     - parameter amount: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerProgramsByIdWithdrawMultiByAmountPostWithRequestBuilder(id: UUID, amount: Double, authorization: String) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/programs/{id}/withdraw/multi/{amount}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{amount}", with: "\(amount)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Create an investment program
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsCreatePost(authorization: String, request: NewProgramRequest? = nil, completion: @escaping ((_ data: ManagerProgramCreateResult?,_ error: Error?) -> Void)) {
        v10ManagerProgramsCreatePostWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create an investment program
     - POST /v1.0/manager/programs/create
     - examples: [{contentType=application/json, example={
  "twoFactor" : {
    "sharedKey" : "sharedKey",
    "authenticatorUri" : "authenticatorUri"
  },
  "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "twoFactorRequired" : true
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<ManagerProgramCreateResult> 
     */
    open class func v10ManagerProgramsCreatePostWithRequestBuilder(authorization: String, request: NewProgramRequest? = nil) -> RequestBuilder<ManagerProgramCreateResult> {
        let path = "/v1.0/manager/programs/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ManagerProgramCreateResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_v10ManagerProgramsGet: String { 
        case byLevelAsc = "ByLevelAsc"
        case byLevelDesc = "ByLevelDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byDrawdownAsc = "ByDrawdownAsc"
        case byDrawdownDesc = "ByDrawdownDesc"
        case byTradesAsc = "ByTradesAsc"
        case byTradesDesc = "ByTradesDesc"
        case byInvestorsAsc = "ByInvestorsAsc"
        case byInvestorsDesc = "ByInvestorsDesc"
        case byNewDesc = "ByNewDesc"
        case byNewAsc = "ByNewAsc"
        case byEndOfPeriodAsc = "ByEndOfPeriodAsc"
        case byEndOfPeriodDesc = "ByEndOfPeriodDesc"
        case byTitleAsc = "ByTitleAsc"
        case byTitleDesc = "ByTitleDesc"
        case byBalanceAsc = "ByBalanceAsc"
        case byBalanceDesc = "ByBalanceDesc"
        case byCurrDesc = "ByCurrDesc"
        case byCurrAsc = "ByCurrAsc"
        case byLevelProgressDesc = "ByLevelProgressDesc"
        case byLevelProgressAsc = "ByLevelProgressAsc"
    }

    /**
     * enum for parameter currencySecondary
     */
    public enum CurrencySecondary_v10ManagerProgramsGet: String { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case usd = "USD"
        case eur = "EUR"
    }

    /**
     * enum for parameter actionStatus
     */
    public enum ActionStatus_v10ManagerProgramsGet: String { 
        case pending = "Pending"
        case active = "Active"
        case investing = "Investing"
        case withdrawing = "Withdrawing"
        case ended = "Ended"
    }

    /**
     * enum for parameter dashboardActionStatus
     */
    public enum DashboardActionStatus_v10ManagerProgramsGet: String { 
        case all = "All"
        case active = "Active"
    }

    /**
     Manager programs
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter currencySecondary: (query)  (optional)
     - parameter actionStatus: (query)  (optional)
     - parameter dashboardActionStatus: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsGet(authorization: String, sorting: Sorting_v10ManagerProgramsGet? = nil, from: Date? = nil, to: Date? = nil, chartPointsCount: Int? = nil, currencySecondary: CurrencySecondary_v10ManagerProgramsGet? = nil, actionStatus: ActionStatus_v10ManagerProgramsGet? = nil, dashboardActionStatus: DashboardActionStatus_v10ManagerProgramsGet? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ProgramsList?,_ error: Error?) -> Void)) {
        v10ManagerProgramsGetWithRequestBuilder(authorization: authorization, sorting: sorting, from: from, to: to, chartPointsCount: chartPointsCount, currencySecondary: currencySecondary, actionStatus: actionStatus, dashboardActionStatus: dashboardActionStatus, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Manager programs
     - GET /v1.0/manager/programs
     - examples: [{contentType=application/json, example={
  "total" : 6,
  "programs" : [ {
    "color" : "color",
    "stopOutLevel" : 5.962133916683182,
    "availableInvestment" : 5.637376656633329,
    "availableInvestmentLimit" : 7.061401241503109,
    "rating" : {
      "rating" : 6,
      "canLevelUp" : true,
      "topPercent" : 1.1730742509559433,
      "profit" : 7.457744773683766
    },
    "description" : "description",
    "title" : "title",
    "availableInvestmentBase" : 2.3021358869347655,
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "levelProgress" : 6.027456183070403,
    "periodDuration" : 1,
    "statistic" : {
      "balanceBase" : {
        "amount" : 3.616076749251911,
        "currency" : "Undefined"
      },
      "tradesCount" : 1,
      "balanceGVT" : {
        "amount" : 3.616076749251911,
        "currency" : "Undefined"
      },
      "profitPercent" : 4.145608029883936,
      "profitValue" : 7.386281948385884,
      "drawdownPercent" : 1.2315135367772556,
      "currentValue" : 2.027123023002322,
      "balanceSecondary" : {
        "amount" : 3.616076749251911,
        "currency" : "Undefined"
      },
      "investorsCount" : 1
    },
    "manager" : {
      "socialLinks" : [ {
        "name" : "name",
        "logo" : "logo",
        "type" : "Twitter",
        "value" : "value",
        "url" : "url"
      }, {
        "name" : "name",
        "logo" : "logo",
        "type" : "Twitter",
        "value" : "value",
        "url" : "url"
      } ],
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    },
    "level" : 0,
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "dashboardAssetsDetails" : {
      "share" : 9.301444243932576
    },
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "personalDetails" : {
      "canCloseAsset" : true,
      "canCloseProgram" : true,
      "canWithdraw" : true,
      "login" : "login",
      "hasNotifications" : true,
      "canChangePassword" : true,
      "gvtValue" : 4.965218492984954,
      "isFinishing" : true,
      "value" : 9.965781217890562,
      "profit" : 9.369310271410669,
      "pendingOutputIsWithdrawAll" : true,
      "canInvest" : true,
      "notificationAvailableToInvestId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "showTwoFactorButton" : true,
      "canClosePeriod" : true,
      "pendingOutput" : 9.018348186070783,
      "pendingInput" : 8.762042012749001,
      "isOwnProgram" : true,
      "isReinvest" : true,
      "migration" : {
        "newBroker" : {
          "leverageMin" : 6,
          "leverageMax" : 1,
          "assets" : "assets",
          "terms" : "terms",
          "fee" : 0.8008281904610115,
          "name" : "name",
          "isForex" : true,
          "description" : "description",
          "logo" : "logo",
          "accountTypes" : [ {
            "name" : "name",
            "isForex" : true,
            "description" : "description",
            "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "isSignalsAvailable" : true,
            "type" : "Undefined",
            "leverages" : [ 5, 5 ],
            "minimumDepositsAmount" : {
              "key" : 5.637376656633329
            },
            "currencies" : [ "currencies", "currencies" ]
          }, {
            "name" : "name",
            "isForex" : true,
            "description" : "description",
            "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "isSignalsAvailable" : true,
            "type" : "Undefined",
            "leverages" : [ 5, 5 ],
            "minimumDepositsAmount" : {
              "key" : 5.637376656633329
            },
            "currencies" : [ "currencies", "currencies" ]
          } ],
          "isSignalsAvailable" : true,
          "tags" : [ {
            "color" : "color",
            "name" : "name"
          }, {
            "color" : "color",
            "name" : "name"
          } ]
        },
        "newLeverage" : 5,
        "dateCreate" : "2000-01-23T04:56:07.000+00:00"
      },
      "signalSubscription" : {
        "mode" : "ByBalance",
        "totalVolume" : 2.3021358869347655,
        "hasSignalAccount" : true,
        "totalProfit" : 5.637376656633329,
        "fixedCurrency" : "Undefined",
        "fixedVolume" : 5.962133916683182,
        "openTolerancePercent" : 1.4658129805029452,
        "hasActiveSubscription" : true,
        "percent" : 6.027456183070403
      },
      "canMakeSignalProvider" : true,
      "invested" : 6.683562403749608,
      "isFavorite" : true,
      "isInvested" : true,
      "status" : "Pending"
    },
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    } ],
    "status" : "None"
  }, {
    "color" : "color",
    "stopOutLevel" : 5.962133916683182,
    "availableInvestment" : 5.637376656633329,
    "availableInvestmentLimit" : 7.061401241503109,
    "rating" : {
      "rating" : 6,
      "canLevelUp" : true,
      "topPercent" : 1.1730742509559433,
      "profit" : 7.457744773683766
    },
    "description" : "description",
    "title" : "title",
    "availableInvestmentBase" : 2.3021358869347655,
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "levelProgress" : 6.027456183070403,
    "periodDuration" : 1,
    "statistic" : {
      "balanceBase" : {
        "amount" : 3.616076749251911,
        "currency" : "Undefined"
      },
      "tradesCount" : 1,
      "balanceGVT" : {
        "amount" : 3.616076749251911,
        "currency" : "Undefined"
      },
      "profitPercent" : 4.145608029883936,
      "profitValue" : 7.386281948385884,
      "drawdownPercent" : 1.2315135367772556,
      "currentValue" : 2.027123023002322,
      "balanceSecondary" : {
        "amount" : 3.616076749251911,
        "currency" : "Undefined"
      },
      "investorsCount" : 1
    },
    "manager" : {
      "socialLinks" : [ {
        "name" : "name",
        "logo" : "logo",
        "type" : "Twitter",
        "value" : "value",
        "url" : "url"
      }, {
        "name" : "name",
        "logo" : "logo",
        "type" : "Twitter",
        "value" : "value",
        "url" : "url"
      } ],
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    },
    "level" : 0,
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "tags" : [ {
      "color" : "color",
      "name" : "name"
    }, {
      "color" : "color",
      "name" : "name"
    } ],
    "dashboardAssetsDetails" : {
      "share" : 9.301444243932576
    },
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "personalDetails" : {
      "canCloseAsset" : true,
      "canCloseProgram" : true,
      "canWithdraw" : true,
      "login" : "login",
      "hasNotifications" : true,
      "canChangePassword" : true,
      "gvtValue" : 4.965218492984954,
      "isFinishing" : true,
      "value" : 9.965781217890562,
      "profit" : 9.369310271410669,
      "pendingOutputIsWithdrawAll" : true,
      "canInvest" : true,
      "notificationAvailableToInvestId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "showTwoFactorButton" : true,
      "canClosePeriod" : true,
      "pendingOutput" : 9.018348186070783,
      "pendingInput" : 8.762042012749001,
      "isOwnProgram" : true,
      "isReinvest" : true,
      "migration" : {
        "newBroker" : {
          "leverageMin" : 6,
          "leverageMax" : 1,
          "assets" : "assets",
          "terms" : "terms",
          "fee" : 0.8008281904610115,
          "name" : "name",
          "isForex" : true,
          "description" : "description",
          "logo" : "logo",
          "accountTypes" : [ {
            "name" : "name",
            "isForex" : true,
            "description" : "description",
            "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "isSignalsAvailable" : true,
            "type" : "Undefined",
            "leverages" : [ 5, 5 ],
            "minimumDepositsAmount" : {
              "key" : 5.637376656633329
            },
            "currencies" : [ "currencies", "currencies" ]
          }, {
            "name" : "name",
            "isForex" : true,
            "description" : "description",
            "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "isSignalsAvailable" : true,
            "type" : "Undefined",
            "leverages" : [ 5, 5 ],
            "minimumDepositsAmount" : {
              "key" : 5.637376656633329
            },
            "currencies" : [ "currencies", "currencies" ]
          } ],
          "isSignalsAvailable" : true,
          "tags" : [ {
            "color" : "color",
            "name" : "name"
          }, {
            "color" : "color",
            "name" : "name"
          } ]
        },
        "newLeverage" : 5,
        "dateCreate" : "2000-01-23T04:56:07.000+00:00"
      },
      "signalSubscription" : {
        "mode" : "ByBalance",
        "totalVolume" : 2.3021358869347655,
        "hasSignalAccount" : true,
        "totalProfit" : 5.637376656633329,
        "fixedCurrency" : "Undefined",
        "fixedVolume" : 5.962133916683182,
        "openTolerancePercent" : 1.4658129805029452,
        "hasActiveSubscription" : true,
        "percent" : 6.027456183070403
      },
      "canMakeSignalProvider" : true,
      "invested" : 6.683562403749608,
      "isFavorite" : true,
      "isInvested" : true,
      "status" : "Pending"
    },
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 0.8008281904610115
    } ],
    "status" : "None"
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter currencySecondary: (query)  (optional)
     - parameter actionStatus: (query)  (optional)
     - parameter dashboardActionStatus: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ProgramsList> 
     */
    open class func v10ManagerProgramsGetWithRequestBuilder(authorization: String, sorting: Sorting_v10ManagerProgramsGet? = nil, from: Date? = nil, to: Date? = nil, chartPointsCount: Int? = nil, currencySecondary: CurrencySecondary_v10ManagerProgramsGet? = nil, actionStatus: ActionStatus_v10ManagerProgramsGet? = nil, dashboardActionStatus: DashboardActionStatus_v10ManagerProgramsGet? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ProgramsList> {
        let path = "/v1.0/manager/programs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "Sorting": sorting?.rawValue, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
            "CurrencySecondary": currencySecondary?.rawValue, 
            "ActionStatus": actionStatus?.rawValue, 
            "DashboardActionStatus": dashboardActionStatus?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramsList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get investment amount to create program
     
     - parameter authorization: (header) JWT access token 
     - parameter brokerTradingAccount: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsInvestmentAmountGet(authorization: String, brokerTradingAccount: UUID? = nil, completion: @escaping ((_ data: ProgramMinimumDeposit?,_ error: Error?) -> Void)) {
        v10ManagerProgramsInvestmentAmountGetWithRequestBuilder(authorization: authorization, brokerTradingAccount: brokerTradingAccount).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get investment amount to create program
     - GET /v1.0/manager/programs/investment/amount
     - examples: [{contentType=application/json, example={
  "minimumDepositsAmount" : {
    "key" : 0.8008281904610115
  }
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter brokerTradingAccount: (query)  (optional)

     - returns: RequestBuilder<ProgramMinimumDeposit> 
     */
    open class func v10ManagerProgramsInvestmentAmountGetWithRequestBuilder(authorization: String, brokerTradingAccount: UUID? = nil) -> RequestBuilder<ProgramMinimumDeposit> {
        let path = "/v1.0/manager/programs/investment/amount"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "brokerTradingAccount": brokerTradingAccount
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramMinimumDeposit>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Cancel investment program/fund request
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsRequestsByIdCancelPost(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerProgramsRequestsByIdCancelPostWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Cancel investment program/fund request
     - POST /v1.0/manager/programs/requests/{id}/cancel
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerProgramsRequestsByIdCancelPostWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v1.0/manager/programs/requests/{id}/cancel"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter assetType
     */
    public enum AssetType_v10ManagerRequestsBySkipByTakeGet: String { 
        case all = "All"
        case program = "Program"
        case fund = "Fund"
        case signal = "Signal"
    }

    /**
     Get all requests
     
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter assetType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerRequestsBySkipByTakeGet(skip: Int, take: Int, authorization: String, assetType: AssetType_v10ManagerRequestsBySkipByTakeGet? = nil, completion: @escaping ((_ data: ProgramRequests?,_ error: Error?) -> Void)) {
        v10ManagerRequestsBySkipByTakeGetWithRequestBuilder(skip: skip, take: take, authorization: authorization, assetType: assetType).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get all requests
     - GET /v1.0/manager/requests/{skip}/{take}
     - examples: [{contentType=application/json, example={
  "totalValue" : 7.058770351582356,
  "total" : 0,
  "requests" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeExit" : 3.0937452626664474,
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "valueGvt" : 6.704019297950036,
    "withdrawAll" : true,
    "fundWithdrawPercent" : 7.143538047012306,
    "feeEntry" : 3.353193347011243,
    "type" : "Invest",
    "title" : "title",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "value" : 5.944895607614016,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "feeExit" : 3.0937452626664474,
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "valueGvt" : 6.704019297950036,
    "withdrawAll" : true,
    "fundWithdrawPercent" : 7.143538047012306,
    "feeEntry" : 3.353193347011243,
    "type" : "Invest",
    "title" : "title",
    "logo" : "logo",
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "value" : 5.944895607614016,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  } ]
}}]
     
     - parameter skip: (path)  
     - parameter take: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter assetType: (query)  (optional)

     - returns: RequestBuilder<ProgramRequests> 
     */
    open class func v10ManagerRequestsBySkipByTakeGetWithRequestBuilder(skip: Int, take: Int, authorization: String, assetType: AssetType_v10ManagerRequestsBySkipByTakeGet? = nil) -> RequestBuilder<ProgramRequests> {
        var path = "/v1.0/manager/requests/{skip}/{take}"
        path = path.replacingOccurrences(of: "{skip}", with: "\(skip)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{take}", with: "\(take)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "assetType": assetType?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProgramRequests>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Make manager's program signal provider
     
     - parameter authorization: (header) JWT access token 
     - parameter programId: (query)  (optional)
     - parameter volumeFee: (query)  (optional)
     - parameter successFee: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerSignalCreatePost(authorization: String, programId: UUID? = nil, volumeFee: Double? = nil, successFee: Double? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerSignalCreatePostWithRequestBuilder(authorization: authorization, programId: programId, volumeFee: volumeFee, successFee: successFee).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Make manager's program signal provider
     - POST /v1.0/manager/signal/create
     
     - parameter authorization: (header) JWT access token 
     - parameter programId: (query)  (optional)
     - parameter volumeFee: (query)  (optional)
     - parameter successFee: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerSignalCreatePostWithRequestBuilder(authorization: String, programId: UUID? = nil, volumeFee: Double? = nil, successFee: Double? = nil) -> RequestBuilder<Void> {
        let path = "/v1.0/manager/signal/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "ProgramId": programId, 
            "VolumeFee": volumeFee, 
            "SuccessFee": successFee
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Make manager's program signal provider
     
     - parameter authorization: (header) JWT access token 
     - parameter programId: (query)  (optional)
     - parameter volumeFee: (query)  (optional)
     - parameter successFee: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerSignalEditPost(authorization: String, programId: UUID? = nil, volumeFee: Double? = nil, successFee: Double? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        v10ManagerSignalEditPostWithRequestBuilder(authorization: authorization, programId: programId, volumeFee: volumeFee, successFee: successFee).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Make manager's program signal provider
     - POST /v1.0/manager/signal/edit
     
     - parameter authorization: (header) JWT access token 
     - parameter programId: (query)  (optional)
     - parameter volumeFee: (query)  (optional)
     - parameter successFee: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func v10ManagerSignalEditPostWithRequestBuilder(authorization: String, programId: UUID? = nil, volumeFee: Double? = nil, successFee: Double? = nil) -> RequestBuilder<Void> {
        let path = "/v1.0/manager/signal/edit"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "ProgramId": programId, 
            "VolumeFee": volumeFee, 
            "SuccessFee": successFee
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
