//
// WalletAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class WalletAPI {
    /**
     - parameter txId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelWithdrawalRequest(txId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        cancelWithdrawalRequestWithRequestBuilder(txId: txId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v2.0/wallet/withdraw/request/cancel/{txId}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter txId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func cancelWithdrawalRequestWithRequestBuilder(txId: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/wallet/withdraw/request/cancel/{txId}"
        let txIdPreEscape = "\(txId)"
        let txIdPostEscape = txIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{txId}", with: txIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter requestId: (query)  (optional)     - parameter code: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func confirmWithdrawalRequestByCode(requestId: UUID? = nil, code: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        confirmWithdrawalRequestByCodeWithRequestBuilder(requestId: requestId, code: code).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v2.0/wallet/withdraw/request/confirm
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter requestId: (query)  (optional)     - parameter code: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func confirmWithdrawalRequestByCodeWithRequestBuilder(requestId: UUID? = nil, code: String? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/wallet/withdraw/request/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "requestId": requestId, 
                        "code": code
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createWithdrawalRequest(body: CreateWithdrawalRequestModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createWithdrawalRequestWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v2.0/wallet/withdraw/request/new
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createWithdrawalRequestWithRequestBuilder(body: CreateWithdrawalRequestModel? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/wallet/withdraw/request/new"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     GenesisMarkets commission data

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGMCommissionData(completion: @escaping ((_ data: UserCommissionData?,_ error: Error?) -> Void)) {
        getGMCommissionDataWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     GenesisMarkets commission data
     - GET /v2.0/wallet/fee/gvtholding
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "regularTradingFee" : 1.4658129805029452,
  "regularDiscount" : 5.962133916683182,
  "gvtHolderDiscount" : 6.027456183070403,
  "isPayingCommissionInGvt" : true,
  "gvtHolderTradingFee" : 0.8008281904610115
}}]

     - returns: RequestBuilder<UserCommissionData> 
     */
    open class func getGMCommissionDataWithRequestBuilder() -> RequestBuilder<UserCommissionData> {
        let path = "/v2.0/wallet/fee/gvtholding"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserCommissionData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     External transactions
     - parameter transactionType: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter currency: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTransactionsExternal(transactionType: TransactionExternalType? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, currency: Currency? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: TransactionViewModelItemsViewModel?,_ error: Error?) -> Void)) {
        getTransactionsExternalWithRequestBuilder(transactionType: transactionType, dateFrom: dateFrom, dateTo: dateTo, currency: currency, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     External transactions
     - GET /v2.0/wallet/transactions/external
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 6,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : {
      "title" : "title",
      "first" : {
        "amount" : 0.8008281904610115,
        "color" : "White",
        "currency" : "Undefined",
        "logoUrl" : "logoUrl"
      }
    },
    "description" : "description",
    "detailsTitle" : "detailsTitle",
    "details" : [ {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    }, {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    } ],
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "manager" : "manager",
      "description" : "description",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None"
    },
    "actions" : {
      "canResend" : true,
      "canCancel" : true
    },
    "status" : "Done"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : {
      "title" : "title",
      "first" : {
        "amount" : 0.8008281904610115,
        "color" : "White",
        "currency" : "Undefined",
        "logoUrl" : "logoUrl"
      }
    },
    "description" : "description",
    "detailsTitle" : "detailsTitle",
    "details" : [ {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    }, {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    } ],
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "manager" : "manager",
      "description" : "description",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None"
    },
    "actions" : {
      "canResend" : true,
      "canCancel" : true
    },
    "status" : "Done"
  } ]
}}]
     - parameter transactionType: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter currency: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<TransactionViewModelItemsViewModel> 
     */
    open class func getTransactionsExternalWithRequestBuilder(transactionType: TransactionExternalType? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, currency: Currency? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<TransactionViewModelItemsViewModel> {
        let path = "/v2.0/wallet/transactions/external"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "TransactionType": transactionType, 
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "Currency": currency, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<TransactionViewModelItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Internal transactions
     - parameter transactionType: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter currency: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTransactionsInternal(transactionType: TransactionInternalType? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, currency: Currency? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: TransactionViewModelItemsViewModel?,_ error: Error?) -> Void)) {
        getTransactionsInternalWithRequestBuilder(transactionType: transactionType, dateFrom: dateFrom, dateTo: dateTo, currency: currency, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Internal transactions
     - GET /v2.0/wallet/transactions/internal
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 6,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : {
      "title" : "title",
      "first" : {
        "amount" : 0.8008281904610115,
        "color" : "White",
        "currency" : "Undefined",
        "logoUrl" : "logoUrl"
      }
    },
    "description" : "description",
    "detailsTitle" : "detailsTitle",
    "details" : [ {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    }, {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    } ],
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "manager" : "manager",
      "description" : "description",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None"
    },
    "actions" : {
      "canResend" : true,
      "canCancel" : true
    },
    "status" : "Done"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : {
      "title" : "title",
      "first" : {
        "amount" : 0.8008281904610115,
        "color" : "White",
        "currency" : "Undefined",
        "logoUrl" : "logoUrl"
      }
    },
    "description" : "description",
    "detailsTitle" : "detailsTitle",
    "details" : [ {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    }, {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    } ],
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "manager" : "manager",
      "description" : "description",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "logoUrl" : "logoUrl",
      "url" : "url",
      "assetType" : "None"
    },
    "actions" : {
      "canResend" : true,
      "canCancel" : true
    },
    "status" : "Done"
  } ]
}}]
     - parameter transactionType: (query)  (optional)     - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter currency: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<TransactionViewModelItemsViewModel> 
     */
    open class func getTransactionsInternalWithRequestBuilder(transactionType: TransactionInternalType? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, currency: Currency? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<TransactionViewModelItemsViewModel> {
        let path = "/v2.0/wallet/transactions/internal"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "TransactionType": transactionType, 
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "Currency": currency, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<TransactionViewModelItemsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserWithdrawalSummary(completion: @escaping ((_ data: WithdrawalSummary?,_ error: Error?) -> Void)) {
        getUserWithdrawalSummaryWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v2.0/wallet/withdraw/info
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "wallets" : [ {
    "rateToGvt" : 1.4658129805029452,
    "description" : "description",
    "currency" : "Undefined",
    "commission" : 6.027456183070403,
    "logoUrl" : "logoUrl",
    "availableToWithdrawal" : 5.962133916683182
  }, {
    "rateToGvt" : 1.4658129805029452,
    "description" : "description",
    "currency" : "Undefined",
    "commission" : 6.027456183070403,
    "logoUrl" : "logoUrl",
    "availableToWithdrawal" : 5.962133916683182
  } ],
  "availableToWithdrawal" : 0.8008281904610115
}}]

     - returns: RequestBuilder<WithdrawalSummary> 
     */
    open class func getUserWithdrawalSummaryWithRequestBuilder() -> RequestBuilder<WithdrawalSummary> {
        let path = "/v2.0/wallet/withdraw/info"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WithdrawalSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Wallet available
     - parameter currency: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWalletAvailable(currency: Currency, completion: @escaping ((_ data: WalletMultiAvailable?,_ error: Error?) -> Void)) {
        getWalletAvailableWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Wallet available
     - GET /v2.0/wallet/{currency}/available
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "wallets" : [ {
    "rate" : 6.027456183070403,
    "available" : 0.8008281904610115,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "logoUrl" : "logoUrl"
  }, {
    "rate" : 6.027456183070403,
    "available" : 0.8008281904610115,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "logoUrl" : "logoUrl"
  } ]
}}]
     - parameter currency: (path)  

     - returns: RequestBuilder<WalletMultiAvailable> 
     */
    open class func getWalletAvailableWithRequestBuilder(currency: Currency) -> RequestBuilder<WalletMultiAvailable> {
        var path = "/v2.0/wallet/{currency}/available"
        let currencyPreEscape = "\(currency)"
        let currencyPostEscape = currencyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{currency}", with: currencyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WalletMultiAvailable>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Wallet summary
     - parameter currency: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWalletSummary(currency: Currency, completion: @escaping ((_ data: WalletSummary?,_ error: Error?) -> Void)) {
        getWalletSummaryWithRequestBuilder(currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Wallet summary
     - GET /v2.0/wallet/{currency}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "grandTotal" : {
    "trading" : 1.4658129805029452,
    "total" : 5.962133916683182,
    "available" : 0.8008281904610115,
    "currency" : "Undefined",
    "invested" : 6.027456183070403
  },
  "wallets" : [ {
    "trading" : 7.061401241503109,
    "totalCcy" : 1.0246457001441578,
    "availableCcy" : 2.027123023002322,
    "pending" : 9.301444243932576,
    "available" : 5.637376656633329,
    "depositAddress" : "depositAddress",
    "withdrawalCommission" : 1.4894159098541704,
    "isWithdrawalEnabled" : true,
    "title" : "title",
    "isDepositEnabled" : true,
    "logoUrl" : "logoUrl",
    "total" : 3.616076749251911,
    "tradingCcy" : 7.386281948385884,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "depositUrlCoindirect" : "depositUrlCoindirect",
    "invested" : 2.3021358869347655,
    "pendingCcy" : 1.2315135367772556,
    "investedCcy" : 4.145608029883936
  }, {
    "trading" : 7.061401241503109,
    "totalCcy" : 1.0246457001441578,
    "availableCcy" : 2.027123023002322,
    "pending" : 9.301444243932576,
    "available" : 5.637376656633329,
    "depositAddress" : "depositAddress",
    "withdrawalCommission" : 1.4894159098541704,
    "isWithdrawalEnabled" : true,
    "title" : "title",
    "isDepositEnabled" : true,
    "logoUrl" : "logoUrl",
    "total" : 3.616076749251911,
    "tradingCcy" : 7.386281948385884,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "depositUrlCoindirect" : "depositUrlCoindirect",
    "invested" : 2.3021358869347655,
    "pendingCcy" : 1.2315135367772556,
    "investedCcy" : 4.145608029883936
  } ],
  "genesisMarketsDiscountPercent" : 6.84685269835264
}}]
     - parameter currency: (path)  

     - returns: RequestBuilder<WalletSummary> 
     */
    open class func getWalletSummaryWithRequestBuilder(currency: Currency) -> RequestBuilder<WalletSummary> {
        var path = "/v2.0/wallet/{currency}"
        let currencyPreEscape = "\(currency)"
        let currencyPostEscape = currencyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{currency}", with: currencyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WalletSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter txId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resendWithdrawalRequestEmail(txId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        resendWithdrawalRequestEmailWithRequestBuilder(txId: txId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v2.0/wallet/withdraw/request/resend/{txId}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter txId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func resendWithdrawalRequestEmailWithRequestBuilder(txId: UUID) -> RequestBuilder<Void> {
        var path = "/v2.0/wallet/withdraw/request/resend/{txId}"
        let txIdPreEscape = "\(txId)"
        let txIdPostEscape = txIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{txId}", with: txIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Transfer money
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transfer(body: InternalTransferRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        transferWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Transfer money
     - POST /v2.0/wallet/transfer
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func transferWithRequestBuilder(body: InternalTransferRequest? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/wallet/transfer"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update deposit wallets

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDepositWallets(completion: @escaping ((_ data: WalletDepositSummary?,_ error: Error?) -> Void)) {
        updateDepositWalletsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update deposit wallets
     - POST /v2.0/wallet/deposit/update
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "wallets" : [ {
    "depositAddress" : "depositAddress",
    "currency" : "Undefined"
  }, {
    "depositAddress" : "depositAddress",
    "currency" : "Undefined"
  } ]
}}]

     - returns: RequestBuilder<WalletDepositSummary> 
     */
    open class func updateDepositWalletsWithRequestBuilder() -> RequestBuilder<WalletDepositSummary> {
        let path = "/v2.0/wallet/deposit/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WalletDepositSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
