//
// WalletAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class WalletAPI {
    /**

     - parameter txId: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelWithdrawalRequest(txId: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        cancelWithdrawalRequestWithRequestBuilder(txId: txId, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /v2.0/wallet/withdraw/request/cancel/{txId}
     
     - parameter txId: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func cancelWithdrawalRequestWithRequestBuilder(txId: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v2.0/wallet/withdraw/request/cancel/{txId}"
        path = path.replacingOccurrences(of: "{txId}", with: "\(txId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter requestId: (query)  (optional)
     - parameter code: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func confirmWithdrawalRequestByCode(requestId: UUID? = nil, code: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        confirmWithdrawalRequestByCodeWithRequestBuilder(requestId: requestId, code: code).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /v2.0/wallet/withdraw/request/confirm
     
     - parameter requestId: (query)  (optional)
     - parameter code: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func confirmWithdrawalRequestByCodeWithRequestBuilder(requestId: UUID? = nil, code: String? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/wallet/withdraw/request/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "requestId": requestId, 
            "code": code
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createWithdrawalRequest(authorization: String, model: CreateWithdrawalRequestModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        createWithdrawalRequestWithRequestBuilder(authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /v2.0/wallet/withdraw/request/new
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createWithdrawalRequestWithRequestBuilder(authorization: String, model: CreateWithdrawalRequestModel? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/wallet/withdraw/request/new"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getAccountsAvailable: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Accounts available
     
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountsAvailable(currency: Currency_getAccountsAvailable, authorization: String, completion: @escaping ((_ data: WalletMultiAvailable?,_ error: Error?) -> Void)) {
        getAccountsAvailableWithRequestBuilder(currency: currency, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Accounts available
     - GET /v2.0/wallet/accounts/{currency}/available
     - examples: [{contentType=application/json, example={
  "wallets" : [ {
    "rate" : 6.027456183070403,
    "available" : 0.8008281904610115,
    "logo" : "logo",
    "currency" : { },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title"
  }, {
    "rate" : 6.027456183070403,
    "available" : 0.8008281904610115,
    "logo" : "logo",
    "currency" : { },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title"
  } ]
}}]
     
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<WalletMultiAvailable> 
     */
    open class func getAccountsAvailableWithRequestBuilder(currency: Currency_getAccountsAvailable, authorization: String) -> RequestBuilder<WalletMultiAvailable> {
        var path = "/v2.0/wallet/accounts/{currency}/available"
        path = path.replacingOccurrences(of: "{currency}", with: "\(currency.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WalletMultiAvailable>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     GenesisMarkets commission data
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGMCommissionData(authorization: String, completion: @escaping ((_ data: UserCommissionData?,_ error: Error?) -> Void)) {
        getGMCommissionDataWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     GenesisMarkets commission data
     - GET /v2.0/wallet/fee/gvtholding
     - examples: [{contentType=application/json, example={
  "regularTradingFee" : 1.4658129805029452,
  "regularDiscount" : 5.962133916683182,
  "gvtHolderDiscount" : 6.027456183070403,
  "isPayingCommissionInGvt" : true,
  "gvtHolderTradingFee" : 0.8008281904610115
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<UserCommissionData> 
     */
    open class func getGMCommissionDataWithRequestBuilder(authorization: String) -> RequestBuilder<UserCommissionData> {
        let path = "/v2.0/wallet/fee/gvtholding"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserCommissionData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter transactionType
     */
    public enum TransactionType_getTransactionsExternal: String { 
        case all = "All"
        case withdrawal = "Withdrawal"
        case deposit = "Deposit"
        case platform = "Platform"
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getTransactionsExternal: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     External transactions
     
     - parameter authorization: (header) JWT access token 
     - parameter transactionType: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTransactionsExternal(authorization: String, transactionType: TransactionType_getTransactionsExternal? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, currency: Currency_getTransactionsExternal? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ItemsViewModelTransactionViewModel?,_ error: Error?) -> Void)) {
        getTransactionsExternalWithRequestBuilder(authorization: authorization, transactionType: transactionType, dateFrom: dateFrom, dateTo: dateTo, currency: currency, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     External transactions
     - GET /v2.0/wallet/transactions/external
     - examples: [{contentType=application/json, example={
  "total" : 6,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : {
      "title" : "title",
      "first" : {
        "amount" : 0.8008281904610115,
        "color" : { },
        "logo" : "logo",
        "currency" : { }
      },
      "second" : {
        "amount" : 0.8008281904610115,
        "color" : { },
        "logo" : "logo",
        "currency" : { }
      }
    },
    "description" : "description",
    "detailsTitle" : "detailsTitle",
    "details" : [ {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    }, {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    } ],
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "manager" : "manager",
      "color" : "color",
      "description" : "description",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "url" : "url",
      "assetType" : { }
    },
    "actions" : {
      "canResend" : true,
      "canCancel" : true
    },
    "status" : { }
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : {
      "title" : "title",
      "first" : {
        "amount" : 0.8008281904610115,
        "color" : { },
        "logo" : "logo",
        "currency" : { }
      },
      "second" : {
        "amount" : 0.8008281904610115,
        "color" : { },
        "logo" : "logo",
        "currency" : { }
      }
    },
    "description" : "description",
    "detailsTitle" : "detailsTitle",
    "details" : [ {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    }, {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    } ],
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "manager" : "manager",
      "color" : "color",
      "description" : "description",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "url" : "url",
      "assetType" : { }
    },
    "actions" : {
      "canResend" : true,
      "canCancel" : true
    },
    "status" : { }
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter transactionType: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ItemsViewModelTransactionViewModel> 
     */
    open class func getTransactionsExternalWithRequestBuilder(authorization: String, transactionType: TransactionType_getTransactionsExternal? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, currency: Currency_getTransactionsExternal? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ItemsViewModelTransactionViewModel> {
        let path = "/v2.0/wallet/transactions/external"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "TransactionType": transactionType?.rawValue, 
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "Currency": currency?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ItemsViewModelTransactionViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter transactionType
     */
    public enum TransactionType_getTransactionsInternal: String { 
        case all = "All"
        case investment = "Investment"
        case withdrawal = "Withdrawal"
        case conversion = "Conversion"
        case commission = "Commission"
        case program = "Program"
        case fund = "Fund"
        case follow = "Follow"
        case tradingAccounts = "TradingAccounts"
        case agentReward = "AgentReward"
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getTransactionsInternal: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Internal transactions
     
     - parameter authorization: (header) JWT access token 
     - parameter transactionType: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTransactionsInternal(authorization: String, transactionType: TransactionType_getTransactionsInternal? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, currency: Currency_getTransactionsInternal? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ItemsViewModelTransactionViewModel?,_ error: Error?) -> Void)) {
        getTransactionsInternalWithRequestBuilder(authorization: authorization, transactionType: transactionType, dateFrom: dateFrom, dateTo: dateTo, currency: currency, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Internal transactions
     - GET /v2.0/wallet/transactions/internal
     - examples: [{contentType=application/json, example={
  "total" : 6,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : {
      "title" : "title",
      "first" : {
        "amount" : 0.8008281904610115,
        "color" : { },
        "logo" : "logo",
        "currency" : { }
      },
      "second" : {
        "amount" : 0.8008281904610115,
        "color" : { },
        "logo" : "logo",
        "currency" : { }
      }
    },
    "description" : "description",
    "detailsTitle" : "detailsTitle",
    "details" : [ {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    }, {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    } ],
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "manager" : "manager",
      "color" : "color",
      "description" : "description",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "url" : "url",
      "assetType" : { }
    },
    "actions" : {
      "canResend" : true,
      "canCancel" : true
    },
    "status" : { }
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : {
      "title" : "title",
      "first" : {
        "amount" : 0.8008281904610115,
        "color" : { },
        "logo" : "logo",
        "currency" : { }
      },
      "second" : {
        "amount" : 0.8008281904610115,
        "color" : { },
        "logo" : "logo",
        "currency" : { }
      }
    },
    "description" : "description",
    "detailsTitle" : "detailsTitle",
    "details" : [ {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    }, {
      "canCopy" : true,
      "details" : "details",
      "title" : "title",
      "url" : "url"
    } ],
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "asset" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "manager" : "manager",
      "color" : "color",
      "description" : "description",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "url" : "url",
      "assetType" : { }
    },
    "actions" : {
      "canResend" : true,
      "canCancel" : true
    },
    "status" : { }
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter transactionType: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ItemsViewModelTransactionViewModel> 
     */
    open class func getTransactionsInternalWithRequestBuilder(authorization: String, transactionType: TransactionType_getTransactionsInternal? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, currency: Currency_getTransactionsInternal? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ItemsViewModelTransactionViewModel> {
        let path = "/v2.0/wallet/transactions/internal"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "TransactionType": transactionType?.rawValue, 
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "Currency": currency?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ItemsViewModelTransactionViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserWithdrawalSummary(authorization: String, completion: @escaping ((_ data: WithdrawalSummary?,_ error: Error?) -> Void)) {
        getUserWithdrawalSummaryWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /v2.0/wallet/withdraw/info
     - examples: [{contentType=application/json, example={
  "wallets" : [ {
    "rateToGvt" : 1.4658129805029452,
    "description" : "description",
    "logo" : "logo",
    "currency" : { },
    "commission" : 6.027456183070403,
    "availableToWithdrawal" : 5.962133916683182
  }, {
    "rateToGvt" : 1.4658129805029452,
    "description" : "description",
    "logo" : "logo",
    "currency" : { },
    "commission" : 6.027456183070403,
    "availableToWithdrawal" : 5.962133916683182
  } ],
  "availableToWithdrawal" : 0.8008281904610115
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<WithdrawalSummary> 
     */
    open class func getUserWithdrawalSummaryWithRequestBuilder(authorization: String) -> RequestBuilder<WithdrawalSummary> {
        let path = "/v2.0/wallet/withdraw/info"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WithdrawalSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getWalletAvailable: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Wallet available
     
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWalletAvailable(currency: Currency_getWalletAvailable, authorization: String, completion: @escaping ((_ data: WalletMultiAvailable?,_ error: Error?) -> Void)) {
        getWalletAvailableWithRequestBuilder(currency: currency, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Wallet available
     - GET /v2.0/wallet/{currency}/available
     - examples: [{contentType=application/json, example={
  "wallets" : [ {
    "rate" : 6.027456183070403,
    "available" : 0.8008281904610115,
    "logo" : "logo",
    "currency" : { },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title"
  }, {
    "rate" : 6.027456183070403,
    "available" : 0.8008281904610115,
    "logo" : "logo",
    "currency" : { },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title"
  } ]
}}]
     
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<WalletMultiAvailable> 
     */
    open class func getWalletAvailableWithRequestBuilder(currency: Currency_getWalletAvailable, authorization: String) -> RequestBuilder<WalletMultiAvailable> {
        var path = "/v2.0/wallet/{currency}/available"
        path = path.replacingOccurrences(of: "{currency}", with: "\(currency.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WalletMultiAvailable>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getWalletSummary: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Wallet summary
     
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWalletSummary(currency: Currency_getWalletSummary, authorization: String, completion: @escaping ((_ data: WalletSummary?,_ error: Error?) -> Void)) {
        getWalletSummaryWithRequestBuilder(currency: currency, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Wallet summary
     - GET /v2.0/wallet/{currency}
     - examples: [{contentType=application/json, example={
  "grandTotal" : {
    "trading" : 1.4658129805029452,
    "total" : 5.962133916683182,
    "available" : 0.8008281904610115,
    "currency" : { },
    "invested" : 6.027456183070403
  },
  "payFeesWithGvt" : true,
  "wallets" : [ {
    "trading" : 1.4894159098541704,
    "totalCcy" : 4.145608029883936,
    "availableCcy" : 7.061401241503109,
    "pending" : 5.637376656633329,
    "depositAddress" : "depositAddress",
    "available" : 1.2315135367772556,
    "withdrawalCommission" : 7.386281948385884,
    "isWithdrawalEnabled" : true,
    "title" : "title",
    "isDepositEnabled" : true,
    "total" : 2.3021358869347655,
    "tradingCcy" : 3.616076749251911,
    "logo" : "logo",
    "currency" : null,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "depositUrlCoindirect" : "depositUrlCoindirect",
    "pendingCcy" : 2.027123023002322,
    "invested" : 1.0246457001441578,
    "investedCcy" : 9.301444243932576
  }, {
    "trading" : 1.4894159098541704,
    "totalCcy" : 4.145608029883936,
    "availableCcy" : 7.061401241503109,
    "pending" : 5.637376656633329,
    "depositAddress" : "depositAddress",
    "available" : 1.2315135367772556,
    "withdrawalCommission" : 7.386281948385884,
    "isWithdrawalEnabled" : true,
    "title" : "title",
    "isDepositEnabled" : true,
    "total" : 2.3021358869347655,
    "tradingCcy" : 3.616076749251911,
    "logo" : "logo",
    "currency" : null,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "depositUrlCoindirect" : "depositUrlCoindirect",
    "pendingCcy" : 2.027123023002322,
    "invested" : 1.0246457001441578,
    "investedCcy" : 9.301444243932576
  } ]
}}]
     
     - parameter currency: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<WalletSummary> 
     */
    open class func getWalletSummaryWithRequestBuilder(currency: Currency_getWalletSummary, authorization: String) -> RequestBuilder<WalletSummary> {
        var path = "/v2.0/wallet/{currency}"
        path = path.replacingOccurrences(of: "{currency}", with: "\(currency.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WalletSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter txId: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resendWithdrawalRequestEmail(txId: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        resendWithdrawalRequestEmailWithRequestBuilder(txId: txId, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /v2.0/wallet/withdraw/request/resend/{txId}
     
     - parameter txId: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func resendWithdrawalRequestEmailWithRequestBuilder(txId: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v2.0/wallet/withdraw/request/resend/{txId}"
        path = path.replacingOccurrences(of: "{txId}", with: "\(txId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Disable paying platform fees with GVT
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func switchPayFeeInGvtOff(authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        switchPayFeeInGvtOffWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Disable paying platform fees with GVT
     - POST /v2.0/wallet/paygvtfee/off
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func switchPayFeeInGvtOffWithRequestBuilder(authorization: String) -> RequestBuilder<Void> {
        let path = "/v2.0/wallet/paygvtfee/off"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Enable paying platform fees with GVT
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func switchPayFeeInGvtOn(authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        switchPayFeeInGvtOnWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Enable paying platform fees with GVT
     - POST /v2.0/wallet/paygvtfee/on
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func switchPayFeeInGvtOnWithRequestBuilder(authorization: String) -> RequestBuilder<Void> {
        let path = "/v2.0/wallet/paygvtfee/on"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Transfer money
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transfer(authorization: String, request: InternalTransferRequest? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        transferWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Transfer money
     - POST /v2.0/wallet/transfer
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func transferWithRequestBuilder(authorization: String, request: InternalTransferRequest? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/wallet/transfer"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update deposit wallets
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDepositWallets(authorization: String, completion: @escaping ((_ data: WalletDepositSummary?,_ error: Error?) -> Void)) {
        updateDepositWalletsWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update deposit wallets
     - POST /v2.0/wallet/deposit/update
     - examples: [{contentType=application/json, example={
  "wallets" : [ {
    "depositAddress" : "depositAddress",
    "currency" : { }
  }, {
    "depositAddress" : "depositAddress",
    "currency" : { }
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<WalletDepositSummary> 
     */
    open class func updateDepositWalletsWithRequestBuilder(authorization: String) -> RequestBuilder<WalletDepositSummary> {
        let path = "/v2.0/wallet/deposit/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WalletDepositSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
