//
// FundsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class FundsAPI {
    /**
     Add to favorites
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addToFavorites(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        addToFavoritesWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Add to favorites
     - POST /v2.0/funds/{id}/favorite/add
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func addToFavoritesWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v2.0/funds/{id}/favorite/add"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getFundAbsoluteProfitChart: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Fund absolute profit chart
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFundAbsoluteProfitChart(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getFundAbsoluteProfitChart? = nil, completion: @escaping ((_ data: AbsoluteProfitChart?,_ error: Error?) -> Void)) {
        getFundAbsoluteProfitChartWithRequestBuilder(id: id, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fund absolute profit chart
     - GET /v2.0/funds/{id}/charts/profit/absolute
     - examples: [{contentType=application/json, example={
  "profit" : 0.8008281904610115,
  "chart" : [ {
    "date" : 0,
    "value" : 6.027456183070403
  }, {
    "date" : 0,
    "value" : 6.027456183070403
  } ]
}}]
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<AbsoluteProfitChart> 
     */
    open class func getFundAbsoluteProfitChartWithRequestBuilder(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getFundAbsoluteProfitChart? = nil) -> RequestBuilder<AbsoluteProfitChart> {
        var path = "/v2.0/funds/{id}/charts/profit/absolute"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "MaxPointCount": maxPointCount?.encodeToJSON(), 
            "Currency": currency?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<AbsoluteProfitChart>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getFundBalanceChart: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Fund balance chart
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFundBalanceChart(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getFundBalanceChart? = nil, completion: @escaping ((_ data: FundBalanceChart?,_ error: Error?) -> Void)) {
        getFundBalanceChartWithRequestBuilder(id: id, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fund balance chart
     - GET /v2.0/funds/{id}/charts/balance
     - examples: [{contentType=application/json, example={
  "balance" : 0.8008281904610115,
  "color" : "color",
  "chart" : [ {
    "date" : 6,
    "investorsFunds" : 5.962133916683182,
    "managerFunds" : 1.4658129805029452
  }, {
    "date" : 6,
    "investorsFunds" : 5.962133916683182,
    "managerFunds" : 1.4658129805029452
  } ]
}}]
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<FundBalanceChart> 
     */
    open class func getFundBalanceChartWithRequestBuilder(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getFundBalanceChart? = nil) -> RequestBuilder<FundBalanceChart> {
        var path = "/v2.0/funds/{id}/charts/balance"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "MaxPointCount": maxPointCount?.encodeToJSON(), 
            "Currency": currency?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<FundBalanceChart>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getFundDetails: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Fund details
     
     - parameter id: (path)  
     - parameter authorization: (header)  (optional)
     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFundDetails(id: String, authorization: String? = nil, currency: Currency_getFundDetails? = nil, completion: @escaping ((_ data: FundDetailsFull?,_ error: Error?) -> Void)) {
        getFundDetailsWithRequestBuilder(id: id, authorization: authorization, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fund details
     - GET /v2.0/funds/{id}
     - examples: [{contentType=application/json, example={
  "owner" : {
    "socialLinks" : [ {
      "name" : "name",
      "logo" : "logo",
      "type" : { },
      "value" : "value",
      "url" : "url"
    }, {
      "name" : "name",
      "logo" : "logo",
      "type" : { },
      "value" : "value",
      "url" : "url"
    } ],
    "registrationDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "avatar" : "avatar",
    "url" : "url",
    "username" : "username"
  },
  "entryFeeCurrent" : 6.027456183070403,
  "exitFeeSelected" : 1.4658129805029452,
  "assetsStructure" : [ {
    "symbol" : "symbol",
    "current" : 2.3021358869347655,
    "icon" : "icon",
    "asset" : "asset",
    "target" : 5.637376656633329
  }, {
    "symbol" : "symbol",
    "current" : 2.3021358869347655,
    "icon" : "icon",
    "asset" : "asset",
    "target" : 5.637376656633329
  } ],
  "publicInfo" : {
    "typeExt" : { },
    "color" : "color",
    "description" : "description",
    "logo" : "logo",
    "isOwnAsset" : true,
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "status" : "status"
  },
  "exitFeeCurrent" : 5.962133916683182,
  "entryFeeSelected" : 0.8008281904610115,
  "personalDetails" : {
    "exitFeePersonal" : 7.386281948385884,
    "pendingInOutCurrency" : "USD",
    "canWithdraw" : true,
    "canInvest" : true,
    "nextReallocationPercents" : "2000-01-23T04:56:07.000+00:00",
    "ownerActions" : {
      "canClose" : true,
      "canReallocate" : true
    },
    "pendingOutput" : 3.616076749251911,
    "hasNotifications" : true,
    "pendingInput" : 9.301444243932576,
    "availableReallocationPercents" : 4,
    "value" : 7.061401241503109,
    "withdrawPercent" : 2.027123023002322,
    "isFavorite" : true,
    "isInvested" : true,
    "status" : { }
  },
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header)  (optional)
     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<FundDetailsFull> 
     */
    open class func getFundDetailsWithRequestBuilder(id: String, authorization: String? = nil, currency: Currency_getFundDetails? = nil) -> RequestBuilder<FundDetailsFull> {
        var path = "/v2.0/funds/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currency": currency?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FundDetailsFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getFundProfitPercentCharts: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Fund profit percent charts
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter currencies: (query)  (optional)
     - parameter chartAssetsCount: (query)  (optional, default to 3)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFundProfitPercentCharts(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getFundProfitPercentCharts? = nil, currencies: [String]? = nil, chartAssetsCount: Int? = nil, completion: @escaping ((_ data: FundProfitPercentCharts?,_ error: Error?) -> Void)) {
        getFundProfitPercentChartsWithRequestBuilder(id: id, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency, currencies: currencies, chartAssetsCount: chartAssetsCount).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fund profit percent charts
     - GET /v2.0/funds/{id}/charts/profit/percent
     - examples: [{contentType=application/json, example={
  "statistic" : {
    "calmarRatio" : 2.3021358869347655,
    "balance" : 6.027456183070403,
    "profitPercent" : 1.4658129805029452,
    "maxDrawdown" : 7.061401241503109,
    "sharpeRatio" : 5.962133916683182,
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "investors" : 0,
    "sortinoRatio" : 5.637376656633329
  },
  "charts" : [ {
    "color" : "color",
    "currency" : { },
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  }, {
    "color" : "color",
    "currency" : { },
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  } ],
  "assets" : [ {
    "date" : 9,
    "assets" : [ {
      "color" : "color",
      "icon" : "icon",
      "name" : "name",
      "asset" : "asset",
      "percent" : 2.027123023002322
    }, {
      "color" : "color",
      "icon" : "icon",
      "name" : "name",
      "asset" : "asset",
      "percent" : 2.027123023002322
    } ],
    "value" : 3.616076749251911
  }, {
    "date" : 9,
    "assets" : [ {
      "color" : "color",
      "icon" : "icon",
      "name" : "name",
      "asset" : "asset",
      "percent" : 2.027123023002322
    }, {
      "color" : "color",
      "icon" : "icon",
      "name" : "name",
      "asset" : "asset",
      "percent" : 2.027123023002322
    } ],
    "value" : 3.616076749251911
  } ]
}}]
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter currencies: (query)  (optional)
     - parameter chartAssetsCount: (query)  (optional, default to 3)

     - returns: RequestBuilder<FundProfitPercentCharts> 
     */
    open class func getFundProfitPercentChartsWithRequestBuilder(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getFundProfitPercentCharts? = nil, currencies: [String]? = nil, chartAssetsCount: Int? = nil) -> RequestBuilder<FundProfitPercentCharts> {
        var path = "/v2.0/funds/{id}/charts/profit/percent"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "MaxPointCount": maxPointCount?.encodeToJSON(), 
            "Currency": currency?.rawValue, 
            "currencies": currencies, 
            "chartAssetsCount": chartAssetsCount?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<FundProfitPercentCharts>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_getFunds: String { 
        case byTitleAsc = "ByTitleAsc"
        case byTitleDesc = "ByTitleDesc"
        case bySizeAsc = "BySizeAsc"
        case bySizeDesc = "BySizeDesc"
        case byInvestorsAsc = "ByInvestorsAsc"
        case byInvestorsDesc = "ByInvestorsDesc"
        case byDrawdownAsc = "ByDrawdownAsc"
        case byDrawdownDesc = "ByDrawdownDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byNewAsc = "ByNewAsc"
        case byNewDesc = "ByNewDesc"
        case byValueAsc = "ByValueAsc"
        case byValueDesc = "ByValueDesc"
    }

    /**
     * enum for parameter showIn
     */
    public enum ShowIn_getFunds: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Funds list
     
     - parameter authorization: (header)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter assets: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter facetId: (query)  (optional)
     - parameter mask: (query)  (optional)
     - parameter ownerId: (query)  (optional)
     - parameter showFavorites: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFunds(authorization: String? = nil, sorting: Sorting_getFunds? = nil, showIn: ShowIn_getFunds? = nil, assets: [String]? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ItemsViewModelFundDetailsListItem?,_ error: Error?) -> Void)) {
        getFundsWithRequestBuilder(authorization: authorization, sorting: sorting, showIn: showIn, assets: assets, dateFrom: dateFrom, dateTo: dateTo, chartPointsCount: chartPointsCount, facetId: facetId, mask: mask, ownerId: ownerId, showFavorites: showFavorites, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Funds list
     - GET /v2.0/funds
     - examples: [{contentType=application/json, example={
  "total" : 4,
  "items" : [ {
    "owner" : {
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "username" : "username"
    },
    "totalAssetsCount" : 2,
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "color" : "color",
    "topFundAssets" : [ {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 1.4658129805029452
    }, {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 1.4658129805029452
    } ],
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "balance" : {
      "amount" : 9.301444243932576,
      "currency" : { }
    },
    "logo" : "logo",
    "personalDetails" : {
      "isOwnAsset" : true,
      "isFavorite" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investorsCount" : 3,
    "status" : "status"
  }, {
    "owner" : {
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "url" : "url",
      "username" : "username"
    },
    "totalAssetsCount" : 2,
    "statistic" : {
      "drawdown" : 5.637376656633329,
      "chart" : [ {
        "date" : 0,
        "value" : 6.027456183070403
      }, {
        "date" : 0,
        "value" : 6.027456183070403
      } ],
      "profit" : 5.962133916683182
    },
    "color" : "color",
    "topFundAssets" : [ {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 1.4658129805029452
    }, {
      "name" : "name",
      "icon" : "icon",
      "asset" : "asset",
      "percent" : 1.4658129805029452
    } ],
    "description" : "description",
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "url" : "url",
    "balance" : {
      "amount" : 9.301444243932576,
      "currency" : { }
    },
    "logo" : "logo",
    "personalDetails" : {
      "isOwnAsset" : true,
      "isFavorite" : true
    },
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investorsCount" : 3,
    "status" : "status"
  } ]
}}]
     
     - parameter authorization: (header)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter showIn: (query)  (optional)
     - parameter assets: (query)  (optional)
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter chartPointsCount: (query)  (optional)
     - parameter facetId: (query)  (optional)
     - parameter mask: (query)  (optional)
     - parameter ownerId: (query)  (optional)
     - parameter showFavorites: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ItemsViewModelFundDetailsListItem> 
     */
    open class func getFundsWithRequestBuilder(authorization: String? = nil, sorting: Sorting_getFunds? = nil, showIn: ShowIn_getFunds? = nil, assets: [String]? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, chartPointsCount: Int? = nil, facetId: String? = nil, mask: String? = nil, ownerId: UUID? = nil, showFavorites: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ItemsViewModelFundDetailsListItem> {
        let path = "/v2.0/funds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "Sorting": sorting?.rawValue, 
            "ShowIn": showIn?.rawValue, 
            "Assets": assets, 
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "ChartPointsCount": chartPointsCount?.encodeToJSON(), 
            "FacetId": facetId, 
            "Mask": mask, 
            "OwnerId": ownerId, 
            "ShowFavorites": showFavorites, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ItemsViewModelFundDetailsListItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get history of asset part update requests
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReallocatingHistory(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ItemsViewModelReallocationModel?,_ error: Error?) -> Void)) {
        getReallocatingHistoryWithRequestBuilder(id: id, dateFrom: dateFrom, dateTo: dateTo, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get history of asset part update requests
     - GET /v2.0/funds/{id}/reallocations
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "parts" : [ {
      "color" : "color",
      "icon" : "icon",
      "name" : "name",
      "asset" : "asset",
      "percent" : 2.027123023002322
    }, {
      "color" : "color",
      "icon" : "icon",
      "name" : "name",
      "asset" : "asset",
      "percent" : 2.027123023002322
    } ]
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "parts" : [ {
      "color" : "color",
      "icon" : "icon",
      "name" : "name",
      "asset" : "asset",
      "percent" : 2.027123023002322
    }, {
      "color" : "color",
      "icon" : "icon",
      "name" : "name",
      "asset" : "asset",
      "percent" : 2.027123023002322
    } ]
  } ]
}}]
     
     - parameter id: (path)  
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ItemsViewModelReallocationModel> 
     */
    open class func getReallocatingHistoryWithRequestBuilder(id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ItemsViewModelReallocationModel> {
        var path = "/v2.0/funds/{id}/reallocations"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<ItemsViewModelReallocationModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove from favorites
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeFromFavorites(id: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        removeFromFavoritesWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Remove from favorites
     - POST /v2.0/funds/{id}/favorite/remove
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func removeFromFavoritesWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<Void> {
        var path = "/v2.0/funds/{id}/favorite/remove"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
