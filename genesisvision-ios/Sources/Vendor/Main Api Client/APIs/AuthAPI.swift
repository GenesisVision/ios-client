//
// AuthAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AuthAPI {
    /**
     Authorize
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authorize(model: LoginViewModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        authorizeWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Authorize
     - POST /v2.0/auth/signin
     - examples: [{contentType=application/json, example=""}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func authorizeWithRequestBuilder(model: LoginViewModel? = nil) -> RequestBuilder<String> {
        let path = "/v2.0/auth/signin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Change password
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changePassword(authorization: String, model: ChangePasswordViewModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        changePasswordWithRequestBuilder(authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Change password
     - POST /v2.0/auth/password/change
     - examples: [{contentType=application/json, example=""}]
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func changePasswordWithRequestBuilder(authorization: String, model: ChangePasswordViewModel? = nil) -> RequestBuilder<String> {
        let path = "/v2.0/auth/password/change"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Confirm email after registration
     
     - parameter userId: (query)  (optional)
     - parameter code: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func confirmEmail(userId: String? = nil, code: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        confirmEmailWithRequestBuilder(userId: userId, code: code).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Confirm email after registration
     - POST /v2.0/auth/signup/confirm
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (query)  (optional)
     - parameter code: (query)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func confirmEmailWithRequestBuilder(userId: String? = nil, code: String? = nil) -> RequestBuilder<String> {
        let path = "/v2.0/auth/signup/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userId": userId, 
            "code": code
        ])
        

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     2FA confirm
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func confirmTwoStepAuth(authorization: String, model: TwoFactorAuthenticatorConfirm? = nil, completion: @escaping ((_ data: RecoveryCodesViewModel?,_ error: Error?) -> Void)) {
        confirmTwoStepAuthWithRequestBuilder(authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     2FA confirm
     - POST /v2.0/auth/2fa/confirm
     - examples: [{contentType=application/json, example={
  "codes" : [ {
    "code" : "code",
    "isActive" : true
  }, {
    "code" : "code",
    "isActive" : true
  } ],
  "authToken" : "authToken"
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<RecoveryCodesViewModel> 
     */
    open class func confirmTwoStepAuthWithRequestBuilder(authorization: String, model: TwoFactorAuthenticatorConfirm? = nil) -> RequestBuilder<RecoveryCodesViewModel> {
        let path = "/v2.0/auth/2fa/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<RecoveryCodesViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     2FA create
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTwoStepAuth(authorization: String, completion: @escaping ((_ data: TwoFactorAuthenticator?,_ error: Error?) -> Void)) {
        createTwoStepAuthWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     2FA create
     - POST /v2.0/auth/2fa/create
     - examples: [{contentType=application/json, example={
  "sharedKey" : "sharedKey",
  "authenticatorUri" : "authenticatorUri"
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<TwoFactorAuthenticator> 
     */
    open class func createTwoStepAuthWithRequestBuilder(authorization: String) -> RequestBuilder<TwoFactorAuthenticator> {
        let path = "/v2.0/auth/2fa/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TwoFactorAuthenticator>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     2FA generate new recovery codes
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTwoStepAuthRecoveryCodes(authorization: String, model: PasswordModel? = nil, completion: @escaping ((_ data: RecoveryCodesViewModel?,_ error: Error?) -> Void)) {
        createTwoStepAuthRecoveryCodesWithRequestBuilder(authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     2FA generate new recovery codes
     - POST /v2.0/auth/2fa/recoverycodes/new
     - examples: [{contentType=application/json, example={
  "codes" : [ {
    "code" : "code",
    "isActive" : true
  }, {
    "code" : "code",
    "isActive" : true
  } ],
  "authToken" : "authToken"
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<RecoveryCodesViewModel> 
     */
    open class func createTwoStepAuthRecoveryCodesWithRequestBuilder(authorization: String, model: PasswordModel? = nil) -> RequestBuilder<RecoveryCodesViewModel> {
        let path = "/v2.0/auth/2fa/recoverycodes/new"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<RecoveryCodesViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     2FA disable
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disableTwoStepAuth(authorization: String, model: TwoFactorCodeWithPassword? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        disableTwoStepAuthWithRequestBuilder(authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     2FA disable
     - POST /v2.0/auth/2fa/disable
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func disableTwoStepAuthWithRequestBuilder(authorization: String, model: TwoFactorCodeWithPassword? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/auth/2fa/disable"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Forgot password for investor
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func forgotPassword(model: ForgotPasswordViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        forgotPasswordWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Forgot password for investor
     - POST /v2.0/auth/password/forgot
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func forgotPasswordWithRequestBuilder(model: ForgotPasswordViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/auth/password/forgot"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     2FA recovery codes
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTwoStepAuthRecoveryCodes(authorization: String, model: PasswordModel? = nil, completion: @escaping ((_ data: RecoveryCodesViewModel?,_ error: Error?) -> Void)) {
        getTwoStepAuthRecoveryCodesWithRequestBuilder(authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     2FA recovery codes
     - POST /v2.0/auth/2fa/recoverycodes
     - examples: [{contentType=application/json, example={
  "codes" : [ {
    "code" : "code",
    "isActive" : true
  }, {
    "code" : "code",
    "isActive" : true
  } ],
  "authToken" : "authToken"
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<RecoveryCodesViewModel> 
     */
    open class func getTwoStepAuthRecoveryCodesWithRequestBuilder(authorization: String, model: PasswordModel? = nil) -> RequestBuilder<RecoveryCodesViewModel> {
        let path = "/v2.0/auth/2fa/recoverycodes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<RecoveryCodesViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     2FA status
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTwoStepAuthStatus(authorization: String, completion: @escaping ((_ data: TwoFactorStatus?,_ error: Error?) -> Void)) {
        getTwoStepAuthStatusWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     2FA status
     - GET /v2.0/auth/2fa
     - examples: [{contentType=application/json, example={
  "twoFactorEnabled" : true
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<TwoFactorStatus> 
     */
    open class func getTwoStepAuthStatusWithRequestBuilder(authorization: String) -> RequestBuilder<TwoFactorStatus> {
        let path = "/v2.0/auth/2fa"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TwoFactorStatus>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Logout from another devices
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logoutFromAnotherDevices(authorization: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        logoutFromAnotherDevicesWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Logout from another devices
     - POST /v2.0/auth/token/devices/logout
     - examples: [{contentType=application/json, example=""}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<String> 
     */
    open class func logoutFromAnotherDevicesWithRequestBuilder(authorization: String) -> RequestBuilder<String> {
        let path = "/v2.0/auth/token/devices/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     New registration
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func register(model: RegisterViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        registerWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     New registration
     - POST /v2.0/auth/signup
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func registerWithRequestBuilder(model: RegisterViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/auth/signup"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get phone number verification code
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func requestPhoneNumberVerificationCode(authorization: String, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        requestPhoneNumberVerificationCodeWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get phone number verification code
     - POST /v2.0/auth/phone/code
     - examples: [{contentType=application/json, example=0}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Int> 
     */
    open class func requestPhoneNumberVerificationCodeWithRequestBuilder(authorization: String) -> RequestBuilder<Int> {
        let path = "/v2.0/auth/phone/code"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Resend Confirmation Link
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resendConfirmationLink(model: ResendConfirmationViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        resendConfirmationLinkWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Resend Confirmation Link
     - POST /v2.0/auth/resendconfirmationlink
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func resendConfirmationLinkWithRequestBuilder(model: ResendConfirmationViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/auth/resendconfirmationlink"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Reset password
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetPassword(model: ResetPasswordViewModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        resetPasswordWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Reset password
     - POST /v2.0/auth/password/reset
     - examples: [{contentType=application/json, example=""}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func resetPasswordWithRequestBuilder(model: ResetPasswordViewModel? = nil) -> RequestBuilder<String> {
        let path = "/v2.0/auth/password/reset"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update auth token
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAuthToken(authorization: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        updateAuthTokenWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update auth token
     - POST /v2.0/auth/token/update
     - examples: [{contentType=application/json, example=""}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<String> 
     */
    open class func updateAuthTokenWithRequestBuilder(authorization: String) -> RequestBuilder<String> {
        let path = "/v2.0/auth/token/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Verify phone number
     
     - parameter authorization: (header) JWT access token 
     - parameter code: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func validatePhoneNumber(authorization: String, code: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        validatePhoneNumberWithRequestBuilder(authorization: authorization, code: code).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Verify phone number
     - POST /v2.0/auth/phone/verify
     
     - parameter authorization: (header) JWT access token 
     - parameter code: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func validatePhoneNumberWithRequestBuilder(authorization: String, code: String? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/auth/phone/verify"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "code": code
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
