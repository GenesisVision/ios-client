//
// AuthAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AuthAPI {
    /**
     Authorize
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authorize(body: LoginViewModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        authorizeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Authorize
     - POST /v2.0/auth/signin
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func authorizeWithRequestBuilder(body: LoginViewModel? = nil) -> RequestBuilder<String> {
        let path = "/v2.0/auth/signin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Change password
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changePassword(body: ChangePasswordViewModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        changePasswordWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Change password
     - POST /v2.0/auth/password/change
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func changePasswordWithRequestBuilder(body: ChangePasswordViewModel? = nil) -> RequestBuilder<String> {
        let path = "/v2.0/auth/password/change"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Confirm email after registration
     - parameter userId: (query)  (optional)     - parameter code: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func confirmEmail(userId: String? = nil, code: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        confirmEmailWithRequestBuilder(userId: userId, code: code).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Confirm email after registration
     - POST /v2.0/auth/signup/confirm
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter userId: (query)  (optional)     - parameter code: (query)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func confirmEmailWithRequestBuilder(userId: String? = nil, code: String? = nil) -> RequestBuilder<String> {
        let path = "/v2.0/auth/signup/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "userId": userId, 
                        "code": code
        ])

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     3FA confirm
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func confirmThreeStepAuth(body: ThreeFactorAuthenticatorConfirm? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        confirmThreeStepAuthWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     3FA confirm
     - POST /v2.0/auth/3fa/confirm
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func confirmThreeStepAuthWithRequestBuilder(body: ThreeFactorAuthenticatorConfirm? = nil) -> RequestBuilder<String> {
        let path = "/v2.0/auth/3fa/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     2FA confirm
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func confirmTwoStepAuth(body: TwoFactorAuthenticatorConfirm? = nil, completion: @escaping ((_ data: RecoveryCodesViewModel?,_ error: Error?) -> Void)) {
        confirmTwoStepAuthWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     2FA confirm
     - POST /v2.0/auth/2fa/confirm
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "codes" : [ {
    "code" : "code",
    "isActive" : true
  }, {
    "code" : "code",
    "isActive" : true
  } ],
  "authToken" : "authToken"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<RecoveryCodesViewModel> 
     */
    open class func confirmTwoStepAuthWithRequestBuilder(body: TwoFactorAuthenticatorConfirm? = nil) -> RequestBuilder<RecoveryCodesViewModel> {
        let path = "/v2.0/auth/2fa/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RecoveryCodesViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     2FA create

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTwoStepAuth(completion: @escaping ((_ data: TwoFactorAuthenticator?,_ error: Error?) -> Void)) {
        createTwoStepAuthWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     2FA create
     - POST /v2.0/auth/2fa/create
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "sharedKey" : "sharedKey",
  "authenticatorUri" : "authenticatorUri"
}}]

     - returns: RequestBuilder<TwoFactorAuthenticator> 
     */
    open class func createTwoStepAuthWithRequestBuilder() -> RequestBuilder<TwoFactorAuthenticator> {
        let path = "/v2.0/auth/2fa/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TwoFactorAuthenticator>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     2FA generate new recovery codes
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTwoStepAuthRecoveryCodes(body: PasswordModel? = nil, completion: @escaping ((_ data: RecoveryCodesViewModel?,_ error: Error?) -> Void)) {
        createTwoStepAuthRecoveryCodesWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     2FA generate new recovery codes
     - POST /v2.0/auth/2fa/recoverycodes/new
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "codes" : [ {
    "code" : "code",
    "isActive" : true
  }, {
    "code" : "code",
    "isActive" : true
  } ],
  "authToken" : "authToken"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<RecoveryCodesViewModel> 
     */
    open class func createTwoStepAuthRecoveryCodesWithRequestBuilder(body: PasswordModel? = nil) -> RequestBuilder<RecoveryCodesViewModel> {
        let path = "/v2.0/auth/2fa/recoverycodes/new"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RecoveryCodesViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     2FA disable
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disableTwoStepAuth(body: TwoFactorCodeWithPassword? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        disableTwoStepAuthWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     2FA disable
     - POST /v2.0/auth/2fa/disable
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func disableTwoStepAuthWithRequestBuilder(body: TwoFactorCodeWithPassword? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/auth/2fa/disable"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Forgot password
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func forgotPassword(body: ForgotPasswordViewModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        forgotPasswordWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Forgot password
     - POST /v2.0/auth/password/forgot
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func forgotPasswordWithRequestBuilder(body: ForgotPasswordViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/auth/password/forgot"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     2FA recovery codes
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTwoStepAuthRecoveryCodes(body: PasswordModel? = nil, completion: @escaping ((_ data: RecoveryCodesViewModel?,_ error: Error?) -> Void)) {
        getTwoStepAuthRecoveryCodesWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     2FA recovery codes
     - POST /v2.0/auth/2fa/recoverycodes
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "codes" : [ {
    "code" : "code",
    "isActive" : true
  }, {
    "code" : "code",
    "isActive" : true
  } ],
  "authToken" : "authToken"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<RecoveryCodesViewModel> 
     */
    open class func getTwoStepAuthRecoveryCodesWithRequestBuilder(body: PasswordModel? = nil) -> RequestBuilder<RecoveryCodesViewModel> {
        let path = "/v2.0/auth/2fa/recoverycodes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RecoveryCodesViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     2FA status

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTwoStepAuthStatus(completion: @escaping ((_ data: TwoFactorStatus?,_ error: Error?) -> Void)) {
        getTwoStepAuthStatusWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     2FA status
     - GET /v2.0/auth/2fa
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "twoFactorEnabled" : true
}}]

     - returns: RequestBuilder<TwoFactorStatus> 
     */
    open class func getTwoStepAuthStatusWithRequestBuilder() -> RequestBuilder<TwoFactorStatus> {
        let path = "/v2.0/auth/2fa"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TwoFactorStatus>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Logout from another devices

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logoutFromAnotherDevices(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        logoutFromAnotherDevicesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Logout from another devices
     - POST /v2.0/auth/token/devices/logout
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func logoutFromAnotherDevicesWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/v2.0/auth/token/devices/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     New registration
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func register(body: RegisterViewModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        registerWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     New registration
     - POST /v2.0/auth/signup
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func registerWithRequestBuilder(body: RegisterViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/auth/signup"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Resend Confirmation Link
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resendConfirmationLink(body: ResendConfirmationViewModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        resendConfirmationLinkWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Resend Confirmation Link
     - POST /v2.0/auth/resendconfirmationlink
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func resendConfirmationLinkWithRequestBuilder(body: ResendConfirmationViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/v2.0/auth/resendconfirmationlink"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Reset password
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetPassword(body: ResetPasswordViewModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        resetPasswordWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Reset password
     - POST /v2.0/auth/password/reset
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func resetPasswordWithRequestBuilder(body: ResetPasswordViewModel? = nil) -> RequestBuilder<String> {
        let path = "/v2.0/auth/password/reset"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update auth token

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAuthToken(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        updateAuthTokenWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update auth token
     - POST /v2.0/auth/token/update
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func updateAuthTokenWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/v2.0/auth/token/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
