//
// RateAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class RateAPI {
    /**
     Get rate
     - parameter from: (path)       - parameter to: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRate(from: String, to: String, completion: @escaping ((_ data: RateModel?,_ error: Error?) -> Void)) {
        getRateWithRequestBuilder(from: from, to: to).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get rate
     - GET /v2.0/rate/{from}/{to}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "rate" : 0.8008281904610115
}}]
     - parameter from: (path)       - parameter to: (path)  

     - returns: RequestBuilder<RateModel> 
     */
    open class func getRateWithRequestBuilder(from: String, to: String) -> RequestBuilder<RateModel> {
        var path = "/v2.0/rate/{from}/{to}"
        let fromPreEscape = "\(from)"
        let fromPostEscape = fromPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{from}", with: fromPostEscape, options: .literal, range: nil)
        let toPreEscape = "\(to)"
        let toPostEscape = toPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{to}", with: toPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RateModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get rate by exchange
     - parameter exchange: (path)       - parameter from: (path)       - parameter to: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRateExchange(exchange: String, from: String, to: String, completion: @escaping ((_ data: RateModel?,_ error: Error?) -> Void)) {
        getRateExchangeWithRequestBuilder(exchange: exchange, from: from, to: to).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get rate by exchange
     - GET /v2.0/rate/{exchange}/{from}/{to}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "rate" : 0.8008281904610115
}}]
     - parameter exchange: (path)       - parameter from: (path)       - parameter to: (path)  

     - returns: RequestBuilder<RateModel> 
     */
    open class func getRateExchangeWithRequestBuilder(exchange: String, from: String, to: String) -> RequestBuilder<RateModel> {
        var path = "/v2.0/rate/{exchange}/{from}/{to}"
        let exchangePreEscape = "\(exchange)"
        let exchangePostEscape = exchangePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{exchange}", with: exchangePostEscape, options: .literal, range: nil)
        let fromPreEscape = "\(from)"
        let fromPostEscape = fromPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{from}", with: fromPostEscape, options: .literal, range: nil)
        let toPreEscape = "\(to)"
        let toPostEscape = toPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{to}", with: toPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RateModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get rates
     - parameter from: (query)  (optional)     - parameter to: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRates(from: [String]? = nil, to: [String]? = nil, completion: @escaping ((_ data: RatesModel?,_ error: Error?) -> Void)) {
        getRatesWithRequestBuilder(from: from, to: to).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get rates
     - GET /v2.0/rate
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "rates" : {
    "key" : [ {
      "rate" : 0.8008281904610115,
      "currency" : "Undefined"
    }, {
      "rate" : 0.8008281904610115,
      "currency" : "Undefined"
    } ]
  }
}}]
     - parameter from: (query)  (optional)     - parameter to: (query)  (optional)

     - returns: RequestBuilder<RatesModel> 
     */
    open class func getRatesWithRequestBuilder(from: [String]? = nil, to: [String]? = nil) -> RequestBuilder<RatesModel> {
        let path = "/v2.0/rate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "from": from, 
                        "to": to
        ])

        let requestBuilder: RequestBuilder<RatesModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
