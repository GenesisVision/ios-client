//
// EventsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class EventsAPI {
    /**
     * enum for parameter eventLocation
     */
    public enum EventLocation_getEvents: String { 
        case asset = "Asset"
        case dashboard = "Dashboard"
        case eventsAll = "EventsAll"
    }

    /**
     * enum for parameter eventType
     */
    public enum EventType_getEvents: String { 
        case all = "All"
        case assetFinished = "AssetFinished"
        case assetPeriodStarted = "AssetPeriodStarted"
        case assetPeriodEnded = "AssetPeriodEnded"
        case assetPeriodEndedDueToStopOut = "AssetPeriodEndedDueToStopOut"
        case assetBrokerChanged = "AssetBrokerChanged"
        case assetEnterInvestment = "AssetEnterInvestment"
        case assetSubscriptionEdit = "AssetSubscriptionEdit"
        case assetInvestByInvestor = "AssetInvestByInvestor"
        case assetWithdrawalByInvestor = "AssetWithdrawalByInvestor"
        case assetReallocation = "AssetReallocation"
        case assetStarted = "AssetStarted"
        case assetPeriodProcessed = "AssetPeriodProcessed"
        case assetInvestByManager = "AssetInvestByManager"
        case assetWithdrawalByManager = "AssetWithdrawalByManager"
        case assetSubscribeByInvestor = "AssetSubscribeByInvestor"
        case assetUnsubscribeByInvestor = "AssetUnsubscribeByInvestor"
        case assetTradeOpen = "AssetTradeOpen"
        case assetTradeClosed = "AssetTradeClosed"
    }

    /**
     * enum for parameter assetType
     */
    public enum AssetType_getEvents: String { 
        case all = "All"
        case program = "Program"
        case fund = "Fund"
        case follow = "Follow"
    }

    /**
     * enum for parameter eventGroup
     */
    public enum EventGroup_getEvents: String { 
        case investmentHistory = "InvestmentHistory"
        case tradingHistory = "TradingHistory"
    }

    /**
     Events
     
     - parameter authorization: (header) JWT access token 
     - parameter eventLocation: (query)  (optional)
     - parameter assetId: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter eventType: (query)  (optional)
     - parameter assetType: (query)  (optional)
     - parameter assetsIds: (query)  (optional)
     - parameter forceFilterByIds: (query)  (optional)
     - parameter eventGroup: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEvents(authorization: String, eventLocation: EventLocation_getEvents? = nil, assetId: UUID? = nil, from: Date? = nil, to: Date? = nil, eventType: EventType_getEvents? = nil, assetType: AssetType_getEvents? = nil, assetsIds: [UUID]? = nil, forceFilterByIds: Bool? = nil, eventGroup: EventGroup_getEvents? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: InvestmentEventViewModels?,_ error: Error?) -> Void)) {
        getEventsWithRequestBuilder(authorization: authorization, eventLocation: eventLocation, assetId: assetId, from: from, to: to, eventType: eventType, assetType: assetType, assetsIds: assetsIds, forceFilterByIds: forceFilterByIds, eventGroup: eventGroup, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Events
     - GET /v2.0/events
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "events" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "assetDetails" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "url" : "url",
      "assetType" : { }
    },
    "amount" : 2.3021358869347655,
    "feesInfo" : [ {
      "amount" : 9.301444243932576,
      "description" : "description",
      "currency" : null,
      "title" : "title",
      "type" : { }
    }, {
      "amount" : 9.301444243932576,
      "description" : "description",
      "currency" : null,
      "title" : "title",
      "type" : { }
    } ],
    "icon" : "icon",
    "changeState" : { },
    "extendedInfo" : [ {
      "amount" : 7.061401241503109,
      "currency" : { },
      "title" : "title"
    }, {
      "amount" : 7.061401241503109,
      "currency" : { },
      "title" : "title"
    } ],
    "currency" : "USD",
    "title" : "title",
    "totalFeesCurrency" : "USD",
    "totalFeesAmount" : 3.616076749251911
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "assetDetails" : {
      "programDetails" : {
        "level" : 0,
        "levelProgress" : 6.027456183070403
      },
      "color" : "color",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title",
      "url" : "url",
      "assetType" : { }
    },
    "amount" : 2.3021358869347655,
    "feesInfo" : [ {
      "amount" : 9.301444243932576,
      "description" : "description",
      "currency" : null,
      "title" : "title",
      "type" : { }
    }, {
      "amount" : 9.301444243932576,
      "description" : "description",
      "currency" : null,
      "title" : "title",
      "type" : { }
    } ],
    "icon" : "icon",
    "changeState" : { },
    "extendedInfo" : [ {
      "amount" : 7.061401241503109,
      "currency" : { },
      "title" : "title"
    }, {
      "amount" : 7.061401241503109,
      "currency" : { },
      "title" : "title"
    } ],
    "currency" : "USD",
    "title" : "title",
    "totalFeesCurrency" : "USD",
    "totalFeesAmount" : 3.616076749251911
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter eventLocation: (query)  (optional)
     - parameter assetId: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter eventType: (query)  (optional)
     - parameter assetType: (query)  (optional)
     - parameter assetsIds: (query)  (optional)
     - parameter forceFilterByIds: (query)  (optional)
     - parameter eventGroup: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<InvestmentEventViewModels> 
     */
    open class func getEventsWithRequestBuilder(authorization: String, eventLocation: EventLocation_getEvents? = nil, assetId: UUID? = nil, from: Date? = nil, to: Date? = nil, eventType: EventType_getEvents? = nil, assetType: AssetType_getEvents? = nil, assetsIds: [UUID]? = nil, forceFilterByIds: Bool? = nil, eventGroup: EventGroup_getEvents? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<InvestmentEventViewModels> {
        let path = "/v2.0/events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "EventLocation": eventLocation?.rawValue, 
            "AssetId": assetId, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "EventType": eventType?.rawValue, 
            "AssetType": assetType?.rawValue, 
            "AssetsIds": assetsIds, 
            "ForceFilterByIds": forceFilterByIds, 
            "EventGroup": eventGroup?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InvestmentEventViewModels>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
