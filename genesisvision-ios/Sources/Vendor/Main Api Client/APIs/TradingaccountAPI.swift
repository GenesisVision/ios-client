//
// TradingaccountAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TradingaccountAPI {
    /**
     Manually close trade by symbol for account
     - parameter _id: (path)       - parameter symbol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeAccountAssetTrade(_id: UUID, symbol: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        closeAccountAssetTradeWithRequestBuilder(_id: _id, symbol: symbol).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Manually close trade by symbol for account
     - POST /v2.0/tradingaccount/{id}/trades/close
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter _id: (path)       - parameter symbol: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func closeAccountAssetTradeWithRequestBuilder(_id: UUID, symbol: String? = nil) -> RequestBuilder<Void> {
        var path = "/v2.0/tradingaccount/{id}/trades/close"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "Symbol": symbol
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Export trade history
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter sorting: (query)  (optional)     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter isFollow: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportTrades(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: TradeSorting? = nil, accountId: UUID? = nil, accountCurrency: Currency? = nil, isFollow: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        exportTradesWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, symbol: symbol, sorting: sorting, accountId: accountId, accountCurrency: accountCurrency, isFollow: isFollow, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Export trade history
     - GET /v2.0/tradingaccount/{id}/trades/export
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter sorting: (query)  (optional)     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter isFollow: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<Data> 
     */
    open class func exportTradesWithRequestBuilder(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: TradeSorting? = nil, accountId: UUID? = nil, accountCurrency: Currency? = nil, isFollow: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<Data> {
        var path = "/v2.0/tradingaccount/{id}/trades/export"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "Symbol": symbol, 
                        "Sorting": sorting, 
                        "AccountId": accountId, 
                        "AccountCurrency": accountCurrency, 
                        "IsFollow": isFollow, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Trading account absolute profit chart
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter maxPointCount: (query)  (optional)     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAbsoluteProfitChart(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency? = nil, completion: @escaping ((_ data: AbsoluteProfitChart?,_ error: Error?) -> Void)) {
        getAbsoluteProfitChartWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trading account absolute profit chart
     - GET /v2.0/tradingaccount/{id}/charts/profit/absolute
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "profit" : 0.8008281904610115,
  "chart" : [ {
    "date" : 0,
    "value" : 6.027456183070403
  }, {
    "date" : 0,
    "value" : 6.027456183070403
  } ]
}}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter maxPointCount: (query)  (optional)     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<AbsoluteProfitChart> 
     */
    open class func getAbsoluteProfitChartWithRequestBuilder(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency? = nil) -> RequestBuilder<AbsoluteProfitChart> {
        var path = "/v2.0/tradingaccount/{id}/charts/profit/absolute"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "MaxPointCount": maxPointCount?.encodeToJSON(), 
                        "Currency": currency
        ])

        let requestBuilder: RequestBuilder<AbsoluteProfitChart>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Trading account balance chart
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter maxPointCount: (query)  (optional)     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBalanceChart(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency? = nil, completion: @escaping ((_ data: AccountBalanceChart?,_ error: Error?) -> Void)) {
        getBalanceChartWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trading account balance chart
     - GET /v2.0/tradingaccount/{id}/charts/balance
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "balance" : 0.8008281904610115,
  "color" : "color",
  "chart" : [ {
    "date" : 0,
    "value" : 6.027456183070403
  }, {
    "date" : 0,
    "value" : 6.027456183070403
  } ]
}}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter maxPointCount: (query)  (optional)     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<AccountBalanceChart> 
     */
    open class func getBalanceChartWithRequestBuilder(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency? = nil) -> RequestBuilder<AccountBalanceChart> {
        var path = "/v2.0/tradingaccount/{id}/charts/balance"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "MaxPointCount": maxPointCount?.encodeToJSON(), 
                        "Currency": currency
        ])

        let requestBuilder: RequestBuilder<AccountBalanceChart>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Trading account open positions
     - parameter _id: (path)       - parameter sorting: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOpenTrades(_id: UUID, sorting: TradeSorting? = nil, symbol: String? = nil, accountId: UUID? = nil, accountCurrency: Currency? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: TradesViewModel?,_ error: Error?) -> Void)) {
        getOpenTradesWithRequestBuilder(_id: _id, sorting: sorting, symbol: symbol, accountId: accountId, accountCurrency: accountCurrency, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trading account open positions
     - GET /v2.0/tradingaccount/{id}/trades/open
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "showProfit" : true,
  "total" : 3,
  "showDirection" : true,
  "showPrice" : true,
  "showSwaps" : true,
  "showPriceOpen" : true,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "ticket" : "ticket",
    "assetData" : {
      "hasAssetInfo" : true,
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "swap" : 9.301444243932576,
    "originalCommission" : 2.3021358869347655,
    "login" : "login",
    "volume" : 0.8008281904610115,
    "priceCurrent" : 5.962133916683182,
    "entry" : "In",
    "price" : 1.4658129805029452,
    "showOriginalCommission" : true,
    "profitCurrency" : "profitCurrency",
    "commission" : 7.061401241503109,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 5.637376656633329,
    "signalData" : {
      "masters" : [ {
        "share" : 3.616076749251911,
        "login" : "login"
      }, {
        "share" : 3.616076749251911,
        "login" : "login"
      } ]
    },
    "profit" : 6.027456183070403,
    "direction" : "Buy"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "ticket" : "ticket",
    "assetData" : {
      "hasAssetInfo" : true,
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "swap" : 9.301444243932576,
    "originalCommission" : 2.3021358869347655,
    "login" : "login",
    "volume" : 0.8008281904610115,
    "priceCurrent" : 5.962133916683182,
    "entry" : "In",
    "price" : 1.4658129805029452,
    "showOriginalCommission" : true,
    "profitCurrency" : "profitCurrency",
    "commission" : 7.061401241503109,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 5.637376656633329,
    "signalData" : {
      "masters" : [ {
        "share" : 3.616076749251911,
        "login" : "login"
      }, {
        "share" : 3.616076749251911,
        "login" : "login"
      } ]
    },
    "profit" : 6.027456183070403,
    "direction" : "Buy"
  } ],
  "showTickets" : true,
  "showDate" : true,
  "tradesDelay" : "None"
}}]
     - parameter _id: (path)       - parameter sorting: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<TradesViewModel> 
     */
    open class func getOpenTradesWithRequestBuilder(_id: UUID, sorting: TradeSorting? = nil, symbol: String? = nil, accountId: UUID? = nil, accountCurrency: Currency? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<TradesViewModel> {
        var path = "/v2.0/tradingaccount/{id}/trades/open"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "Sorting": sorting, 
                        "Symbol": symbol, 
                        "AccountId": accountId, 
                        "AccountCurrency": accountCurrency, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<TradesViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Trading account profit percent charts
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter maxPointCount: (query)  (optional)     - parameter currency: (query)  (optional)     - parameter currencies: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProfitPercentCharts(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency? = nil, currencies: [Currency]? = nil, completion: @escaping ((_ data: AccountProfitPercentCharts?,_ error: Error?) -> Void)) {
        getProfitPercentChartsWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency, currencies: currencies).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trading account profit percent charts
     - GET /v2.0/tradingaccount/{id}/charts/profit/percent
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "statistic" : {
    "profitFactor" : 2.027123023002322,
    "calmarRatio" : 5.637376656633329,
    "balance" : 0.8008281904610115,
    "profitPercent" : 6.027456183070403,
    "successTradesPercent" : 3.616076749251911,
    "trades" : 9,
    "maxDrawdown" : 2.3021358869347655,
    "sharpeRatio" : 1.4658129805029452,
    "tradingVolume" : 7.061401241503109,
    "sortinoRatio" : 5.962133916683182
  },
  "charts" : [ {
    "color" : "color",
    "currency" : "Undefined",
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  }, {
    "color" : "color",
    "currency" : "Undefined",
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  } ]
}}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter maxPointCount: (query)  (optional)     - parameter currency: (query)  (optional)     - parameter currencies: (query)  (optional)

     - returns: RequestBuilder<AccountProfitPercentCharts> 
     */
    open class func getProfitPercentChartsWithRequestBuilder(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency? = nil, currencies: [Currency]? = nil) -> RequestBuilder<AccountProfitPercentCharts> {
        var path = "/v2.0/tradingaccount/{id}/charts/profit/percent"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "MaxPointCount": maxPointCount?.encodeToJSON(), 
                        "Currency": currency, 
                        "currencies": currencies
        ])

        let requestBuilder: RequestBuilder<AccountProfitPercentCharts>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Trading account trades
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter sorting: (query)  (optional)     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter isFollow: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTrades(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: TradeSorting? = nil, accountId: UUID? = nil, accountCurrency: Currency? = nil, isFollow: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: TradesSignalViewModel?,_ error: Error?) -> Void)) {
        getTradesWithRequestBuilder(_id: _id, dateFrom: dateFrom, dateTo: dateTo, symbol: symbol, sorting: sorting, accountId: accountId, accountCurrency: accountCurrency, isFollow: isFollow, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trading account trades
     - GET /v2.0/tradingaccount/{id}/trades
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "total" : 7,
  "showSwaps" : true,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "originalCommission" : 2.3021358869347655,
    "login" : "login",
    "totalCommission" : 6.84685269835264,
    "priceCurrent" : 5.962133916683182,
    "price" : 1.4658129805029452,
    "showOriginalCommission" : true,
    "commission" : 7.061401241503109,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 5.637376656633329,
    "signalData" : {
      "masters" : [ {
        "share" : 3.616076749251911,
        "login" : "login"
      }, {
        "share" : 3.616076749251911,
        "login" : "login"
      } ]
    },
    "profit" : 6.027456183070403,
    "direction" : "Buy",
    "ticket" : "ticket",
    "assetData" : {
      "hasAssetInfo" : true,
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "swap" : 9.301444243932576,
    "volume" : 0.8008281904610115,
    "entry" : "In",
    "totalCommissionByType" : [ {
      "amount" : 9.301444243932576,
      "description" : "description",
      "title" : "title",
      "type" : "Undefined"
    }, {
      "amount" : 9.301444243932576,
      "description" : "description",
      "title" : "title",
      "type" : "Undefined"
    } ],
    "tradingAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profitCurrency" : "profitCurrency",
    "providers" : [ {
      "volume" : 7.386281948385884,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      }, {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 1.2315135367772556,
      "program" : {
        "color" : "color",
        "level" : 2,
        "title" : "title",
        "type" : "None",
        "url" : "url",
        "logoUrl" : "logoUrl",
        "levelProgress" : 4.145608029883936
      },
      "profit" : 1.0246457001441578,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "volume" : 7.386281948385884,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      }, {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 1.2315135367772556,
      "program" : {
        "color" : "color",
        "level" : 2,
        "title" : "title",
        "type" : "None",
        "url" : "url",
        "logoUrl" : "logoUrl",
        "levelProgress" : 4.145608029883936
      },
      "profit" : 1.0246457001441578,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "originalCommission" : 2.3021358869347655,
    "login" : "login",
    "totalCommission" : 6.84685269835264,
    "priceCurrent" : 5.962133916683182,
    "price" : 1.4658129805029452,
    "showOriginalCommission" : true,
    "commission" : 7.061401241503109,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 5.637376656633329,
    "signalData" : {
      "masters" : [ {
        "share" : 3.616076749251911,
        "login" : "login"
      }, {
        "share" : 3.616076749251911,
        "login" : "login"
      } ]
    },
    "profit" : 6.027456183070403,
    "direction" : "Buy",
    "ticket" : "ticket",
    "assetData" : {
      "hasAssetInfo" : true,
      "logoUrl" : "logoUrl",
      "url" : "url"
    },
    "swap" : 9.301444243932576,
    "volume" : 0.8008281904610115,
    "entry" : "In",
    "totalCommissionByType" : [ {
      "amount" : 9.301444243932576,
      "description" : "description",
      "title" : "title",
      "type" : "Undefined"
    }, {
      "amount" : 9.301444243932576,
      "description" : "description",
      "title" : "title",
      "type" : "Undefined"
    } ],
    "tradingAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profitCurrency" : "profitCurrency",
    "providers" : [ {
      "volume" : 7.386281948385884,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      }, {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 1.2315135367772556,
      "program" : {
        "color" : "color",
        "level" : 2,
        "title" : "title",
        "type" : "None",
        "url" : "url",
        "logoUrl" : "logoUrl",
        "levelProgress" : 4.145608029883936
      },
      "profit" : 1.0246457001441578,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "volume" : 7.386281948385884,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      }, {
        "amount" : 1.4894159098541704,
        "currency" : "Undefined",
        "type" : "Undefined"
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        }, {
          "name" : "name",
          "type" : "Undefined",
          "value" : "value",
          "url" : "url",
          "logoUrl" : "logoUrl"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "logoUrl" : "logoUrl",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 1.2315135367772556,
      "program" : {
        "color" : "color",
        "level" : 2,
        "title" : "title",
        "type" : "None",
        "url" : "url",
        "logoUrl" : "logoUrl",
        "levelProgress" : 4.145608029883936
      },
      "profit" : 1.0246457001441578,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ]
  } ],
  "showTickets" : true,
  "tradesDelay" : "None"
}}]
     - parameter _id: (path)       - parameter dateFrom: (query)  (optional)     - parameter dateTo: (query)  (optional)     - parameter symbol: (query)  (optional)     - parameter sorting: (query)  (optional)     - parameter accountId: (query)  (optional)     - parameter accountCurrency: (query)  (optional)     - parameter isFollow: (query)  (optional)     - parameter skip: (query)  (optional)     - parameter take: (query)  (optional)

     - returns: RequestBuilder<TradesSignalViewModel> 
     */
    open class func getTradesWithRequestBuilder(_id: UUID, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: TradeSorting? = nil, accountId: UUID? = nil, accountCurrency: Currency? = nil, isFollow: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<TradesSignalViewModel> {
        var path = "/v2.0/tradingaccount/{id}/trades"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: [
                        "DateFrom": dateFrom?.encodeToJSON(), 
                        "DateTo": dateTo?.encodeToJSON(), 
                        "Symbol": symbol, 
                        "Sorting": sorting, 
                        "AccountId": accountId, 
                        "AccountCurrency": accountCurrency, 
                        "IsFollow": isFollow, 
                        "Skip": skip?.encodeToJSON(), 
                        "Take": take?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<TradesSignalViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Trading account details
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTradingAccountDetails(_id: UUID, completion: @escaping ((_ data: PrivateTradingAccountFull?,_ error: Error?) -> Void)) {
        getTradingAccountDetailsWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Trading account details
     - GET /v2.0/tradingaccount/{id}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "tradingAccountInfo" : {
    "showTradingLog" : true,
    "leverage" : 0,
    "supportedCurrencies" : [ null, null ],
    "balances" : [ {
      "amount" : 7.457744773683766,
      "currency" : "Undefined"
    }, {
      "amount" : 7.457744773683766,
      "currency" : "Undefined"
    } ],
    "subscriptions" : 1,
    "apiKey" : "apiKey",
    "balance" : 6.027456183070403,
    "isExternal" : true,
    "permissions" : [ "None", "None" ],
    "currency" : "Undefined",
    "login" : "login",
    "type" : "None"
  },
  "publicInfo" : {
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "status" : "Pending"
  },
  "ownerActions" : {
    "canClose" : true,
    "canCloseOpenPositions" : true,
    "canEditSignalProviderSettings" : true,
    "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
    "canCreateApiKeys" : true,
    "canTransferMoney" : true,
    "canMakeDemoDeposit" : true,
    "canMakeProgramFromPrivateTradingAccount" : true,
    "canMakeExchangeProgramFromPrivateTradingAccount" : true,
    "canMakeProgramFromSignalProvider" : true,
    "isEnoughMoneyToCreateProgram" : true,
    "canChangePassword" : true,
    "canMakeSignalProviderFromPrivateTradingAccount" : true,
    "canMakeSignalProviderFromProgram" : true,
    "canConfirm2FA" : true
  },
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "brokerDetails" : {
    "showCommissionRebateSometime" : true,
    "showCommissionRebate" : true,
    "showSwaps" : true,
    "showTicketsSometime" : true,
    "type" : "Undefined",
    "showTickets" : true,
    "logoUrl" : "logoUrl",
    "isKycRequired" : true,
    "name" : "name",
    "showSwapsSometime" : true,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "isSignalsAvailable" : true,
    "isKycRequiredSometime" : true
  }
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<PrivateTradingAccountFull> 
     */
    open class func getTradingAccountDetailsWithRequestBuilder(_id: UUID) -> RequestBuilder<PrivateTradingAccountFull> {
        var path = "/v2.0/tradingaccount/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PrivateTradingAccountFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
