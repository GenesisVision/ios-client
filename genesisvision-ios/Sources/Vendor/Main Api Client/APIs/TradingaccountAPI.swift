//
// TradingaccountAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TradingaccountAPI {
    /**
     * enum for parameter sorting
     */
    public enum Sorting_exportTrades: String { 
        case byDateAsc = "ByDateAsc"
        case byDateDesc = "ByDateDesc"
        case byTicketAsc = "ByTicketAsc"
        case byTicketDesc = "ByTicketDesc"
        case bySymbolAsc = "BySymbolAsc"
        case bySymbolDesc = "BySymbolDesc"
        case byDirectionAsc = "ByDirectionAsc"
        case byDirectionDesc = "ByDirectionDesc"
        case byVolumeAsc = "ByVolumeAsc"
        case byVolumeDesc = "ByVolumeDesc"
        case byPriceAsc = "ByPriceAsc"
        case byPriceDesc = "ByPriceDesc"
        case byPriceCurrentAsc = "ByPriceCurrentAsc"
        case byPriceCurrentDesc = "ByPriceCurrentDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byCommissionAsc = "ByCommissionAsc"
        case byCommissionDesc = "ByCommissionDesc"
        case bySwapAsc = "BySwapAsc"
        case bySwapDesc = "BySwapDesc"
    }

    /**
     * enum for parameter accountCurrency
     */
    public enum AccountCurrency_exportTrades: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Export trade history
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter symbol: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter accountId: (query)  (optional)
     - parameter accountCurrency: (query)  (optional)
     - parameter isFollow: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportTrades(id: UUID, authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: Sorting_exportTrades? = nil, accountId: UUID? = nil, accountCurrency: AccountCurrency_exportTrades? = nil, isFollow: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        exportTradesWithRequestBuilder(id: id, authorization: authorization, dateFrom: dateFrom, dateTo: dateTo, symbol: symbol, sorting: sorting, accountId: accountId, accountCurrency: accountCurrency, isFollow: isFollow, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Export trade history
     - GET /v2.0/tradingaccount/{id}/trades/export
     - examples: [{contentType=application/json, example=""}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter symbol: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter accountId: (query)  (optional)
     - parameter accountCurrency: (query)  (optional)
     - parameter isFollow: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<Data> 
     */
    open class func exportTradesWithRequestBuilder(id: UUID, authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: Sorting_exportTrades? = nil, accountId: UUID? = nil, accountCurrency: AccountCurrency_exportTrades? = nil, isFollow: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<Data> {
        var path = "/v2.0/tradingaccount/{id}/trades/export"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "Symbol": symbol, 
            "Sorting": sorting?.rawValue, 
            "AccountId": accountId, 
            "AccountCurrency": accountCurrency?.rawValue, 
            "IsFollow": isFollow, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getAbsoluteProfitChart: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Trading account absolute profit chart
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAbsoluteProfitChart(id: UUID, authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getAbsoluteProfitChart? = nil, completion: @escaping ((_ data: AbsoluteProfitChart?,_ error: Error?) -> Void)) {
        getAbsoluteProfitChartWithRequestBuilder(id: id, authorization: authorization, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Trading account absolute profit chart
     - GET /v2.0/tradingaccount/{id}/charts/profit/absolute
     - examples: [{contentType=application/json, example={
  "profit" : 0.8008281904610115,
  "chart" : [ {
    "date" : 0,
    "value" : 6.027456183070403
  }, {
    "date" : 0,
    "value" : 6.027456183070403
  } ]
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<AbsoluteProfitChart> 
     */
    open class func getAbsoluteProfitChartWithRequestBuilder(id: UUID, authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getAbsoluteProfitChart? = nil) -> RequestBuilder<AbsoluteProfitChart> {
        var path = "/v2.0/tradingaccount/{id}/charts/profit/absolute"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "MaxPointCount": maxPointCount?.encodeToJSON(), 
            "Currency": currency?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AbsoluteProfitChart>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getBalanceChart: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Trading account balance chart
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBalanceChart(id: UUID, authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getBalanceChart? = nil, completion: @escaping ((_ data: AccountBalanceChart?,_ error: Error?) -> Void)) {
        getBalanceChartWithRequestBuilder(id: id, authorization: authorization, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Trading account balance chart
     - GET /v2.0/tradingaccount/{id}/charts/balance
     - examples: [{contentType=application/json, example={
  "balance" : 0.8008281904610115,
  "color" : "color",
  "chart" : [ {
    "date" : 0,
    "value" : 6.027456183070403
  }, {
    "date" : 0,
    "value" : 6.027456183070403
  } ]
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)

     - returns: RequestBuilder<AccountBalanceChart> 
     */
    open class func getBalanceChartWithRequestBuilder(id: UUID, authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getBalanceChart? = nil) -> RequestBuilder<AccountBalanceChart> {
        var path = "/v2.0/tradingaccount/{id}/charts/balance"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "MaxPointCount": maxPointCount?.encodeToJSON(), 
            "Currency": currency?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AccountBalanceChart>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_getOpenTrades: String { 
        case byDateAsc = "ByDateAsc"
        case byDateDesc = "ByDateDesc"
        case byTicketAsc = "ByTicketAsc"
        case byTicketDesc = "ByTicketDesc"
        case bySymbolAsc = "BySymbolAsc"
        case bySymbolDesc = "BySymbolDesc"
        case byDirectionAsc = "ByDirectionAsc"
        case byDirectionDesc = "ByDirectionDesc"
        case byVolumeAsc = "ByVolumeAsc"
        case byVolumeDesc = "ByVolumeDesc"
        case byPriceAsc = "ByPriceAsc"
        case byPriceDesc = "ByPriceDesc"
        case byPriceCurrentAsc = "ByPriceCurrentAsc"
        case byPriceCurrentDesc = "ByPriceCurrentDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byCommissionAsc = "ByCommissionAsc"
        case byCommissionDesc = "ByCommissionDesc"
        case bySwapAsc = "BySwapAsc"
        case bySwapDesc = "BySwapDesc"
    }

    /**
     * enum for parameter accountCurrency
     */
    public enum AccountCurrency_getOpenTrades: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Trading account open positions
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter symbol: (query)  (optional)
     - parameter accountId: (query)  (optional)
     - parameter accountCurrency: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOpenTrades(id: UUID, authorization: String, sorting: Sorting_getOpenTrades? = nil, symbol: String? = nil, accountId: UUID? = nil, accountCurrency: AccountCurrency_getOpenTrades? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: TradesViewModel?,_ error: Error?) -> Void)) {
        getOpenTradesWithRequestBuilder(id: id, authorization: authorization, sorting: sorting, symbol: symbol, accountId: accountId, accountCurrency: accountCurrency, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Trading account open positions
     - GET /v2.0/tradingaccount/{id}/trades/open
     - examples: [{contentType=application/json, example={
  "total" : 3,
  "showSwaps" : true,
  "showTickets" : true,
  "tradesDelay" : { },
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "ticket" : "ticket",
    "swap" : 9.301444243932576,
    "originalCommission" : 2.3021358869347655,
    "login" : "login",
    "volume" : 0.8008281904610115,
    "priceCurrent" : 5.962133916683182,
    "entry" : { },
    "price" : 1.4658129805029452,
    "showOriginalCommission" : true,
    "profitCurrency" : "profitCurrency",
    "commission" : 7.061401241503109,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 5.637376656633329,
    "signalData" : {
      "masters" : [ {
        "share" : 6.84685269835264,
        "login" : "login"
      }, {
        "share" : 6.84685269835264,
        "login" : "login"
      } ]
    },
    "profit" : 6.027456183070403,
    "direction" : { }
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "ticket" : "ticket",
    "swap" : 9.301444243932576,
    "originalCommission" : 2.3021358869347655,
    "login" : "login",
    "volume" : 0.8008281904610115,
    "priceCurrent" : 5.962133916683182,
    "entry" : { },
    "price" : 1.4658129805029452,
    "showOriginalCommission" : true,
    "profitCurrency" : "profitCurrency",
    "commission" : 7.061401241503109,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 5.637376656633329,
    "signalData" : {
      "masters" : [ {
        "share" : 6.84685269835264,
        "login" : "login"
      }, {
        "share" : 6.84685269835264,
        "login" : "login"
      } ]
    },
    "profit" : 6.027456183070403,
    "direction" : { }
  } ]
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter symbol: (query)  (optional)
     - parameter accountId: (query)  (optional)
     - parameter accountCurrency: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<TradesViewModel> 
     */
    open class func getOpenTradesWithRequestBuilder(id: UUID, authorization: String, sorting: Sorting_getOpenTrades? = nil, symbol: String? = nil, accountId: UUID? = nil, accountCurrency: AccountCurrency_getOpenTrades? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<TradesViewModel> {
        var path = "/v2.0/tradingaccount/{id}/trades/open"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "Sorting": sorting?.rawValue, 
            "Symbol": symbol, 
            "AccountId": accountId, 
            "AccountCurrency": accountCurrency?.rawValue, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TradesViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter currency
     */
    public enum Currency_getProfitPercentCharts: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Trading account profit percent charts
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter currencies: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProfitPercentCharts(id: UUID, authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getProfitPercentCharts? = nil, currencies: [String]? = nil, completion: @escaping ((_ data: AccountProfitPercentCharts?,_ error: Error?) -> Void)) {
        getProfitPercentChartsWithRequestBuilder(id: id, authorization: authorization, dateFrom: dateFrom, dateTo: dateTo, maxPointCount: maxPointCount, currency: currency, currencies: currencies).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Trading account profit percent charts
     - GET /v2.0/tradingaccount/{id}/charts/profit/percent
     - examples: [{contentType=application/json, example={
  "statistic" : {
    "profitFactor" : 5.962133916683182,
    "calmarRatio" : 3.616076749251911,
    "balance" : 5.637376656633329,
    "profitPercent" : 2.3021358869347655,
    "successTradesPercent" : 1.4658129805029452,
    "trades" : 6,
    "maxDrawdown" : 2.027123023002322,
    "sharpeRatio" : 7.061401241503109,
    "tradingVolume" : 0.8008281904610115,
    "sortinoRatio" : 9.301444243932576
  },
  "charts" : [ {
    "color" : "color",
    "currency" : { },
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  }, {
    "color" : "color",
    "currency" : { },
    "chart" : [ {
      "date" : 0,
      "value" : 6.027456183070403
    }, {
      "date" : 0,
      "value" : 6.027456183070403
    } ]
  } ]
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter maxPointCount: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter currencies: (query)  (optional)

     - returns: RequestBuilder<AccountProfitPercentCharts> 
     */
    open class func getProfitPercentChartsWithRequestBuilder(id: UUID, authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, maxPointCount: Int? = nil, currency: Currency_getProfitPercentCharts? = nil, currencies: [String]? = nil) -> RequestBuilder<AccountProfitPercentCharts> {
        var path = "/v2.0/tradingaccount/{id}/charts/profit/percent"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "MaxPointCount": maxPointCount?.encodeToJSON(), 
            "Currency": currency?.rawValue, 
            "currencies": currencies
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AccountProfitPercentCharts>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_getTrades: String { 
        case byDateAsc = "ByDateAsc"
        case byDateDesc = "ByDateDesc"
        case byTicketAsc = "ByTicketAsc"
        case byTicketDesc = "ByTicketDesc"
        case bySymbolAsc = "BySymbolAsc"
        case bySymbolDesc = "BySymbolDesc"
        case byDirectionAsc = "ByDirectionAsc"
        case byDirectionDesc = "ByDirectionDesc"
        case byVolumeAsc = "ByVolumeAsc"
        case byVolumeDesc = "ByVolumeDesc"
        case byPriceAsc = "ByPriceAsc"
        case byPriceDesc = "ByPriceDesc"
        case byPriceCurrentAsc = "ByPriceCurrentAsc"
        case byPriceCurrentDesc = "ByPriceCurrentDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byCommissionAsc = "ByCommissionAsc"
        case byCommissionDesc = "ByCommissionDesc"
        case bySwapAsc = "BySwapAsc"
        case bySwapDesc = "BySwapDesc"
    }

    /**
     * enum for parameter accountCurrency
     */
    public enum AccountCurrency_getTrades: String { 
        case usd = "USD"
        case btc = "BTC"
        case eth = "ETH"
        case usdt = "USDT"
        case gvt = "GVT"
        case undefined = "Undefined"
        case ada = "ADA"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case bnb = "BNB"
        case eur = "EUR"
    }

    /**
     Trading account trades
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter symbol: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter accountId: (query)  (optional)
     - parameter accountCurrency: (query)  (optional)
     - parameter isFollow: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTrades(id: UUID, authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: Sorting_getTrades? = nil, accountId: UUID? = nil, accountCurrency: AccountCurrency_getTrades? = nil, isFollow: Bool? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: TradesSignalViewModel?,_ error: Error?) -> Void)) {
        getTradesWithRequestBuilder(id: id, authorization: authorization, dateFrom: dateFrom, dateTo: dateTo, symbol: symbol, sorting: sorting, accountId: accountId, accountCurrency: accountCurrency, isFollow: isFollow, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Trading account trades
     - GET /v2.0/tradingaccount/{id}/trades
     - examples: [{contentType=application/json, example={
  "total" : 7,
  "showSwaps" : true,
  "showTickets" : true,
  "items" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "ticket" : "ticket",
    "swap" : 1.4894159098541704,
    "originalCommission" : 1.2315135367772556,
    "totalCommission" : 7.061401241503109,
    "login" : "login",
    "volume" : 9.301444243932576,
    "totalCommissionByType" : [ {
      "amount" : 9.301444243932576,
      "description" : "description",
      "currency" : null,
      "title" : "title",
      "type" : { }
    }, {
      "amount" : 9.301444243932576,
      "description" : "description",
      "currency" : null,
      "title" : "title",
      "type" : { }
    } ],
    "priceCurrent" : 4.145608029883936,
    "entry" : { },
    "price" : 2.027123023002322,
    "showOriginalCommission" : true,
    "tradingAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "currency" : null,
    "profitCurrency" : "profitCurrency",
    "commission" : 1.0246457001441578,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 7.386281948385884,
    "signalData" : {
      "masters" : [ {
        "share" : 6.84685269835264,
        "login" : "login"
      }, {
        "share" : 6.84685269835264,
        "login" : "login"
      } ]
    },
    "profit" : 3.616076749251911,
    "providers" : [ {
      "volume" : 1.4658129805029452,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      }, {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        }, {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "avatar" : "avatar",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 5.962133916683182,
      "program" : {
        "color" : "color",
        "level" : 0,
        "logo" : "logo",
        "title" : "title",
        "type" : { },
        "url" : "url",
        "levelProgress" : 6.027456183070403
      },
      "profit" : 5.637376656633329,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "volume" : 1.4658129805029452,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      }, {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        }, {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "avatar" : "avatar",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 5.962133916683182,
      "program" : {
        "color" : "color",
        "level" : 0,
        "logo" : "logo",
        "title" : "title",
        "type" : { },
        "url" : "url",
        "levelProgress" : 6.027456183070403
      },
      "profit" : 5.637376656633329,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ],
    "direction" : { }
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "originalCommissionCurrency" : "originalCommissionCurrency",
    "symbol" : "symbol",
    "ticket" : "ticket",
    "swap" : 1.4894159098541704,
    "originalCommission" : 1.2315135367772556,
    "totalCommission" : 7.061401241503109,
    "login" : "login",
    "volume" : 9.301444243932576,
    "totalCommissionByType" : [ {
      "amount" : 9.301444243932576,
      "description" : "description",
      "currency" : null,
      "title" : "title",
      "type" : { }
    }, {
      "amount" : 9.301444243932576,
      "description" : "description",
      "currency" : null,
      "title" : "title",
      "type" : { }
    } ],
    "priceCurrent" : 4.145608029883936,
    "entry" : { },
    "price" : 2.027123023002322,
    "showOriginalCommission" : true,
    "tradingAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "currency" : null,
    "profitCurrency" : "profitCurrency",
    "commission" : 1.0246457001441578,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "baseVolume" : 7.386281948385884,
    "signalData" : {
      "masters" : [ {
        "share" : 6.84685269835264,
        "login" : "login"
      }, {
        "share" : 6.84685269835264,
        "login" : "login"
      } ]
    },
    "profit" : 3.616076749251911,
    "providers" : [ {
      "volume" : 1.4658129805029452,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      }, {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        }, {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "avatar" : "avatar",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 5.962133916683182,
      "program" : {
        "color" : "color",
        "level" : 0,
        "logo" : "logo",
        "title" : "title",
        "type" : { },
        "url" : "url",
        "levelProgress" : 6.027456183070403
      },
      "profit" : 5.637376656633329,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }, {
      "volume" : 1.4658129805029452,
      "firstOrderDate" : "2000-01-23T04:56:07.000+00:00",
      "fees" : [ {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      }, {
        "amount" : 2.3021358869347655,
        "currency" : { },
        "type" : { }
      } ],
      "manager" : {
        "socialLinks" : [ {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        }, {
          "name" : "name",
          "logo" : "logo",
          "type" : { },
          "value" : "value",
          "url" : "url"
        } ],
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "avatar" : "avatar",
        "url" : "url",
        "username" : "username"
      },
      "priceOpenAvg" : 5.962133916683182,
      "program" : {
        "color" : "color",
        "level" : 0,
        "logo" : "logo",
        "title" : "title",
        "type" : { },
        "url" : "url",
        "levelProgress" : 6.027456183070403
      },
      "profit" : 5.637376656633329,
      "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    } ],
    "direction" : { }
  } ]
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter symbol: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter accountId: (query)  (optional)
     - parameter accountCurrency: (query)  (optional)
     - parameter isFollow: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<TradesSignalViewModel> 
     */
    open class func getTradesWithRequestBuilder(id: UUID, authorization: String, dateFrom: Date? = nil, dateTo: Date? = nil, symbol: String? = nil, sorting: Sorting_getTrades? = nil, accountId: UUID? = nil, accountCurrency: AccountCurrency_getTrades? = nil, isFollow: Bool? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<TradesSignalViewModel> {
        var path = "/v2.0/tradingaccount/{id}/trades"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "DateFrom": dateFrom?.encodeToJSON(), 
            "DateTo": dateTo?.encodeToJSON(), 
            "Symbol": symbol, 
            "Sorting": sorting?.rawValue, 
            "AccountId": accountId, 
            "AccountCurrency": accountCurrency?.rawValue, 
            "IsFollow": isFollow, 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TradesSignalViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Trading account details
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTradingAccountDetails(id: UUID, authorization: String, completion: @escaping ((_ data: PrivateTradingAccountFull?,_ error: Error?) -> Void)) {
        getTradingAccountDetailsWithRequestBuilder(id: id, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Trading account details
     - GET /v2.0/tradingaccount/{id}
     - examples: [{contentType=application/json, example={
  "tradingAccountInfo" : {
    "leverage" : 0,
    "subscriptions" : 1,
    "apiKey" : "apiKey",
    "balance" : 6.027456183070403,
    "isExternal" : true,
    "currency" : "USD",
    "login" : "login",
    "type" : { }
  },
  "publicInfo" : {
    "title" : "title",
    "creationDate" : "2000-01-23T04:56:07.000+00:00",
    "status" : { }
  },
  "ownerActions" : {
    "canClose" : true,
    "isEnoughMoneyToCreateProgram" : true,
    "canChangePassword" : true,
    "canEditSignalProviderSettings" : true,
    "canMakeSignalProviderFromPrivateTradingAccount" : true,
    "canMakeSignalProviderFromProgram" : true,
    "canMakeSignalProviderFromPrivateExternalTradingAccount" : true,
    "canTransferMoney" : true,
    "canMakeDemoDeposit" : true,
    "canMakeProgramFromPrivateTradingAccount" : true,
    "canConfirm2FA" : true,
    "canMakeProgramFromSignalProvider" : true
  },
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "brokerDetails" : {
    "showCommissionRebateSometime" : true,
    "showCommissionRebate" : true,
    "showSwaps" : true,
    "showTicketsSometime" : true,
    "type" : { },
    "showTickets" : true,
    "isKycRequired" : true,
    "name" : "name",
    "logo" : "logo",
    "showSwapsSometime" : true,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "isSignalsAvailable" : true,
    "isKycRequiredSometime" : true
  }
}}]
     
     - parameter id: (path)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<PrivateTradingAccountFull> 
     */
    open class func getTradingAccountDetailsWithRequestBuilder(id: UUID, authorization: String) -> RequestBuilder<PrivateTradingAccountFull> {
        var path = "/v2.0/tradingaccount/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PrivateTradingAccountFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
